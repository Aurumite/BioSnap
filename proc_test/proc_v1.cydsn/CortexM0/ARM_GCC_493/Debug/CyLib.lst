ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CyLib.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	cydelayFreqHz
  18              		.data
  19              		.align	2
  20              		.type	cydelayFreqHz, %object
  21              		.size	cydelayFreqHz, 4
  22              	cydelayFreqHz:
  23 0000 006CDC02 		.word	48000000
  24              		.global	cydelayFreqKhz
  25              		.align	2
  26              		.type	cydelayFreqKhz, %object
  27              		.size	cydelayFreqKhz, 4
  28              	cydelayFreqKhz:
  29 0004 80BB0000 		.word	48000
  30              		.global	cydelayFreqMhz
  31              		.type	cydelayFreqMhz, %object
  32              		.size	cydelayFreqMhz, 1
  33              	cydelayFreqMhz:
  34 0008 30       		.byte	48
  35              		.global	cydelay32kMs
  36 0009 000000   		.align	2
  37              		.type	cydelay32kMs, %object
  38              		.size	cydelay32kMs, 4
  39              	cydelay32kMs:
  40 000c 0000C05D 		.word	1572864000
  41              		.bss
  42              		.align	2
  43              	CySysTickCallbacks:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.global	CySysTickInitVar
  46              		.align	2
  47              		.type	CySysTickInitVar, %object
  48              		.size	CySysTickInitVar, 4
  49              	CySysTickInitVar:
  50 0014 00000000 		.space	4
  51              		.global	cyImoFreqMhz2Reg
  52              		.section	.rodata
  53              		.align	2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 2


  54              		.type	cyImoFreqMhz2Reg, %object
  55              		.size	cyImoFreqMhz2Reg, 46
  56              	cyImoFreqMhz2Reg:
  57 0000 03       		.byte	3
  58 0001 04       		.byte	4
  59 0002 05       		.byte	5
  60 0003 06       		.byte	6
  61 0004 07       		.byte	7
  62 0005 08       		.byte	8
  63 0006 09       		.byte	9
  64 0007 0A       		.byte	10
  65 0008 0B       		.byte	11
  66 0009 0C       		.byte	12
  67 000a 0E       		.byte	14
  68 000b 0F       		.byte	15
  69 000c 10       		.byte	16
  70 000d 11       		.byte	17
  71 000e 12       		.byte	18
  72 000f 13       		.byte	19
  73 0010 14       		.byte	20
  74 0011 15       		.byte	21
  75 0012 16       		.byte	22
  76 0013 17       		.byte	23
  77 0014 18       		.byte	24
  78 0015 19       		.byte	25
  79 0016 1B       		.byte	27
  80 0017 1C       		.byte	28
  81 0018 1D       		.byte	29
  82 0019 1E       		.byte	30
  83 001a 1F       		.byte	31
  84 001b 20       		.byte	32
  85 001c 21       		.byte	33
  86 001d 22       		.byte	34
  87 001e 23       		.byte	35
  88 001f 25       		.byte	37
  89 0020 26       		.byte	38
  90 0021 27       		.byte	39
  91 0022 28       		.byte	40
  92 0023 29       		.byte	41
  93 0024 2A       		.byte	42
  94 0025 2B       		.byte	43
  95 0026 2E       		.byte	46
  96 0027 2F       		.byte	47
  97 0028 30       		.byte	48
  98 0029 31       		.byte	49
  99 002a 32       		.byte	50
 100 002b 33       		.byte	51
 101 002c 34       		.byte	52
 102 002d 35       		.byte	53
 103 002e 0000     		.section	.text.CySysClkImoStart,"ax",%progbits
 104              		.align	2
 105              		.global	CySysClkImoStart
 106              		.code	16
 107              		.thumb_func
 108              		.type	CySysClkImoStart, %function
 109              	CySysClkImoStart:
 110              	.LFB2:
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 3


 111              		.file 1 ".\\Generated_Source\\PSoC4\\CyLib.c"
   1:.\Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:.\Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:.\Generated_Source\PSoC4/CyLib.c **** * \version 5.40
   4:.\Generated_Source\PSoC4/CyLib.c **** *
   5:.\Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:.\Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:.\Generated_Source\PSoC4/CyLib.c **** *
   8:.\Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:.\Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:.\Generated_Source\PSoC4/CyLib.c **** *
  11:.\Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:.\Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC4/CyLib.c **** 
  19:.\Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:.\Generated_Source\PSoC4/CyLib.c **** 
  21:.\Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:.\Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:.\Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:.\Generated_Source\PSoC4/CyLib.c **** 
  26:.\Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:.\Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:.\Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:.\Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:.\Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:.\Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:.\Generated_Source\PSoC4/CyLib.c **** 
  33:.\Generated_Source\PSoC4/CyLib.c **** 
  34:.\Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:.\Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
  37:.\Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  38:.\Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  39:.\Generated_Source\PSoC4/CyLib.c **** #endif /* #if (CY_IP_SRSSV2 && CY_IP_PLL) */
  40:.\Generated_Source\PSoC4/CyLib.c **** 
  41:.\Generated_Source\PSoC4/CyLib.c **** 
  42:.\Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  43:.\Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  44:.\Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  45:.\Generated_Source\PSoC4/CyLib.c **** *
  46:.\Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
  47:.\Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  48:.\Generated_Source\PSoC4/CyLib.c **** *
  49:.\Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  50:.\Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  51:.\Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  52:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  53:.\Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  54:.\Generated_Source\PSoC4/CyLib.c **** 
  55:.\Generated_Source\PSoC4/CyLib.c **** 
  56:.\Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 4


  57:.\Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  58:.\Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  59:.\Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  60:.\Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  61:.\Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  62:.\Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  63:.\Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  64:.\Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  65:.\Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  66:.\Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  67:.\Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  68:.\Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  69:.\Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  70:.\Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  71:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  72:.\Generated_Source\PSoC4/CyLib.c **** 
  73:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  74:.\Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  75:.\Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  76:.\Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  77:.\Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  78:.\Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  79:.\Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  80:.\Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  81:.\Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  82:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  83:.\Generated_Source\PSoC4/CyLib.c **** 
  84:.\Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  85:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  86:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  87:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  88:.\Generated_Source\PSoC4/CyLib.c **** 
  89:.\Generated_Source\PSoC4/CyLib.c **** 
  90:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  91:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  92:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  93:.\Generated_Source\PSoC4/CyLib.c **** *
  94:.\Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  95:.\Generated_Source\PSoC4/CyLib.c **** *
  96:.\Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
  97:.\Generated_Source\PSoC4/CyLib.c **** * this function will also enable WCO lock if selected in the Design Wide
  98:.\Generated_Source\PSoC4/CyLib.c **** * Resources tab.
  99:.\Generated_Source\PSoC4/CyLib.c **** *
 100:.\Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L / devices, this function will also enable USB lock if selected
 101:.\Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
 102:.\Generated_Source\PSoC4/CyLib.c **** *
 103:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 104:.\Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 105:.\Generated_Source\PSoC4/CyLib.c **** {
 112              		.loc 1 105 0
 113              		.cfi_startproc
 114 0000 80B5     		push	{r7, lr}
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 00AF     		add	r7, sp, #0
 119              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 5


 106:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 120              		.loc 1 106 0
 121 0004 044B     		ldr	r3, .L2
 122 0006 044A     		ldr	r2, .L2
 123 0008 1268     		ldr	r2, [r2]
 124 000a 8021     		mov	r1, #128
 125 000c 0906     		lsl	r1, r1, #24
 126 000e 0A43     		orr	r2, r1
 127 0010 1A60     		str	r2, [r3]
 107:.\Generated_Source\PSoC4/CyLib.c **** 
 108:.\Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 109:.\Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 110:.\Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 111:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 112:.\Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 113:.\Generated_Source\PSoC4/CyLib.c **** 
 114:.\Generated_Source\PSoC4/CyLib.c **** 
 115:.\Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 116:.\Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 117:.\Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 118:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 119:.\Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 120:.\Generated_Source\PSoC4/CyLib.c **** 
 121:.\Generated_Source\PSoC4/CyLib.c **** }
 128              		.loc 1 121 0
 129 0012 BD46     		mov	sp, r7
 130              		@ sp needed
 131 0014 80BD     		pop	{r7, pc}
 132              	.L3:
 133 0016 C046     		.align	2
 134              	.L2:
 135 0018 08010B40 		.word	1074462984
 136              		.cfi_endproc
 137              	.LFE2:
 138              		.size	CySysClkImoStart, .-CySysClkImoStart
 139              		.section	.text.CySysClkImoStop,"ax",%progbits
 140              		.align	2
 141              		.global	CySysClkImoStop
 142              		.code	16
 143              		.thumb_func
 144              		.type	CySysClkImoStop, %function
 145              	CySysClkImoStop:
 146              	.LFB3:
 122:.\Generated_Source\PSoC4/CyLib.c **** 
 123:.\Generated_Source\PSoC4/CyLib.c **** 
 124:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 125:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 126:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 127:.\Generated_Source\PSoC4/CyLib.c **** *
 128:.\Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 129:.\Generated_Source\PSoC4/CyLib.c **** *
 130:.\Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 131:.\Generated_Source\PSoC4/CyLib.c **** * this function will also disable WCO lock.
 132:.\Generated_Source\PSoC4/CyLib.c **** *
 133:.\Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 134:.\Generated_Source\PSoC4/CyLib.c **** *
 135:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 6


 136:.\Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 137:.\Generated_Source\PSoC4/CyLib.c **** {
 147              		.loc 1 137 0
 148              		.cfi_startproc
 149 0000 80B5     		push	{r7, lr}
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 00AF     		add	r7, sp, #0
 154              		.cfi_def_cfa_register 7
 138:.\Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 139:.\Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 140:.\Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 141:.\Generated_Source\PSoC4/CyLib.c **** 
 142:.\Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 143:.\Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 144:.\Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 145:.\Generated_Source\PSoC4/CyLib.c **** 
 146:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 155              		.loc 1 146 0
 156 0004 034B     		ldr	r3, .L5
 157 0006 034A     		ldr	r2, .L5
 158 0008 1268     		ldr	r2, [r2]
 159 000a 5200     		lsl	r2, r2, #1
 160 000c 5208     		lsr	r2, r2, #1
 161 000e 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/CyLib.c **** }
 162              		.loc 1 147 0
 163 0010 BD46     		mov	sp, r7
 164              		@ sp needed
 165 0012 80BD     		pop	{r7, pc}
 166              	.L6:
 167              		.align	2
 168              	.L5:
 169 0014 08010B40 		.word	1074462984
 170              		.cfi_endproc
 171              	.LFE3:
 172              		.size	CySysClkImoStop, .-CySysClkImoStop
 173              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
 174              		.align	2
 175              		.global	CySysClkWriteHfclkDirect
 176              		.code	16
 177              		.thumb_func
 178              		.type	CySysClkWriteHfclkDirect, %function
 179              	CySysClkWriteHfclkDirect:
 180              	.LFB4:
 148:.\Generated_Source\PSoC4/CyLib.c **** 
 149:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 150:.\Generated_Source\PSoC4/CyLib.c **** 
 151:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 152:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 153:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 154:.\Generated_Source\PSoC4/CyLib.c ****     *
 155:.\Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 156:.\Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 157:.\Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 158:.\Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 7


 159:.\Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 160:.\Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 161:.\Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 162:.\Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 163:.\Generated_Source\PSoC4/CyLib.c ****     * should be called.
 164:.\Generated_Source\PSoC4/CyLib.c ****     *
 165:.\Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 166:.\Generated_Source\PSoC4/CyLib.c ****     * but not both.
 167:.\Generated_Source\PSoC4/CyLib.c ****     *
 168:.\Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 169:.\Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 170:.\Generated_Source\PSoC4/CyLib.c ****     *
 171:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 172:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 173:.\Generated_Source\PSoC4/CyLib.c ****     {
 174:.\Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 175:.\Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 176:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 177:.\Generated_Source\PSoC4/CyLib.c **** 
 178:.\Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 179:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 180:.\Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 181:.\Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 182:.\Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 183:.\Generated_Source\PSoC4/CyLib.c **** 
 184:.\Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 185:.\Generated_Source\PSoC4/CyLib.c ****         {
 186:.\Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 187:.\Generated_Source\PSoC4/CyLib.c **** 
 188:.\Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 189:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 190:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 191:.\Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 192:.\Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 193:.\Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 194:.\Generated_Source\PSoC4/CyLib.c **** 
 195:.\Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 196:.\Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 197:.\Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 198:.\Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 199:.\Generated_Source\PSoC4/CyLib.c ****                 {
 200:.\Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 201:.\Generated_Source\PSoC4/CyLib.c ****                     {
 202:.\Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 203:.\Generated_Source\PSoC4/CyLib.c ****                         break;
 204:.\Generated_Source\PSoC4/CyLib.c ****                     }
 205:.\Generated_Source\PSoC4/CyLib.c ****                 }
 206:.\Generated_Source\PSoC4/CyLib.c ****             #else
 207:.\Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 208:.\Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 209:.\Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 210:.\Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 211:.\Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 212:.\Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 213:.\Generated_Source\PSoC4/CyLib.c ****                 #else
 214:.\Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 215:.\Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 8


 216:.\Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 217:.\Generated_Source\PSoC4/CyLib.c **** 
 218:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 219:.\Generated_Source\PSoC4/CyLib.c **** 
 220:.\Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 221:.\Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 222:.\Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 223:.\Generated_Source\PSoC4/CyLib.c ****                 {
 224:.\Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 225:.\Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 226:.\Generated_Source\PSoC4/CyLib.c ****                 }
 227:.\Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 228:.\Generated_Source\PSoC4/CyLib.c **** 
 229:.\Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 230:.\Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 231:.\Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 232:.\Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 233:.\Generated_Source\PSoC4/CyLib.c **** 
 234:.\Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 235:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 236:.\Generated_Source\PSoC4/CyLib.c **** 
 237:.\Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 238:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 239:.\Generated_Source\PSoC4/CyLib.c **** 
 240:.\Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 241:.\Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 242:.\Generated_Source\PSoC4/CyLib.c ****             {
 243:.\Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 244:.\Generated_Source\PSoC4/CyLib.c ****             }
 245:.\Generated_Source\PSoC4/CyLib.c ****             else
 246:.\Generated_Source\PSoC4/CyLib.c ****             {
 247:.\Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 248:.\Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 249:.\Generated_Source\PSoC4/CyLib.c **** 
 250:.\Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 251:.\Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 252:.\Generated_Source\PSoC4/CyLib.c **** 
 253:.\Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 254:.\Generated_Source\PSoC4/CyLib.c ****             }
 255:.\Generated_Source\PSoC4/CyLib.c **** 
 256:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 257:.\Generated_Source\PSoC4/CyLib.c **** 
 258:.\Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 259:.\Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 260:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 261:.\Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 262:.\Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 263:.\Generated_Source\PSoC4/CyLib.c **** 
 264:.\Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 265:.\Generated_Source\PSoC4/CyLib.c ****         }
 266:.\Generated_Source\PSoC4/CyLib.c ****     }
 267:.\Generated_Source\PSoC4/CyLib.c **** 
 268:.\Generated_Source\PSoC4/CyLib.c **** 
 269:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 270:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 271:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 272:.\Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 9


 273:.\Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 274:.\Generated_Source\PSoC4/CyLib.c ****     *
 275:.\Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 276:.\Generated_Source\PSoC4/CyLib.c ****     * but not both.
 277:.\Generated_Source\PSoC4/CyLib.c ****     *
 278:.\Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 279:.\Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 280:.\Generated_Source\PSoC4/CyLib.c ****     *
 281:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 282:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 283:.\Generated_Source\PSoC4/CyLib.c ****     {
 284:.\Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 285:.\Generated_Source\PSoC4/CyLib.c ****     }
 286:.\Generated_Source\PSoC4/CyLib.c **** 
 287:.\Generated_Source\PSoC4/CyLib.c **** 
 288:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 289:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 290:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 291:.\Generated_Source\PSoC4/CyLib.c ****     *
 292:.\Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 293:.\Generated_Source\PSoC4/CyLib.c ****     *
 294:.\Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 295:.\Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 296:.\Generated_Source\PSoC4/CyLib.c ****     *
 297:.\Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 298:.\Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 299:.\Generated_Source\PSoC4/CyLib.c ****     *
 300:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 301:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 302:.\Generated_Source\PSoC4/CyLib.c ****     {
 303:.\Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 304:.\Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 305:.\Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 306:.\Generated_Source\PSoC4/CyLib.c ****     }
 307:.\Generated_Source\PSoC4/CyLib.c **** 
 308:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 309:.\Generated_Source\PSoC4/CyLib.c **** 
 310:.\Generated_Source\PSoC4/CyLib.c **** 
 311:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 312:.\Generated_Source\PSoC4/CyLib.c **** 
 313:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 314:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 315:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 316:.\Generated_Source\PSoC4/CyLib.c ****     *
 317:.\Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 318:.\Generated_Source\PSoC4/CyLib.c ****     *
 319:.\Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 320:.\Generated_Source\PSoC4/CyLib.c ****     *
 321:.\Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 322:.\Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 323:.\Generated_Source\PSoC4/CyLib.c ****     *
 324:.\Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 325:.\Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 326:.\Generated_Source\PSoC4/CyLib.c ****     *
 327:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 328:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 329:.\Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 10


 330:.\Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 331:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 332:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 333:.\Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 334:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 335:.\Generated_Source\PSoC4/CyLib.c **** 
 336:.\Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 337:.\Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 338:.\Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_MASK;
 339:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 340:.\Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 341:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 342:.\Generated_Source\PSoC4/CyLib.c **** 
 343:.\Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 344:.\Generated_Source\PSoC4/CyLib.c ****     }
 345:.\Generated_Source\PSoC4/CyLib.c **** 
 346:.\Generated_Source\PSoC4/CyLib.c **** 
 347:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 348:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 349:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 350:.\Generated_Source\PSoC4/CyLib.c ****     *
 351:.\Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 352:.\Generated_Source\PSoC4/CyLib.c ****     *
 353:.\Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 354:.\Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 355:.\Generated_Source\PSoC4/CyLib.c ****     *
 356:.\Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 357:.\Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 358:.\Generated_Source\PSoC4/CyLib.c ****     *
 359:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 361:.\Generated_Source\PSoC4/CyLib.c ****     {
 362:.\Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 363:.\Generated_Source\PSoC4/CyLib.c **** 
 364:.\Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 365:.\Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 366:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 367:.\Generated_Source\PSoC4/CyLib.c ****                                     CySysClkImoTrim4;
 368:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 369:.\Generated_Source\PSoC4/CyLib.c ****     }
 370:.\Generated_Source\PSoC4/CyLib.c **** 
 371:.\Generated_Source\PSoC4/CyLib.c **** 
 372:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 373:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 374:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 375:.\Generated_Source\PSoC4/CyLib.c ****     *
 376:.\Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 377:.\Generated_Source\PSoC4/CyLib.c ****     *
 378:.\Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 379:.\Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 380:.\Generated_Source\PSoC4/CyLib.c ****     *
 381:.\Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 382:.\Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 383:.\Generated_Source\PSoC4/CyLib.c ****     *
 384:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 385:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 386:.\Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 11


 387:.\Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 388:.\Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 389:.\Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 390:.\Generated_Source\PSoC4/CyLib.c ****     }
 391:.\Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 392:.\Generated_Source\PSoC4/CyLib.c **** 
 393:.\Generated_Source\PSoC4/CyLib.c **** 
 394:.\Generated_Source\PSoC4/CyLib.c **** 
 395:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 396:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 397:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 398:.\Generated_Source\PSoC4/CyLib.c **** *
 399:.\Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 400:.\Generated_Source\PSoC4/CyLib.c **** *
 401:.\Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 402:.\Generated_Source\PSoC4/CyLib.c **** *
 403:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 404:.\Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 405:.\Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 406:.\Generated_Source\PSoC4/CyLib.c **** *
 407:.\Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 408:.\Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 409:.\Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 410:.\Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 411:.\Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 412:.\Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 413:.\Generated_Source\PSoC4/CyLib.c **** *
 414:.\Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 415:.\Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 416:.\Generated_Source\PSoC4/CyLib.c **** *
 417:.\Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 418:.\Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 419:.\Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 420:.\Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 421:.\Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L.
 422:.\Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L.
 423:.\Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 424:.\Generated_Source\PSoC4/CyLib.c **** *
 425:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 426:.\Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 427:.\Generated_Source\PSoC4/CyLib.c **** {
 181              		.loc 1 427 0
 182              		.cfi_startproc
 183 0000 90B5     		push	{r4, r7, lr}
 184              		.cfi_def_cfa_offset 12
 185              		.cfi_offset 4, -12
 186              		.cfi_offset 7, -8
 187              		.cfi_offset 14, -4
 188 0002 85B0     		sub	sp, sp, #20
 189              		.cfi_def_cfa_offset 32
 190 0004 00AF     		add	r7, sp, #0
 191              		.cfi_def_cfa_register 7
 192 0006 7860     		str	r0, [r7, #4]
 428:.\Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 429:.\Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 430:.\Generated_Source\PSoC4/CyLib.c **** 
 431:.\Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 12


 193              		.loc 1 431 0
 194 0008 0F23     		mov	r3, #15
 195 000a FC18     		add	r4, r7, r3
 196 000c FFF7FEFF 		bl	CyEnterCriticalSection
 197 0010 031C     		mov	r3, r0
 198 0012 2370     		strb	r3, [r4]
 432:.\Generated_Source\PSoC4/CyLib.c **** 
 433:.\Generated_Source\PSoC4/CyLib.c **** 
 434:.\Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 199              		.loc 1 434 0
 200 0014 0B4B     		ldr	r3, .L8
 201 0016 1B68     		ldr	r3, [r3]
 202 0018 0722     		mov	r2, #7
 203 001a 9343     		bic	r3, r2
 204 001c BB60     		str	r3, [r7, #8]
 435:.\Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 436:.\Generated_Source\PSoC4/CyLib.c **** 
 437:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 438:.\Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 439:.\Generated_Source\PSoC4/CyLib.c ****     {
 440:.\Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 441:.\Generated_Source\PSoC4/CyLib.c ****     }
 442:.\Generated_Source\PSoC4/CyLib.c ****     else
 443:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 444:.\Generated_Source\PSoC4/CyLib.c ****     {
 445:.\Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 205              		.loc 1 445 0
 206 001e 7B68     		ldr	r3, [r7, #4]
 207 0020 0722     		mov	r2, #7
 208 0022 1340     		and	r3, r2
 209 0024 BA68     		ldr	r2, [r7, #8]
 210 0026 1343     		orr	r3, r2
 211 0028 BB60     		str	r3, [r7, #8]
 446:.\Generated_Source\PSoC4/CyLib.c ****     }
 447:.\Generated_Source\PSoC4/CyLib.c **** 
 448:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 212              		.loc 1 448 0
 213 002a 064B     		ldr	r3, .L8
 214 002c BA68     		ldr	r2, [r7, #8]
 215 002e 1A60     		str	r2, [r3]
 449:.\Generated_Source\PSoC4/CyLib.c **** 
 450:.\Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 216              		.loc 1 450 0
 217 0030 0F23     		mov	r3, #15
 218 0032 FB18     		add	r3, r7, r3
 219 0034 1B78     		ldrb	r3, [r3]
 220 0036 181C     		mov	r0, r3
 221 0038 FFF7FEFF 		bl	CyExitCriticalSection
 451:.\Generated_Source\PSoC4/CyLib.c **** }
 222              		.loc 1 451 0
 223 003c BD46     		mov	sp, r7
 224 003e 05B0     		add	sp, sp, #20
 225              		@ sp needed
 226 0040 90BD     		pop	{r4, r7, pc}
 227              	.L9:
 228 0042 C046     		.align	2
 229              	.L8:
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 13


 230 0044 00010B40 		.word	1074462976
 231              		.cfi_endproc
 232              	.LFE4:
 233              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 234              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 235              		.align	2
 236              		.global	CySysClkGetSysclkSource
 237              		.code	16
 238              		.thumb_func
 239              		.type	CySysClkGetSysclkSource, %function
 240              	CySysClkGetSysclkSource:
 241              	.LFB5:
 452:.\Generated_Source\PSoC4/CyLib.c **** 
 453:.\Generated_Source\PSoC4/CyLib.c **** 
 454:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 456:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 457:.\Generated_Source\PSoC4/CyLib.c **** *
 458:.\Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 459:.\Generated_Source\PSoC4/CyLib.c **** *
 460:.\Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 461:.\Generated_Source\PSoC4/CyLib.c **** *
 462:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 463:.\Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 464:.\Generated_Source\PSoC4/CyLib.c **** {
 242              		.loc 1 464 0
 243              		.cfi_startproc
 244 0000 90B5     		push	{r4, r7, lr}
 245              		.cfi_def_cfa_offset 12
 246              		.cfi_offset 4, -12
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 83B0     		sub	sp, sp, #12
 250              		.cfi_def_cfa_offset 24
 251 0004 00AF     		add	r7, sp, #0
 252              		.cfi_def_cfa_register 7
 465:.\Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 466:.\Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 467:.\Generated_Source\PSoC4/CyLib.c **** 
 468:.\Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 253              		.loc 1 468 0
 254 0006 FC1D     		add	r4, r7, #7
 255 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 256 000c 031C     		mov	r3, r0
 257 000e 2370     		strb	r3, [r4]
 469:.\Generated_Source\PSoC4/CyLib.c **** 
 470:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 471:.\Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 472:.\Generated_Source\PSoC4/CyLib.c ****     {
 473:.\Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 474:.\Generated_Source\PSoC4/CyLib.c ****     }
 475:.\Generated_Source\PSoC4/CyLib.c ****     else
 476:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 477:.\Generated_Source\PSoC4/CyLib.c ****     {
 478:.\Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 258              		.loc 1 478 0
 259 0010 074B     		ldr	r3, .L12
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 14


 260 0012 1B68     		ldr	r3, [r3]
 261 0014 0722     		mov	r2, #7
 262 0016 1340     		and	r3, r2
 263 0018 3B60     		str	r3, [r7]
 479:.\Generated_Source\PSoC4/CyLib.c ****     }
 480:.\Generated_Source\PSoC4/CyLib.c **** 
 481:.\Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 264              		.loc 1 481 0
 265 001a FB1D     		add	r3, r7, #7
 266 001c 1B78     		ldrb	r3, [r3]
 267 001e 181C     		mov	r0, r3
 268 0020 FFF7FEFF 		bl	CyExitCriticalSection
 482:.\Generated_Source\PSoC4/CyLib.c **** 
 483:.\Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 269              		.loc 1 483 0
 270 0024 3B68     		ldr	r3, [r7]
 484:.\Generated_Source\PSoC4/CyLib.c **** }
 271              		.loc 1 484 0
 272 0026 181C     		mov	r0, r3
 273 0028 BD46     		mov	sp, r7
 274 002a 03B0     		add	sp, sp, #12
 275              		@ sp needed
 276 002c 90BD     		pop	{r4, r7, pc}
 277              	.L13:
 278 002e C046     		.align	2
 279              	.L12:
 280 0030 00010B40 		.word	1074462976
 281              		.cfi_endproc
 282              	.LFE5:
 283              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 284              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 285              		.align	2
 286              		.global	CySysClkWriteSysclkDiv
 287              		.code	16
 288              		.thumb_func
 289              		.type	CySysClkWriteSysclkDiv, %function
 290              	CySysClkWriteSysclkDiv:
 291              	.LFB6:
 485:.\Generated_Source\PSoC4/CyLib.c **** 
 486:.\Generated_Source\PSoC4/CyLib.c **** 
 487:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 488:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 489:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 490:.\Generated_Source\PSoC4/CyLib.c **** *
 491:.\Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 492:.\Generated_Source\PSoC4/CyLib.c **** *
 493:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 494:.\Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 495:.\Generated_Source\PSoC4/CyLib.c **** *
 496:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 497:.\Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 498:.\Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 499:.\Generated_Source\PSoC4/CyLib.c **** *
 500:.\Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 501:.\Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 502:.\Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 503:.\Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 15


 504:.\Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 505:.\Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 506:.\Generated_Source\PSoC4/CyLib.c **** *
 507:.\Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 508:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 509:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 510:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 511:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 512:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 513:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 514:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 515:.\Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 516:.\Generated_Source\PSoC4/CyLib.c **** *
 517:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 518:.\Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 519:.\Generated_Source\PSoC4/CyLib.c **** {
 292              		.loc 1 519 0
 293              		.cfi_startproc
 294 0000 90B5     		push	{r4, r7, lr}
 295              		.cfi_def_cfa_offset 12
 296              		.cfi_offset 4, -12
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 85B0     		sub	sp, sp, #20
 300              		.cfi_def_cfa_offset 32
 301 0004 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 303 0006 7860     		str	r0, [r7, #4]
 520:.\Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 521:.\Generated_Source\PSoC4/CyLib.c **** 
 522:.\Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 304              		.loc 1 522 0
 305 0008 0F23     		mov	r3, #15
 306 000a FC18     		add	r4, r7, r3
 307 000c FFF7FEFF 		bl	CyEnterCriticalSection
 308 0010 031C     		mov	r3, r0
 309 0012 2370     		strb	r3, [r4]
 523:.\Generated_Source\PSoC4/CyLib.c **** 
 524:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 310              		.loc 1 524 0
 311 0014 094B     		ldr	r3, .L15
 312 0016 7A68     		ldr	r2, [r7, #4]
 313 0018 0721     		mov	r1, #7
 314 001a 0A40     		and	r2, r1
 315 001c D104     		lsl	r1, r2, #19
 525:.\Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 526:.\Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 316              		.loc 1 526 0
 317 001e 074A     		ldr	r2, .L15
 318 0020 1268     		ldr	r2, [r2]
 319 0022 0748     		ldr	r0, .L15+4
 320 0024 0240     		and	r2, r0
 525:.\Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 321              		.loc 1 525 0
 322 0026 0A43     		orr	r2, r1
 524:.\Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 323              		.loc 1 524 0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 16


 324 0028 1A60     		str	r2, [r3]
 527:.\Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 528:.\Generated_Source\PSoC4/CyLib.c **** 
 529:.\Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 325              		.loc 1 529 0
 326 002a 0F23     		mov	r3, #15
 327 002c FB18     		add	r3, r7, r3
 328 002e 1B78     		ldrb	r3, [r3]
 329 0030 181C     		mov	r0, r3
 330 0032 FFF7FEFF 		bl	CyExitCriticalSection
 530:.\Generated_Source\PSoC4/CyLib.c **** }
 331              		.loc 1 530 0
 332 0036 BD46     		mov	sp, r7
 333 0038 05B0     		add	sp, sp, #20
 334              		@ sp needed
 335 003a 90BD     		pop	{r4, r7, pc}
 336              	.L16:
 337              		.align	2
 338              	.L15:
 339 003c 00010B40 		.word	1074462976
 340 0040 FFFFC7FF 		.word	-3670017
 341              		.cfi_endproc
 342              	.LFE6:
 343              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 344              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 345              		.align	2
 346              		.global	CySysClkWriteImoFreq
 347              		.code	16
 348              		.thumb_func
 349              		.type	CySysClkWriteImoFreq, %function
 350              	CySysClkWriteImoFreq:
 351              	.LFB7:
 531:.\Generated_Source\PSoC4/CyLib.c **** 
 532:.\Generated_Source\PSoC4/CyLib.c **** 
 533:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 534:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 535:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 536:.\Generated_Source\PSoC4/CyLib.c **** *
 537:.\Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 538:.\Generated_Source\PSoC4/CyLib.c **** *
 539:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 540:.\Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 541:.\Generated_Source\PSoC4/CyLib.c **** *
 542:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 543:.\Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 544:.\Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 545:.\Generated_Source\PSoC4/CyLib.c **** *
 546:.\Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 547:.\Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 548:.\Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 549:.\Generated_Source\PSoC4/CyLib.c **** *
 550:.\Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 551:.\Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 552:.\Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 553:.\Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 554:.\Generated_Source\PSoC4/CyLib.c **** *
 555:.\Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 17


 556:.\Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 557:.\Generated_Source\PSoC4/CyLib.c **** *
 558:.\Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 559:.\Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 560:.\Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 561:.\Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 562:.\Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 563:.\Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 564:.\Generated_Source\PSoC4/CyLib.c **** *
 565:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 566:.\Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 567:.\Generated_Source\PSoC4/CyLib.c **** * the System clock.
 568:.\Generated_Source\PSoC4/CyLib.c **** *
 569:.\Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 570:.\Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 571:.\Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC 4400: Valid range [24-48] with step size equals
 572:.\Generated_Source\PSoC4/CyLib.c **** * 4.
 573:.\Generated_Source\PSoC4/CyLib.c **** *
 574:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 575:.\Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 576:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 577:.\Generated_Source\PSoC4/CyLib.c ****     {
 352              		.loc 1 577 0
 353              		.cfi_startproc
 354 0000 90B5     		push	{r4, r7, lr}
 355              		.cfi_def_cfa_offset 12
 356              		.cfi_offset 4, -12
 357              		.cfi_offset 7, -8
 358              		.cfi_offset 14, -4
 359 0002 85B0     		sub	sp, sp, #20
 360              		.cfi_def_cfa_offset 32
 361 0004 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
 363 0006 7860     		str	r0, [r7, #4]
 578:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 579:.\Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 580:.\Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 581:.\Generated_Source\PSoC4/CyLib.c ****         #else
 582:.\Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 583:.\Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 584:.\Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 585:.\Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 586:.\Generated_Source\PSoC4/CyLib.c ****             uint8  imoTrim1Value;
 587:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 588:.\Generated_Source\PSoC4/CyLib.c **** 
 589:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 590:.\Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 591:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 592:.\Generated_Source\PSoC4/CyLib.c **** 
 593:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 594:.\Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 595:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 596:.\Generated_Source\PSoC4/CyLib.c **** 
 597:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 598:.\Generated_Source\PSoC4/CyLib.c **** 
 599:.\Generated_Source\PSoC4/CyLib.c **** 
 600:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 18


 364              		.loc 1 600 0
 365 0008 0C23     		mov	r3, #12
 366 000a FC18     		add	r4, r7, r3
 367 000c FFF7FEFF 		bl	CyEnterCriticalSection
 368 0010 031C     		mov	r3, r0
 369 0012 2370     		strb	r3, [r4]
 601:.\Generated_Source\PSoC4/CyLib.c **** 
 602:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 603:.\Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 604:.\Generated_Source\PSoC4/CyLib.c ****             {
 605:.\Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 606:.\Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 607:.\Generated_Source\PSoC4/CyLib.c ****             }
 608:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 609:.\Generated_Source\PSoC4/CyLib.c **** 
 610:.\Generated_Source\PSoC4/CyLib.c **** 
 611:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 612:.\Generated_Source\PSoC4/CyLib.c **** 
 613:.\Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 614:.\Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 615:.\Generated_Source\PSoC4/CyLib.c ****                 {
 616:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 617:.\Generated_Source\PSoC4/CyLib.c **** 
 618:.\Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 619:.\Generated_Source\PSoC4/CyLib.c ****                 {
 620:.\Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 621:.\Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
 622:.\Generated_Source\PSoC4/CyLib.c ****                 }
 623:.\Generated_Source\PSoC4/CyLib.c **** 
 624:.\Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 625:.\Generated_Source\PSoC4/CyLib.c ****                 }
 626:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 627:.\Generated_Source\PSoC4/CyLib.c **** 
 628:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 629:.\Generated_Source\PSoC4/CyLib.c **** 
 630:.\Generated_Source\PSoC4/CyLib.c **** 
 631:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 632:.\Generated_Source\PSoC4/CyLib.c **** 
 633:.\Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 634:.\Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 635:.\Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 636:.\Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 637:.\Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 638:.\Generated_Source\PSoC4/CyLib.c **** 
 639:.\Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 640:.\Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 641:.\Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 642:.\Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 643:.\Generated_Source\PSoC4/CyLib.c **** 
 644:.\Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 645:.\Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 646:.\Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 647:.\Generated_Source\PSoC4/CyLib.c **** 
 648:.\Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 649:.\Generated_Source\PSoC4/CyLib.c **** 
 650:.\Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 370              		.loc 1 650 0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 19


 371 0014 7B68     		ldr	r3, [r7, #4]
 372 0016 022B     		cmp	r3, #2
 373 0018 00D8     		bhi	.LCB233
 374 001a B4E0     		b	.L18	@long jump
 375              	.LCB233:
 376              		.loc 1 650 0 is_stmt 0 discriminator 1
 377 001c 7B68     		ldr	r3, [r7, #4]
 378 001e 302B     		cmp	r3, #48
 379 0020 00D9     		bls	.LCB236
 380 0022 B0E0     		b	.L18	@long jump
 381              	.LCB236:
 651:.\Generated_Source\PSoC4/CyLib.c ****         {
 652:.\Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 382              		.loc 1 652 0 is_stmt 1
 383 0024 5E4B     		ldr	r3, .L29
 384 0026 1B78     		ldrb	r3, [r3]
 385 0028 DBB2     		uxtb	r3, r3
 386 002a 1A1E     		sub	r2, r3, #0
 387 002c 7B68     		ldr	r3, [r7, #4]
 388 002e 9A42     		cmp	r2, r3
 389 0030 0AD3     		bcc	.L19
 653:.\Generated_Source\PSoC4/CyLib.c ****             {
 654:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 390              		.loc 1 654 0
 391 0032 5C4A     		ldr	r2, .L29+4
 392 0034 0F23     		mov	r3, #15
 393 0036 FB18     		add	r3, r7, r3
 394 0038 1278     		ldrb	r2, [r2]
 395 003a 1A70     		strb	r2, [r3]
 655:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 396              		.loc 1 655 0
 397 003c 5A4A     		ldr	r2, .L29+8
 398 003e 0E23     		mov	r3, #14
 399 0040 FB18     		add	r3, r7, r3
 400 0042 1278     		ldrb	r2, [r2]
 401 0044 1A70     		strb	r2, [r3]
 402 0046 3FE0     		b	.L20
 403              	.L19:
 656:.\Generated_Source\PSoC4/CyLib.c ****             }
 657:.\Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 404              		.loc 1 657 0
 405 0048 584B     		ldr	r3, .L29+12
 406 004a 1B78     		ldrb	r3, [r3]
 407 004c DBB2     		uxtb	r3, r3
 408 004e 1A1E     		sub	r2, r3, #0
 409 0050 7B68     		ldr	r3, [r7, #4]
 410 0052 9A42     		cmp	r2, r3
 411 0054 0AD3     		bcc	.L21
 658:.\Generated_Source\PSoC4/CyLib.c ****             {
 659:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 412              		.loc 1 659 0
 413 0056 564A     		ldr	r2, .L29+16
 414 0058 0F23     		mov	r3, #15
 415 005a FB18     		add	r3, r7, r3
 416 005c 1278     		ldrb	r2, [r2]
 417 005e 1A70     		strb	r2, [r3]
 660:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 20


 418              		.loc 1 660 0
 419 0060 544A     		ldr	r2, .L29+20
 420 0062 0E23     		mov	r3, #14
 421 0064 FB18     		add	r3, r7, r3
 422 0066 1278     		ldrb	r2, [r2]
 423 0068 1A70     		strb	r2, [r3]
 424 006a 2DE0     		b	.L20
 425              	.L21:
 661:.\Generated_Source\PSoC4/CyLib.c ****             }
 662:.\Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 426              		.loc 1 662 0
 427 006c 524B     		ldr	r3, .L29+24
 428 006e 1B78     		ldrb	r3, [r3]
 429 0070 DBB2     		uxtb	r3, r3
 430 0072 1A1E     		sub	r2, r3, #0
 431 0074 7B68     		ldr	r3, [r7, #4]
 432 0076 9A42     		cmp	r2, r3
 433 0078 0AD3     		bcc	.L22
 663:.\Generated_Source\PSoC4/CyLib.c ****             {
 664:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 434              		.loc 1 664 0
 435 007a 504A     		ldr	r2, .L29+28
 436 007c 0F23     		mov	r3, #15
 437 007e FB18     		add	r3, r7, r3
 438 0080 1278     		ldrb	r2, [r2]
 439 0082 1A70     		strb	r2, [r3]
 665:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 440              		.loc 1 665 0
 441 0084 4E4A     		ldr	r2, .L29+32
 442 0086 0E23     		mov	r3, #14
 443 0088 FB18     		add	r3, r7, r3
 444 008a 1278     		ldrb	r2, [r2]
 445 008c 1A70     		strb	r2, [r3]
 446 008e 1BE0     		b	.L20
 447              	.L22:
 666:.\Generated_Source\PSoC4/CyLib.c ****             }
 667:.\Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 448              		.loc 1 667 0
 449 0090 4C4B     		ldr	r3, .L29+36
 450 0092 1B78     		ldrb	r3, [r3]
 451 0094 DBB2     		uxtb	r3, r3
 452 0096 1A1E     		sub	r2, r3, #0
 453 0098 7B68     		ldr	r3, [r7, #4]
 454 009a 9A42     		cmp	r2, r3
 455 009c 0AD3     		bcc	.L23
 668:.\Generated_Source\PSoC4/CyLib.c ****             {
 669:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 456              		.loc 1 669 0
 457 009e 4A4A     		ldr	r2, .L29+40
 458 00a0 0F23     		mov	r3, #15
 459 00a2 FB18     		add	r3, r7, r3
 460 00a4 1278     		ldrb	r2, [r2]
 461 00a6 1A70     		strb	r2, [r3]
 670:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 462              		.loc 1 670 0
 463 00a8 484A     		ldr	r2, .L29+44
 464 00aa 0E23     		mov	r3, #14
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 21


 465 00ac FB18     		add	r3, r7, r3
 466 00ae 1278     		ldrb	r2, [r2]
 467 00b0 1A70     		strb	r2, [r3]
 468 00b2 09E0     		b	.L20
 469              	.L23:
 671:.\Generated_Source\PSoC4/CyLib.c ****             }
 672:.\Generated_Source\PSoC4/CyLib.c ****             else
 673:.\Generated_Source\PSoC4/CyLib.c ****             {
 674:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 470              		.loc 1 674 0
 471 00b4 464A     		ldr	r2, .L29+48
 472 00b6 0F23     		mov	r3, #15
 473 00b8 FB18     		add	r3, r7, r3
 474 00ba 1278     		ldrb	r2, [r2]
 475 00bc 1A70     		strb	r2, [r3]
 675:.\Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 476              		.loc 1 675 0
 477 00be 454A     		ldr	r2, .L29+52
 478 00c0 0E23     		mov	r3, #14
 479 00c2 FB18     		add	r3, r7, r3
 480 00c4 1278     		ldrb	r2, [r2]
 481 00c6 1A70     		strb	r2, [r3]
 482              	.L20:
 676:.\Generated_Source\PSoC4/CyLib.c ****             }
 677:.\Generated_Source\PSoC4/CyLib.c **** 
 678:.\Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 679:.\Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 483              		.loc 1 679 0
 484 00c8 7B68     		ldr	r3, [r7, #4]
 485 00ca DA1E     		sub	r2, r3, #3
 486 00cc 0B23     		mov	r3, #11
 487 00ce FB18     		add	r3, r7, r3
 488 00d0 4149     		ldr	r1, .L29+56
 489 00d2 8A5C     		ldrb	r2, [r1, r2]
 490 00d4 1A70     		strb	r2, [r3]
 680:.\Generated_Source\PSoC4/CyLib.c **** 
 681:.\Generated_Source\PSoC4/CyLib.c **** 
 682:.\Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 683:.\Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 684:.\Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 685:.\Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 686:.\Generated_Source\PSoC4/CyLib.c ****             *
 687:.\Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 688:.\Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 689:.\Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 690:.\Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 691:.\Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 491              		.loc 1 691 0
 492 00d6 0B23     		mov	r3, #11
 493 00d8 FB18     		add	r3, r7, r3
 494 00da 1B78     		ldrb	r3, [r3]
 495 00dc 2F2B     		cmp	r3, #47
 496 00de 0DD9     		bls	.L24
 497              		.loc 1 691 0 is_stmt 0 discriminator 1
 498 00e0 7B68     		ldr	r3, [r7, #4]
 499 00e2 2A2B     		cmp	r3, #42
 500 00e4 0AD9     		bls	.L24
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 22


 692:.\Generated_Source\PSoC4/CyLib.c ****             {
 693:.\Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 694:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 501              		.loc 1 694 0 is_stmt 1
 502 00e6 3D4B     		ldr	r3, .L29+60
 503 00e8 1922     		mov	r2, #25
 504 00ea 1A60     		str	r2, [r3]
 695:.\Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 696:.\Generated_Source\PSoC4/CyLib.c **** 
 697:.\Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 505              		.loc 1 697 0
 506 00ec 0520     		mov	r0, #5
 507 00ee FFF7FEFF 		bl	CyDelayCycles
 698:.\Generated_Source\PSoC4/CyLib.c **** 
 699:.\Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 508              		.loc 1 699 0
 509 00f2 0D23     		mov	r3, #13
 510 00f4 FB18     		add	r3, r7, r3
 511 00f6 1922     		mov	r2, #25
 512 00f8 1A70     		strb	r2, [r3]
 513 00fa 07E0     		b	.L25
 514              	.L24:
 700:.\Generated_Source\PSoC4/CyLib.c ****             }
 701:.\Generated_Source\PSoC4/CyLib.c ****             else
 702:.\Generated_Source\PSoC4/CyLib.c ****             {
 703:.\Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 515              		.loc 1 703 0
 516 00fc 374B     		ldr	r3, .L29+60
 517 00fe 1B68     		ldr	r3, [r3]
 518 0100 DAB2     		uxtb	r2, r3
 519 0102 0D23     		mov	r3, #13
 520 0104 FB18     		add	r3, r7, r3
 521 0106 3F21     		mov	r1, #63
 522 0108 0A40     		and	r2, r1
 523 010a 1A70     		strb	r2, [r3]
 524              	.L25:
 704:.\Generated_Source\PSoC4/CyLib.c ****             }
 705:.\Generated_Source\PSoC4/CyLib.c **** 
 706:.\Generated_Source\PSoC4/CyLib.c **** 
 707:.\Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 708:.\Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 709:.\Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 710:.\Generated_Source\PSoC4/CyLib.c ****             *
 711:.\Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 712:.\Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 713:.\Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 714:.\Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 715:.\Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 525              		.loc 1 715 0
 526 010c 0B23     		mov	r3, #11
 527 010e FA18     		add	r2, r7, r3
 528 0110 0D23     		mov	r3, #13
 529 0112 FB18     		add	r3, r7, r3
 530 0114 1278     		ldrb	r2, [r2]
 531 0116 1B78     		ldrb	r3, [r3]
 532 0118 9A42     		cmp	r2, r3
 533 011a 08D2     		bcs	.L26
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 23


 716:.\Generated_Source\PSoC4/CyLib.c ****             {
 717:.\Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 718:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 534              		.loc 1 718 0
 535 011c 2F4B     		ldr	r3, .L29+60
 536 011e 7A68     		ldr	r2, [r7, #4]
 537 0120 033A     		sub	r2, r2, #3
 538 0122 2D49     		ldr	r1, .L29+56
 539 0124 8A5C     		ldrb	r2, [r1, r2]
 540 0126 1A60     		str	r2, [r3]
 719:.\Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 541              		.loc 1 719 0
 542 0128 0520     		mov	r0, #5
 543 012a FFF7FEFF 		bl	CyDelayCycles
 544              	.L26:
 720:.\Generated_Source\PSoC4/CyLib.c ****             }
 721:.\Generated_Source\PSoC4/CyLib.c **** 
 722:.\Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 723:.\Generated_Source\PSoC4/CyLib.c **** 
 724:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 725:.\Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 726:.\Generated_Source\PSoC4/CyLib.c ****                 {
 727:.\Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 728:.\Generated_Source\PSoC4/CyLib.c ****                 }
 729:.\Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 730:.\Generated_Source\PSoC4/CyLib.c ****                 {
 731:.\Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 732:.\Generated_Source\PSoC4/CyLib.c ****                 }
 733:.\Generated_Source\PSoC4/CyLib.c ****                 else
 734:.\Generated_Source\PSoC4/CyLib.c ****                 {
 735:.\Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE
 736:.\Generated_Source\PSoC4/CyLib.c ****                 }
 737:.\Generated_Source\PSoC4/CyLib.c ****             #else
 738:.\Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFF
 545              		.loc 1 738 0
 546 012e 7B68     		ldr	r3, [r7, #4]
 547 0130 284A     		ldr	r2, .L29+52
 548 0132 9A18     		add	r2, r3, r2
 549 0134 0A23     		mov	r3, #10
 550 0136 FB18     		add	r3, r7, r3
 551 0138 1278     		ldrb	r2, [r2]
 552 013a 1A70     		strb	r2, [r3]
 739:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 740:.\Generated_Source\PSoC4/CyLib.c **** 
 741:.\Generated_Source\PSoC4/CyLib.c **** 
 742:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 553              		.loc 1 742 0
 554 013c 284B     		ldr	r3, .L29+64
 555 013e 0A22     		mov	r2, #10
 556 0140 BA18     		add	r2, r7, r2
 557 0142 1278     		ldrb	r2, [r2]
 558 0144 1A60     		str	r2, [r3]
 743:.\Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 559              		.loc 1 743 0
 560 0146 274B     		ldr	r3, .L29+68
 561 0148 0F22     		mov	r2, #15
 562 014a BA18     		add	r2, r7, r2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 24


 563 014c 1278     		ldrb	r2, [r2]
 564 014e 1A60     		str	r2, [r3]
 744:.\Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 565              		.loc 1 744 0
 566 0150 254B     		ldr	r3, .L29+72
 567 0152 0E22     		mov	r2, #14
 568 0154 BA18     		add	r2, r7, r2
 569 0156 1278     		ldrb	r2, [r2]
 570 0158 1A60     		str	r2, [r3]
 745:.\Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 571              		.loc 1 745 0
 572 015a 0520     		mov	r0, #5
 573 015c FFF7FEFF 		bl	CyDelayUs
 746:.\Generated_Source\PSoC4/CyLib.c **** 
 747:.\Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 574              		.loc 1 747 0
 575 0160 0B23     		mov	r3, #11
 576 0162 FA18     		add	r2, r7, r3
 577 0164 0D23     		mov	r3, #13
 578 0166 FB18     		add	r3, r7, r3
 579 0168 1278     		ldrb	r2, [r2]
 580 016a 1B78     		ldrb	r3, [r3]
 581 016c 9A42     		cmp	r2, r3
 582 016e 09D9     		bls	.L27
 748:.\Generated_Source\PSoC4/CyLib.c ****             {
 749:.\Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 750:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 583              		.loc 1 750 0
 584 0170 1A4B     		ldr	r3, .L29+60
 585 0172 7A68     		ldr	r2, [r7, #4]
 586 0174 033A     		sub	r2, r2, #3
 587 0176 1849     		ldr	r1, .L29+56
 588 0178 8A5C     		ldrb	r2, [r1, r2]
 589 017a 1A60     		str	r2, [r3]
 751:.\Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 590              		.loc 1 751 0
 591 017c 0520     		mov	r0, #5
 592 017e FFF7FEFF 		bl	CyDelayCycles
 747:.\Generated_Source\PSoC4/CyLib.c ****             {
 593              		.loc 1 747 0
 594 0182 03E0     		b	.L28
 595              	.L27:
 596 0184 02E0     		b	.L28
 597              	.L18:
 752:.\Generated_Source\PSoC4/CyLib.c ****             }
 753:.\Generated_Source\PSoC4/CyLib.c ****         }
 754:.\Generated_Source\PSoC4/CyLib.c ****         else
 755:.\Generated_Source\PSoC4/CyLib.c ****         {
 756:.\Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 757:.\Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 598              		.loc 1 757 0 discriminator 1
 599 0186 0020     		mov	r0, #0
 600 0188 FFF7FEFF 		bl	CyHalt
 601              	.L28:
 758:.\Generated_Source\PSoC4/CyLib.c ****         }
 759:.\Generated_Source\PSoC4/CyLib.c **** 
 760:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 25


 761:.\Generated_Source\PSoC4/CyLib.c **** 
 762:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 763:.\Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 764:.\Generated_Source\PSoC4/CyLib.c ****             {
 765:.\Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 766:.\Generated_Source\PSoC4/CyLib.c ****             }
 767:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 768:.\Generated_Source\PSoC4/CyLib.c **** 
 769:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 770:.\Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 771:.\Generated_Source\PSoC4/CyLib.c ****             {
 772:.\Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 773:.\Generated_Source\PSoC4/CyLib.c ****             }
 774:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 775:.\Generated_Source\PSoC4/CyLib.c **** 
 776:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 602              		.loc 1 776 0
 603 018c 0C23     		mov	r3, #12
 604 018e FB18     		add	r3, r7, r3
 605 0190 1B78     		ldrb	r3, [r3]
 606 0192 181C     		mov	r0, r3
 607 0194 FFF7FEFF 		bl	CyExitCriticalSection
 777:.\Generated_Source\PSoC4/CyLib.c ****     }
 608              		.loc 1 777 0
 609 0198 BD46     		mov	sp, r7
 610 019a 05B0     		add	sp, sp, #20
 611              		@ sp needed
 612 019c 90BD     		pop	{r4, r7, pc}
 613              	.L30:
 614 019e C046     		.align	2
 615              	.L29:
 616 01a0 40F3FF0F 		.word	268432192
 617 01a4 41F3FF0F 		.word	268432193
 618 01a8 42F3FF0F 		.word	268432194
 619 01ac 43F3FF0F 		.word	268432195
 620 01b0 44F3FF0F 		.word	268432196
 621 01b4 45F3FF0F 		.word	268432197
 622 01b8 46F3FF0F 		.word	268432198
 623 01bc 47F3FF0F 		.word	268432199
 624 01c0 48F3FF0F 		.word	268432200
 625 01c4 49F3FF0F 		.word	268432201
 626 01c8 4AF3FF0F 		.word	268432202
 627 01cc 4BF3FF0F 		.word	268432203
 628 01d0 4CF3FF0F 		.word	268432204
 629 01d4 4DF3FF0F 		.word	268432205
 630 01d8 00000000 		.word	cyImoFreqMhz2Reg
 631 01dc 2CFF0B40 		.word	1074528044
 632 01e0 28FF0B40 		.word	1074528040
 633 01e4 1CFF0B40 		.word	1074528028
 634 01e8 20FF0B40 		.word	1074528032
 635              		.cfi_endproc
 636              	.LFE7:
 637              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 638              		.section	.text.CySysClkEcoStart,"ax",%progbits
 639              		.align	2
 640              		.global	CySysClkEcoStart
 641              		.code	16
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 26


 642              		.thumb_func
 643              		.type	CySysClkEcoStart, %function
 644              	CySysClkEcoStart:
 645              	.LFB8:
 778:.\Generated_Source\PSoC4/CyLib.c **** 
 779:.\Generated_Source\PSoC4/CyLib.c **** #else
 780:.\Generated_Source\PSoC4/CyLib.c **** 
 781:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 782:.\Generated_Source\PSoC4/CyLib.c ****     {
 783:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 784:.\Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 785:.\Generated_Source\PSoC4/CyLib.c **** 
 786:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 787:.\Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 788:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 789:.\Generated_Source\PSoC4/CyLib.c ****         
 790:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 791:.\Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 792:.\Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 793:.\Generated_Source\PSoC4/CyLib.c **** 
 794:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 795:.\Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 796:.\Generated_Source\PSoC4/CyLib.c ****         #else
 797:.\Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 798:.\Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 799:.\Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 800:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 801:.\Generated_Source\PSoC4/CyLib.c ****         {
 802:.\Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 803:.\Generated_Source\PSoC4/CyLib.c **** 
 804:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 805:.\Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 806:.\Generated_Source\PSoC4/CyLib.c ****                 {
 807:.\Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 808:.\Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 809:.\Generated_Source\PSoC4/CyLib.c ****                 }
 810:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 811:.\Generated_Source\PSoC4/CyLib.c **** 
 812:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 813:.\Generated_Source\PSoC4/CyLib.c **** 
 814:.\Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 815:.\Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 816:.\Generated_Source\PSoC4/CyLib.c ****                     {
 817:.\Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 818:.\Generated_Source\PSoC4/CyLib.c **** 
 819:.\Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 820:.\Generated_Source\PSoC4/CyLib.c ****                     {
 821:.\Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 822:.\Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 823:.\Generated_Source\PSoC4/CyLib.c ****                     }
 824:.\Generated_Source\PSoC4/CyLib.c **** 
 825:.\Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 826:.\Generated_Source\PSoC4/CyLib.c ****                     }
 827:.\Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 828:.\Generated_Source\PSoC4/CyLib.c **** 
 829:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 830:.\Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 27


 831:.\Generated_Source\PSoC4/CyLib.c **** 
 832:.\Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 833:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 834:.\Generated_Source\PSoC4/CyLib.c **** 
 835:.\Generated_Source\PSoC4/CyLib.c **** 
 836:.\Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 837:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 838:.\Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 839:.\Generated_Source\PSoC4/CyLib.c ****                 {
 840:.\Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 841:.\Generated_Source\PSoC4/CyLib.c ****                 }
 842:.\Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 843:.\Generated_Source\PSoC4/CyLib.c ****                 {
 844:.\Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 845:.\Generated_Source\PSoC4/CyLib.c ****                 }
 846:.\Generated_Source\PSoC4/CyLib.c ****                 else
 847:.\Generated_Source\PSoC4/CyLib.c ****                 {
 848:.\Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 849:.\Generated_Source\PSoC4/CyLib.c ****                 }
 850:.\Generated_Source\PSoC4/CyLib.c ****             #else
 851:.\Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 852:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 853:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 854:.\Generated_Source\PSoC4/CyLib.c **** 
 855:.\Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
 856:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
 857:.\Generated_Source\PSoC4/CyLib.c **** 
 858:.\Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
 859:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
 860:.\Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 861:.\Generated_Source\PSoC4/CyLib.c **** 
 862:.\Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 863:.\Generated_Source\PSoC4/CyLib.c **** 
 864:.\Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 865:.\Generated_Source\PSoC4/CyLib.c ****             {
 866:.\Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 867:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 868:.\Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 869:.\Generated_Source\PSoC4/CyLib.c **** 
 870:.\Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 871:.\Generated_Source\PSoC4/CyLib.c **** 
 872:.\Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
 873:.\Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 874:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 875:.\Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 876:.\Generated_Source\PSoC4/CyLib.c ****             }
 877:.\Generated_Source\PSoC4/CyLib.c **** 
 878:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 879:.\Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
 880:.\Generated_Source\PSoC4/CyLib.c ****                 {
 881:.\Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
 882:.\Generated_Source\PSoC4/CyLib.c ****                 }
 883:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 884:.\Generated_Source\PSoC4/CyLib.c ****         
 885:.\Generated_Source\PSoC4/CyLib.c ****         
 886:.\Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 887:.\Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 28


 888:.\Generated_Source\PSoC4/CyLib.c ****                 {
 889:.\Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
 890:.\Generated_Source\PSoC4/CyLib.c ****                 }
 891:.\Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 892:.\Generated_Source\PSoC4/CyLib.c **** 
 893:.\Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 894:.\Generated_Source\PSoC4/CyLib.c ****         }
 895:.\Generated_Source\PSoC4/CyLib.c ****         else
 896:.\Generated_Source\PSoC4/CyLib.c ****         {
 897:.\Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 898:.\Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 899:.\Generated_Source\PSoC4/CyLib.c ****         }
 900:.\Generated_Source\PSoC4/CyLib.c ****     }
 901:.\Generated_Source\PSoC4/CyLib.c **** 
 902:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
 903:.\Generated_Source\PSoC4/CyLib.c **** 
 904:.\Generated_Source\PSoC4/CyLib.c **** 
 905:.\Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
 906:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 907:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
 908:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 909:.\Generated_Source\PSoC4/CyLib.c ****     *
 910:.\Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
 911:.\Generated_Source\PSoC4/CyLib.c ****     *
 912:.\Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
 913:.\Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
 914:.\Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
 915:.\Generated_Source\PSoC4/CyLib.c ****     *
 916:.\Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 917:.\Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 918:.\Generated_Source\PSoC4/CyLib.c ****     *
 919:.\Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
 920:.\Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 921:.\Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
 922:.\Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
 923:.\Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 924:.\Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
 925:.\Generated_Source\PSoC4/CyLib.c ****     *
 926:.\Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
 927:.\Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
 928:.\Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
 929:.\Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
 930:.\Generated_Source\PSoC4/CyLib.c ****     *
 931:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 932:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
 933:.\Generated_Source\PSoC4/CyLib.c ****     {
 934:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 935:.\Generated_Source\PSoC4/CyLib.c **** 
 936:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 937:.\Generated_Source\PSoC4/CyLib.c **** 
 938:.\Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 939:.\Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 940:.\Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 941:.\Generated_Source\PSoC4/CyLib.c **** 
 942:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 943:.\Generated_Source\PSoC4/CyLib.c ****     }
 944:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 29


 945:.\Generated_Source\PSoC4/CyLib.c **** 
 946:.\Generated_Source\PSoC4/CyLib.c **** 
 947:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
 948:.\Generated_Source\PSoC4/CyLib.c **** 
 949:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 950:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
 951:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 952:.\Generated_Source\PSoC4/CyLib.c ****     *
 953:.\Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
 954:.\Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
 955:.\Generated_Source\PSoC4/CyLib.c ****     *
 956:.\Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
 957:.\Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
 958:.\Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
 959:.\Generated_Source\PSoC4/CyLib.c ****     * called.
 960:.\Generated_Source\PSoC4/CyLib.c ****     *
 961:.\Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
 962:.\Generated_Source\PSoC4/CyLib.c ****     *
 963:.\Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
 964:.\Generated_Source\PSoC4/CyLib.c ****     *
 965:.\Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
 966:.\Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
 967:.\Generated_Source\PSoC4/CyLib.c ****     *
 968:.\Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
 969:.\Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
 970:.\Generated_Source\PSoC4/CyLib.c ****     *
 971:.\Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
 972:.\Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
 973:.\Generated_Source\PSoC4/CyLib.c ****     * is returned.
 974:.\Generated_Source\PSoC4/CyLib.c ****     *
 975:.\Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
 976:.\Generated_Source\PSoC4/CyLib.c ****     *
 977:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 978:.\Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
 979:.\Generated_Source\PSoC4/CyLib.c ****     {
 646              		.loc 1 979 0
 647              		.cfi_startproc
 648 0000 80B5     		push	{r7, lr}
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 7, -8
 651              		.cfi_offset 14, -4
 652 0002 84B0     		sub	sp, sp, #16
 653              		.cfi_def_cfa_offset 24
 654 0004 00AF     		add	r7, sp, #0
 655              		.cfi_def_cfa_register 7
 656 0006 7860     		str	r0, [r7, #4]
 980:.\Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
 657              		.loc 1 980 0
 658 0008 0023     		mov	r3, #0
 659 000a FB60     		str	r3, [r7, #12]
 981:.\Generated_Source\PSoC4/CyLib.c **** 
 982:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
 983:.\Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
 984:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 660              		.loc 1 984 0
 661 000c 154B     		ldr	r3, .L37
 662 000e 154A     		ldr	r2, .L37
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 30


 663 0010 1268     		ldr	r2, [r2]
 664 0012 0121     		mov	r1, #1
 665 0014 0A43     		orr	r2, r1
 666 0016 1A60     		str	r2, [r3]
 985:.\Generated_Source\PSoC4/CyLib.c **** 
 986:.\Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
 987:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
 667              		.loc 1 987 0
 668 0018 134B     		ldr	r3, .L37+4
 669 001a 144A     		ldr	r2, .L37+8
 670 001c 1A60     		str	r2, [r3]
 988:.\Generated_Source\PSoC4/CyLib.c **** 
 989:.\Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
 990:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 671              		.loc 1 990 0
 672 001e 144B     		ldr	r3, .L37+12
 673 0020 134A     		ldr	r2, .L37+12
 674 0022 1268     		ldr	r2, [r2]
 675 0024 8021     		mov	r1, #128
 676 0026 0902     		lsl	r1, r1, #8
 677 0028 0A43     		orr	r2, r1
 678 002a 1A60     		str	r2, [r3]
 991:.\Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_WCO_SRSSV2 */
 992:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
 993:.\Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
 994:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
 995:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
 996:.\Generated_Source\PSoC4/CyLib.c **** 
 997:.\Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
 679              		.loc 1 997 0
 680 002c 7B68     		ldr	r3, [r7, #4]
 681 002e 002B     		cmp	r3, #0
 682 0030 12D0     		beq	.L32
 998:.\Generated_Source\PSoC4/CyLib.c ****         {
 999:.\Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
 683              		.loc 1 999 0
 684 0032 1023     		mov	r3, #16
 685 0034 FB60     		str	r3, [r7, #12]
1000:.\Generated_Source\PSoC4/CyLib.c **** 
1001:.\Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
 686              		.loc 1 1001 0
 687 0036 0CE0     		b	.L33
 688              	.L35:
1002:.\Generated_Source\PSoC4/CyLib.c ****             {
1003:.\Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
 689              		.loc 1 1003 0
 690 0038 0120     		mov	r0, #1
 691 003a FFF7FEFF 		bl	CyDelayUs
1004:.\Generated_Source\PSoC4/CyLib.c **** 
1005:.\Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
 692              		.loc 1 1005 0
 693 003e FFF7FEFF 		bl	CySysClkEcoReadStatus
 694 0042 031E     		sub	r3, r0, #0
 695 0044 02D0     		beq	.L34
1006:.\Generated_Source\PSoC4/CyLib.c ****                 {
1007:.\Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
 696              		.loc 1 1007 0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 31


 697 0046 0023     		mov	r3, #0
 698 0048 FB60     		str	r3, [r7, #12]
1008:.\Generated_Source\PSoC4/CyLib.c ****                     break;
 699              		.loc 1 1008 0
 700 004a 05E0     		b	.L32
 701              	.L34:
1001:.\Generated_Source\PSoC4/CyLib.c ****             {
 702              		.loc 1 1001 0
 703 004c 7B68     		ldr	r3, [r7, #4]
 704 004e 013B     		sub	r3, r3, #1
 705 0050 7B60     		str	r3, [r7, #4]
 706              	.L33:
1001:.\Generated_Source\PSoC4/CyLib.c ****             {
 707              		.loc 1 1001 0 is_stmt 0 discriminator 1
 708 0052 7B68     		ldr	r3, [r7, #4]
 709 0054 002B     		cmp	r3, #0
 710 0056 EFD1     		bne	.L35
 711              	.L32:
1009:.\Generated_Source\PSoC4/CyLib.c ****                 }
1010:.\Generated_Source\PSoC4/CyLib.c ****             }
1011:.\Generated_Source\PSoC4/CyLib.c **** 
1012:.\Generated_Source\PSoC4/CyLib.c ****         }
1013:.\Generated_Source\PSoC4/CyLib.c **** 
1014:.\Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
 712              		.loc 1 1014 0 is_stmt 1
 713 0058 FB68     		ldr	r3, [r7, #12]
1015:.\Generated_Source\PSoC4/CyLib.c ****     }
 714              		.loc 1 1015 0
 715 005a 181C     		mov	r0, r3
 716 005c BD46     		mov	sp, r7
 717 005e 04B0     		add	sp, sp, #16
 718              		@ sp needed
 719 0060 80BD     		pop	{r7, pc}
 720              	.L38:
 721 0062 C046     		.align	2
 722              	.L37:
 723 0064 60F02E40 		.word	1076818016
 724 0068 78002E40 		.word	1076756600
 725 006c 02200000 		.word	8194
 726 0070 10002E40 		.word	1076756496
 727              		.cfi_endproc
 728              	.LFE8:
 729              		.size	CySysClkEcoStart, .-CySysClkEcoStart
 730              		.section	.text.CySysClkEcoStop,"ax",%progbits
 731              		.align	2
 732              		.global	CySysClkEcoStop
 733              		.code	16
 734              		.thumb_func
 735              		.type	CySysClkEcoStop, %function
 736              	CySysClkEcoStop:
 737              	.LFB9:
1016:.\Generated_Source\PSoC4/CyLib.c **** 
1017:.\Generated_Source\PSoC4/CyLib.c **** 
1018:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1019:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1020:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1021:.\Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 32


1022:.\Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1023:.\Generated_Source\PSoC4/CyLib.c ****     *
1024:.\Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1025:.\Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1026:.\Generated_Source\PSoC4/CyLib.c ****     * functioning.
1027:.\Generated_Source\PSoC4/CyLib.c ****     *
1028:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1029:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1030:.\Generated_Source\PSoC4/CyLib.c ****     {
 738              		.loc 1 1030 0
 739              		.cfi_startproc
 740 0000 80B5     		push	{r7, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
1031:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1032:.\Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1033:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 746              		.loc 1 1033 0
 747 0004 064B     		ldr	r3, .L40
 748 0006 064A     		ldr	r2, .L40
 749 0008 1268     		ldr	r2, [r2]
 750 000a 0121     		mov	r1, #1
 751 000c 8A43     		bic	r2, r1
 752 000e 1A60     		str	r2, [r3]
1034:.\Generated_Source\PSoC4/CyLib.c **** 
1035:.\Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1036:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 753              		.loc 1 1036 0
 754 0010 044B     		ldr	r3, .L40+4
 755 0012 044A     		ldr	r2, .L40+4
 756 0014 1268     		ldr	r2, [r2]
 757 0016 0449     		ldr	r1, .L40+8
 758 0018 0A40     		and	r2, r1
 759 001a 1A60     		str	r2, [r3]
1037:.\Generated_Source\PSoC4/CyLib.c ****         #else
1038:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1039:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1040:.\Generated_Source\PSoC4/CyLib.c ****     }
 760              		.loc 1 1040 0
 761 001c BD46     		mov	sp, r7
 762              		@ sp needed
 763 001e 80BD     		pop	{r7, pc}
 764              	.L41:
 765              		.align	2
 766              	.L40:
 767 0020 60F02E40 		.word	1076818016
 768 0024 10002E40 		.word	1076756496
 769 0028 FF7FFFFF 		.word	-32769
 770              		.cfi_endproc
 771              	.LFE9:
 772              		.size	CySysClkEcoStop, .-CySysClkEcoStop
 773              		.section	.text.CySysClkEcoReadStatus,"ax",%progbits
 774              		.align	2
 775              		.global	CySysClkEcoReadStatus
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 33


 776              		.code	16
 777              		.thumb_func
 778              		.type	CySysClkEcoReadStatus, %function
 779              	CySysClkEcoReadStatus:
 780              	.LFB10:
1041:.\Generated_Source\PSoC4/CyLib.c **** 
1042:.\Generated_Source\PSoC4/CyLib.c **** 
1043:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1044:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1045:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1046:.\Generated_Source\PSoC4/CyLib.c ****     *
1047:.\Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1048:.\Generated_Source\PSoC4/CyLib.c ****     *
1049:.\Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1050:.\Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1051:.\Generated_Source\PSoC4/CyLib.c ****     *
1052:.\Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, the error status bit is the WATCHDOG_ERROR bit in
1053:.\Generated_Source\PSoC4/CyLib.c ****     * ECO_STATUS register.
1054:.\Generated_Source\PSoC4/CyLib.c ****     *
1055:.\Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1056:.\Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1057:.\Generated_Source\PSoC4/CyLib.c ****     *
1058:.\Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L: Non-zero indicates that ECO is running.
1059:.\Generated_Source\PSoC4/CyLib.c ****     *
1060:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1061:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1062:.\Generated_Source\PSoC4/CyLib.c ****     {
 781              		.loc 1 1062 0
 782              		.cfi_startproc
 783 0000 80B5     		push	{r7, lr}
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 82B0     		sub	sp, sp, #8
 788              		.cfi_def_cfa_offset 16
 789 0004 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
1063:.\Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1064:.\Generated_Source\PSoC4/CyLib.c **** 
1065:.\Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1066:.\Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
 791              		.loc 1 1066 0
 792 0006 054B     		ldr	r3, .L44
 793 0008 1B68     		ldr	r3, [r3]
 794 000a 0122     		mov	r2, #1
 795 000c 1340     		and	r3, r2
 796 000e 7B60     		str	r3, [r7, #4]
1067:.\Generated_Source\PSoC4/CyLib.c ****         #else
1068:.\Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1069:.\Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1070:.\Generated_Source\PSoC4/CyLib.c **** 
1071:.\Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
 797              		.loc 1 1071 0
 798 0010 7B68     		ldr	r3, [r7, #4]
1072:.\Generated_Source\PSoC4/CyLib.c ****     }
 799              		.loc 1 1072 0
 800 0012 181C     		mov	r0, r3
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 34


 801 0014 BD46     		mov	sp, r7
 802 0016 02B0     		add	sp, sp, #8
 803              		@ sp needed
 804 0018 80BD     		pop	{r7, pc}
 805              	.L45:
 806 001a C046     		.align	2
 807              	.L44:
 808 001c 0C002E40 		.word	1076756492
 809              		.cfi_endproc
 810              	.LFE10:
 811              		.size	CySysClkEcoReadStatus, .-CySysClkEcoReadStatus
 812              		.section	.text.CySysClkWriteEcoDiv,"ax",%progbits
 813              		.align	2
 814              		.global	CySysClkWriteEcoDiv
 815              		.code	16
 816              		.thumb_func
 817              		.type	CySysClkWriteEcoDiv, %function
 818              	CySysClkWriteEcoDiv:
 819              	.LFB11:
1073:.\Generated_Source\PSoC4/CyLib.c **** 
1074:.\Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS)
1075:.\Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1076:.\Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1077:.\Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1078:.\Generated_Source\PSoC4/CyLib.c ****         *
1079:.\Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1080:.\Generated_Source\PSoC4/CyLib.c ****         *
1081:.\Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1082:.\Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1083:.\Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1084:.\Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1085:.\Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1086:.\Generated_Source\PSoC4/CyLib.c ****         *
1087:.\Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1088:.\Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1089:.\Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1090:.\Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1091:.\Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1092:.\Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1093:.\Generated_Source\PSoC4/CyLib.c ****         *
1094:.\Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1095:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1096:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1097:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1098:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1099:.\Generated_Source\PSoC4/CyLib.c ****         *
1100:.\Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1101:.\Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1102:.\Generated_Source\PSoC4/CyLib.c ****         {
 820              		.loc 1 1102 0
 821              		.cfi_startproc
 822 0000 90B5     		push	{r4, r7, lr}
 823              		.cfi_def_cfa_offset 12
 824              		.cfi_offset 4, -12
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 35


 828              		.cfi_def_cfa_offset 32
 829 0004 00AF     		add	r7, sp, #0
 830              		.cfi_def_cfa_register 7
 831 0006 7860     		str	r0, [r7, #4]
1103:.\Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1104:.\Generated_Source\PSoC4/CyLib.c **** 
1105:.\Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
 832              		.loc 1 1105 0
 833 0008 114B     		ldr	r3, .L49
 834 000a 1B68     		ldr	r3, [r3]
 835 000c 0722     		mov	r2, #7
 836 000e 1340     		and	r3, r2
 837 0010 022B     		cmp	r3, #2
 838 0012 16D0     		beq	.L47
1106:.\Generated_Source\PSoC4/CyLib.c ****             {
1107:.\Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
 839              		.loc 1 1107 0
 840 0014 0F23     		mov	r3, #15
 841 0016 FC18     		add	r4, r7, r3
 842 0018 FFF7FEFF 		bl	CyEnterCriticalSection
 843 001c 031C     		mov	r3, r0
 844 001e 2370     		strb	r3, [r4]
1108:.\Generated_Source\PSoC4/CyLib.c **** 
1109:.\Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
 845              		.loc 1 1109 0
 846 0020 0C4B     		ldr	r3, .L49+4
 847 0022 7A68     		ldr	r2, [r7, #4]
 848 0024 0321     		mov	r1, #3
 849 0026 1140     		and	r1, r2
1110:.\Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 850              		.loc 1 1110 0
 851 0028 0A4A     		ldr	r2, .L49+4
 852 002a 1268     		ldr	r2, [r2]
 853 002c 0320     		mov	r0, #3
 854 002e 8243     		bic	r2, r0
1109:.\Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
 855              		.loc 1 1109 0
 856 0030 0A43     		orr	r2, r1
 857 0032 1A60     		str	r2, [r3]
1111:.\Generated_Source\PSoC4/CyLib.c **** 
1112:.\Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
 858              		.loc 1 1112 0
 859 0034 0F23     		mov	r3, #15
 860 0036 FB18     		add	r3, r7, r3
 861 0038 1B78     		ldrb	r3, [r3]
 862 003a 181C     		mov	r0, r3
 863 003c FFF7FEFF 		bl	CyExitCriticalSection
 864 0040 02E0     		b	.L46
 865              	.L47:
1113:.\Generated_Source\PSoC4/CyLib.c ****             }
1114:.\Generated_Source\PSoC4/CyLib.c ****             else
1115:.\Generated_Source\PSoC4/CyLib.c ****             {
1116:.\Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1117:.\Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
 866              		.loc 1 1117 0 discriminator 1
 867 0042 0020     		mov	r0, #0
 868 0044 FFF7FEFF 		bl	CyHalt
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 36


 869              	.L46:
1118:.\Generated_Source\PSoC4/CyLib.c ****             }
1119:.\Generated_Source\PSoC4/CyLib.c ****         }
 870              		.loc 1 1119 0
 871 0048 BD46     		mov	sp, r7
 872 004a 05B0     		add	sp, sp, #20
 873              		@ sp needed
 874 004c 90BD     		pop	{r4, r7, pc}
 875              	.L50:
 876 004e C046     		.align	2
 877              	.L49:
 878 0050 00010B40 		.word	1074462976
 879 0054 64F02E40 		.word	1076818020
 880              		.cfi_endproc
 881              	.LFE11:
 882              		.size	CySysClkWriteEcoDiv, .-CySysClkWriteEcoDiv
 883              		.section	.text.CySysLvdEnable,"ax",%progbits
 884              		.align	2
 885              		.global	CySysLvdEnable
 886              		.code	16
 887              		.thumb_func
 888              		.type	CySysLvdEnable, %function
 889              	CySysLvdEnable:
 890              	.LFB12:
1120:.\Generated_Source\PSoC4/CyLib.c **** 
1121:.\Generated_Source\PSoC4/CyLib.c ****     #else
1122:.\Generated_Source\PSoC4/CyLib.c **** 
1123:.\Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1124:.\Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1125:.\Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1126:.\Generated_Source\PSoC4/CyLib.c ****         *
1127:.\Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1128:.\Generated_Source\PSoC4/CyLib.c ****         * 4200L devices only.
1129:.\Generated_Source\PSoC4/CyLib.c ****         *
1130:.\Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1131:.\Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1132:.\Generated_Source\PSoC4/CyLib.c ****         *
1133:.\Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1134:.\Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1135:.\Generated_Source\PSoC4/CyLib.c ****         *
1136:.\Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1137:.\Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1138:.\Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1139:.\Generated_Source\PSoC4/CyLib.c ****         *
1140:.\Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1141:.\Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1142:.\Generated_Source\PSoC4/CyLib.c ****         *
1143:.\Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1144:.\Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1145:.\Generated_Source\PSoC4/CyLib.c ****         *
1146:.\Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1147:.\Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1148:.\Generated_Source\PSoC4/CyLib.c ****         *
1149:.\Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1150:.\Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1151:.\Generated_Source\PSoC4/CyLib.c ****         *
1152:.\Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 37


1153:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1154:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1155:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1156:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1157:.\Generated_Source\PSoC4/CyLib.c ****         *
1158:.\Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1159:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1160:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1161:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1162:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1163:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1164:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1165:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1166:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1167:.\Generated_Source\PSoC4/CyLib.c ****         *
1168:.\Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1169:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1170:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1171:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1172:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1173:.\Generated_Source\PSoC4/CyLib.c ****         *
1174:.\Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1175:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1176:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1177:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1178:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1179:.\Generated_Source\PSoC4/CyLib.c ****         *
1180:.\Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1181:.\Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1182:.\Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1183:.\Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1184:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1185:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1186:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1187:.\Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1188:.\Generated_Source\PSoC4/CyLib.c ****         *
1189:.\Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1190:.\Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1191:.\Generated_Source\PSoC4/CyLib.c ****         {
1192:.\Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1193:.\Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1194:.\Generated_Source\PSoC4/CyLib.c **** 
1195:.\Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1196:.\Generated_Source\PSoC4/CyLib.c **** 
1197:.\Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1198:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1199:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1200:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1201:.\Generated_Source\PSoC4/CyLib.c **** 
1202:.\Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1203:.\Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1204:.\Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1205:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1206:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1207:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1208:.\Generated_Source\PSoC4/CyLib.c **** 
1209:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 38


1210:.\Generated_Source\PSoC4/CyLib.c **** 
1211:.\Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1212:.\Generated_Source\PSoC4/CyLib.c ****         }
1213:.\Generated_Source\PSoC4/CyLib.c **** 
1214:.\Generated_Source\PSoC4/CyLib.c **** 
1215:.\Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1216:.\Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1217:.\Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1218:.\Generated_Source\PSoC4/CyLib.c ****         *
1219:.\Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1220:.\Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1221:.\Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1222:.\Generated_Source\PSoC4/CyLib.c ****         *
1223:.\Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L devices only.
1224:.\Generated_Source\PSoC4/CyLib.c ****         *
1225:.\Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1226:.\Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1227:.\Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1228:.\Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1229:.\Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1230:.\Generated_Source\PSoC4/CyLib.c ****         *
1231:.\Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1232:.\Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1233:.\Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1234:.\Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1235:.\Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1236:.\Generated_Source\PSoC4/CyLib.c ****         *
1237:.\Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1238:.\Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1239:.\Generated_Source\PSoC4/CyLib.c ****         *
1240:.\Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1241:.\Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1242:.\Generated_Source\PSoC4/CyLib.c ****         {
1243:.\Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1244:.\Generated_Source\PSoC4/CyLib.c **** 
1245:.\Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1246:.\Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1247:.\Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1248:.\Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1249:.\Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1250:.\Generated_Source\PSoC4/CyLib.c **** 
1251:.\Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1252:.\Generated_Source\PSoC4/CyLib.c **** 
1253:.\Generated_Source\PSoC4/CyLib.c **** 
1254:.\Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1255:.\Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1256:.\Generated_Source\PSoC4/CyLib.c ****             {
1257:.\Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1258:.\Generated_Source\PSoC4/CyLib.c ****             }
1259:.\Generated_Source\PSoC4/CyLib.c ****             else
1260:.\Generated_Source\PSoC4/CyLib.c ****             {
1261:.\Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1262:.\Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1263:.\Generated_Source\PSoC4/CyLib.c **** 
1264:.\Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1265:.\Generated_Source\PSoC4/CyLib.c ****                 {
1266:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 39


1267:.\Generated_Source\PSoC4/CyLib.c ****                 }
1268:.\Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1269:.\Generated_Source\PSoC4/CyLib.c ****                 {
1270:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1271:.\Generated_Source\PSoC4/CyLib.c ****                 }
1272:.\Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1273:.\Generated_Source\PSoC4/CyLib.c ****                 {
1274:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1275:.\Generated_Source\PSoC4/CyLib.c ****                 }
1276:.\Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1277:.\Generated_Source\PSoC4/CyLib.c ****                 {
1278:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1279:.\Generated_Source\PSoC4/CyLib.c ****                 }
1280:.\Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1281:.\Generated_Source\PSoC4/CyLib.c ****                 {
1282:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1283:.\Generated_Source\PSoC4/CyLib.c ****                 }
1284:.\Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1285:.\Generated_Source\PSoC4/CyLib.c ****                 {
1286:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1287:.\Generated_Source\PSoC4/CyLib.c ****                 }
1288:.\Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1289:.\Generated_Source\PSoC4/CyLib.c ****                 {
1290:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1291:.\Generated_Source\PSoC4/CyLib.c ****                 }
1292:.\Generated_Source\PSoC4/CyLib.c ****                 else
1293:.\Generated_Source\PSoC4/CyLib.c ****                 {
1294:.\Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1295:.\Generated_Source\PSoC4/CyLib.c ****                 }
1296:.\Generated_Source\PSoC4/CyLib.c **** 
1297:.\Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1298:.\Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1299:.\Generated_Source\PSoC4/CyLib.c **** 
1300:.\Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1301:.\Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1302:.\Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1303:.\Generated_Source\PSoC4/CyLib.c ****                 {
1304:.\Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1305:.\Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1306:.\Generated_Source\PSoC4/CyLib.c ****                 }
1307:.\Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1308:.\Generated_Source\PSoC4/CyLib.c ****                 {
1309:.\Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1310:.\Generated_Source\PSoC4/CyLib.c ****                 }
1311:.\Generated_Source\PSoC4/CyLib.c ****                 else
1312:.\Generated_Source\PSoC4/CyLib.c ****                 {
1313:.\Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1314:.\Generated_Source\PSoC4/CyLib.c ****                 }
1315:.\Generated_Source\PSoC4/CyLib.c **** 
1316:.\Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1317:.\Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1318:.\Generated_Source\PSoC4/CyLib.c ****                 {
1319:.\Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1320:.\Generated_Source\PSoC4/CyLib.c ****                 }
1321:.\Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1322:.\Generated_Source\PSoC4/CyLib.c ****                 {
1323:.\Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 40


1324:.\Generated_Source\PSoC4/CyLib.c ****                 }
1325:.\Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1326:.\Generated_Source\PSoC4/CyLib.c ****                 {
1327:.\Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1328:.\Generated_Source\PSoC4/CyLib.c ****                 }
1329:.\Generated_Source\PSoC4/CyLib.c ****                 else
1330:.\Generated_Source\PSoC4/CyLib.c ****                 {
1331:.\Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1332:.\Generated_Source\PSoC4/CyLib.c ****                 }
1333:.\Generated_Source\PSoC4/CyLib.c **** 
1334:.\Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1335:.\Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1336:.\Generated_Source\PSoC4/CyLib.c **** 
1337:.\Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1338:.\Generated_Source\PSoC4/CyLib.c **** 
1339:.\Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1340:.\Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1341:.\Generated_Source\PSoC4/CyLib.c ****                 {
1342:.\Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1343:.\Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1344:.\Generated_Source\PSoC4/CyLib.c ****                 }
1345:.\Generated_Source\PSoC4/CyLib.c ****                 else
1346:.\Generated_Source\PSoC4/CyLib.c ****                 {
1347:.\Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1348:.\Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1349:.\Generated_Source\PSoC4/CyLib.c ****                     */
1350:.\Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1351:.\Generated_Source\PSoC4/CyLib.c ****                 }
1352:.\Generated_Source\PSoC4/CyLib.c ****             }
1353:.\Generated_Source\PSoC4/CyLib.c **** 
1354:.\Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1355:.\Generated_Source\PSoC4/CyLib.c ****         }
1356:.\Generated_Source\PSoC4/CyLib.c **** 
1357:.\Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1358:.\Generated_Source\PSoC4/CyLib.c **** 
1359:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1360:.\Generated_Source\PSoC4/CyLib.c **** 
1361:.\Generated_Source\PSoC4/CyLib.c **** 
1362:.\Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
1363:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1364:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1365:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1366:.\Generated_Source\PSoC4/CyLib.c ****     *
1367:.\Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1368:.\Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1369:.\Generated_Source\PSoC4/CyLib.c ****     *
1370:.\Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1371:.\Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1372:.\Generated_Source\PSoC4/CyLib.c ****     *
1373:.\Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1374:.\Generated_Source\PSoC4/CyLib.c ****     *
1375:.\Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1376:.\Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1377:.\Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1
1378:.\Generated_Source\PSoC4/CyLib.c ****     *
1379:.\Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1380:.\Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 41


1381:.\Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1382:.\Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1383:.\Generated_Source\PSoC4/CyLib.c ****     *
1384:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1385:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1386:.\Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1387:.\Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1388:.\Generated_Source\PSoC4/CyLib.c ****     * still be used.
1389:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1390:.\Generated_Source\PSoC4/CyLib.c ****     *
1391:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1392:.\Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1393:.\Generated_Source\PSoC4/CyLib.c ****     {
1394:.\Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1395:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1396:.\Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1397:.\Generated_Source\PSoC4/CyLib.c **** 
1398:.\Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1399:.\Generated_Source\PSoC4/CyLib.c ****         {
1400:.\Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1401:.\Generated_Source\PSoC4/CyLib.c **** 
1402:.\Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1403:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1404:.\Generated_Source\PSoC4/CyLib.c **** 
1405:.\Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1406:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1407:.\Generated_Source\PSoC4/CyLib.c **** 
1408:.\Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1409:.\Generated_Source\PSoC4/CyLib.c **** 
1410:.\Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1411:.\Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1412:.\Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1413:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1414:.\Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1415:.\Generated_Source\PSoC4/CyLib.c **** 
1416:.\Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1417:.\Generated_Source\PSoC4/CyLib.c ****             {
1418:.\Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1419:.\Generated_Source\PSoC4/CyLib.c **** 
1420:.\Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1421:.\Generated_Source\PSoC4/CyLib.c ****                 {
1422:.\Generated_Source\PSoC4/CyLib.c **** 
1423:.\Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1424:.\Generated_Source\PSoC4/CyLib.c ****                     {
1425:.\Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1426:.\Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1427:.\Generated_Source\PSoC4/CyLib.c ****                         break;
1428:.\Generated_Source\PSoC4/CyLib.c ****                     }
1429:.\Generated_Source\PSoC4/CyLib.c **** 
1430:.\Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1431:.\Generated_Source\PSoC4/CyLib.c ****                     counts--;
1432:.\Generated_Source\PSoC4/CyLib.c ****                 }
1433:.\Generated_Source\PSoC4/CyLib.c ****             }
1434:.\Generated_Source\PSoC4/CyLib.c ****         }
1435:.\Generated_Source\PSoC4/CyLib.c ****         else
1436:.\Generated_Source\PSoC4/CyLib.c ****         {
1437:.\Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 42


1438:.\Generated_Source\PSoC4/CyLib.c ****         }
1439:.\Generated_Source\PSoC4/CyLib.c **** 
1440:.\Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1441:.\Generated_Source\PSoC4/CyLib.c ****     }
1442:.\Generated_Source\PSoC4/CyLib.c **** 
1443:.\Generated_Source\PSoC4/CyLib.c **** 
1444:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1445:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1446:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1447:.\Generated_Source\PSoC4/CyLib.c ****     *
1448:.\Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1449:.\Generated_Source\PSoC4/CyLib.c ****     *
1450:.\Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1451:.\Generated_Source\PSoC4/CyLib.c ****     *
1452:.\Generated_Source\PSoC4/CyLib.c ****     * PLL:
1453:.\Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1454:.\Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1455:.\Generated_Source\PSoC4/CyLib.c ****     *
1456:.\Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1457:.\Generated_Source\PSoC4/CyLib.c ****     *
1458:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1459:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1460:.\Generated_Source\PSoC4/CyLib.c ****     {
1461:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1462:.\Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1463:.\Generated_Source\PSoC4/CyLib.c **** 
1464:.\Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1465:.\Generated_Source\PSoC4/CyLib.c **** 
1466:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1467:.\Generated_Source\PSoC4/CyLib.c **** 
1468:.\Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1469:.\Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1470:.\Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1471:.\Generated_Source\PSoC4/CyLib.c ****         {
1472:.\Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1473:.\Generated_Source\PSoC4/CyLib.c ****         }
1474:.\Generated_Source\PSoC4/CyLib.c **** 
1475:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1476:.\Generated_Source\PSoC4/CyLib.c **** 
1477:.\Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1478:.\Generated_Source\PSoC4/CyLib.c ****     }
1479:.\Generated_Source\PSoC4/CyLib.c **** 
1480:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1481:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1482:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1483:.\Generated_Source\PSoC4/CyLib.c ****     *
1484:.\Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1485:.\Generated_Source\PSoC4/CyLib.c ****     *
1486:.\Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1487:.\Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1488:.\Generated_Source\PSoC4/CyLib.c ****     *
1489:.\Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1490:.\Generated_Source\PSoC4/CyLib.c ****     *
1491:.\Generated_Source\PSoC4/CyLib.c ****     * PLL:
1492:.\Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1493:.\Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1494:.\Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 43


1495:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1496:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1497:.\Generated_Source\PSoC4/CyLib.c ****     {
1498:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1499:.\Generated_Source\PSoC4/CyLib.c **** 
1500:.\Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1501:.\Generated_Source\PSoC4/CyLib.c ****         {
1502:.\Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1503:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1504:.\Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1505:.\Generated_Source\PSoC4/CyLib.c ****         }
1506:.\Generated_Source\PSoC4/CyLib.c ****     }
1507:.\Generated_Source\PSoC4/CyLib.c **** 
1508:.\Generated_Source\PSoC4/CyLib.c **** 
1509:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1510:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1511:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1512:.\Generated_Source\PSoC4/CyLib.c ****     *
1513:.\Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1514:.\Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1515:.\Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1516:.\Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1517:.\Generated_Source\PSoC4/CyLib.c ****     *
1518:.\Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1519:.\Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1520:.\Generated_Source\PSoC4/CyLib.c ****     *
1521:.\Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1522:.\Generated_Source\PSoC4/CyLib.c ****     *
1523:.\Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1524:.\Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1525:.\Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1526:.\Generated_Source\PSoC4/CyLib.c ****     *
1527:.\Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1528:.\Generated_Source\PSoC4/CyLib.c ****     * divider.
1529:.\Generated_Source\PSoC4/CyLib.c ****     *
1530:.\Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1531:.\Generated_Source\PSoC4/CyLib.c ****     *
1532:.\Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1533:.\Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1534:.\Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1535:.\Generated_Source\PSoC4/CyLib.c ****     *
1536:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1537:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1538:.\Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1539:.\Generated_Source\PSoC4/CyLib.c ****     *
1540:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1541:.\Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1542:.\Generated_Source\PSoC4/CyLib.c ****     {
1543:.\Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1544:.\Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1545:.\Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1546:.\Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1547:.\Generated_Source\PSoC4/CyLib.c **** 
1548:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1549:.\Generated_Source\PSoC4/CyLib.c **** 
1550:.\Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1551:.\Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 44


1552:.\Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1553:.\Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1554:.\Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1555:.\Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1556:.\Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1557:.\Generated_Source\PSoC4/CyLib.c ****         {
1558:.\Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1559:.\Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1560:.\Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1561:.\Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1562:.\Generated_Source\PSoC4/CyLib.c **** 
1563:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1564:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1565:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1566:.\Generated_Source\PSoC4/CyLib.c **** 
1567:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1568:.\Generated_Source\PSoC4/CyLib.c **** 
1569:.\Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1570:.\Generated_Source\PSoC4/CyLib.c ****         }
1571:.\Generated_Source\PSoC4/CyLib.c **** 
1572:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1573:.\Generated_Source\PSoC4/CyLib.c **** 
1574:.\Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1575:.\Generated_Source\PSoC4/CyLib.c ****     }
1576:.\Generated_Source\PSoC4/CyLib.c **** 
1577:.\Generated_Source\PSoC4/CyLib.c **** 
1578:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1579:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1580:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1581:.\Generated_Source\PSoC4/CyLib.c ****     *
1582:.\Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1583:.\Generated_Source\PSoC4/CyLib.c ****     *
1584:.\Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1585:.\Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1586:.\Generated_Source\PSoC4/CyLib.c ****     *
1587:.\Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1588:.\Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1589:.\Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1590:.\Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1591:.\Generated_Source\PSoC4/CyLib.c ****     *
1592:.\Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1593:.\Generated_Source\PSoC4/CyLib.c ****     *
1594:.\Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1595:.\Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1596:.\Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1597:.\Generated_Source\PSoC4/CyLib.c ****     *
1598:.\Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1599:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1600:.\Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1601:.\Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1602:.\Generated_Source\PSoC4/CyLib.c ****     *
1603:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1604:.\Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1605:.\Generated_Source\PSoC4/CyLib.c ****     *
1606:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1607:.\Generated_Source\PSoC4/CyLib.c ****     *
1608:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 45


1609:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1610:.\Generated_Source\PSoC4/CyLib.c ****     {
1611:.\Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1612:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1613:.\Generated_Source\PSoC4/CyLib.c **** 
1614:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1615:.\Generated_Source\PSoC4/CyLib.c **** 
1616:.\Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1617:.\Generated_Source\PSoC4/CyLib.c ****         {
1618:.\Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1619:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1620:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1621:.\Generated_Source\PSoC4/CyLib.c ****         }
1622:.\Generated_Source\PSoC4/CyLib.c **** 
1623:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1624:.\Generated_Source\PSoC4/CyLib.c ****     }
1625:.\Generated_Source\PSoC4/CyLib.c **** 
1626:.\Generated_Source\PSoC4/CyLib.c **** 
1627:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1628:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1629:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1630:.\Generated_Source\PSoC4/CyLib.c ****     *
1631:.\Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1632:.\Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1633:.\Generated_Source\PSoC4/CyLib.c ****     *
1634:.\Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1635:.\Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1636:.\Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1637:.\Generated_Source\PSoC4/CyLib.c ****     *
1638:.\Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1639:.\Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1640:.\Generated_Source\PSoC4/CyLib.c ****     *
1641:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1642:.\Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1643:.\Generated_Source\PSoC4/CyLib.c ****     {
1644:.\Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1645:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1646:.\Generated_Source\PSoC4/CyLib.c **** 
1647:.\Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1648:.\Generated_Source\PSoC4/CyLib.c **** 
1649:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1650:.\Generated_Source\PSoC4/CyLib.c **** 
1651:.\Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1652:.\Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1653:.\Generated_Source\PSoC4/CyLib.c **** 
1654:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1655:.\Generated_Source\PSoC4/CyLib.c **** 
1656:.\Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1657:.\Generated_Source\PSoC4/CyLib.c ****     }
1658:.\Generated_Source\PSoC4/CyLib.c **** 
1659:.\Generated_Source\PSoC4/CyLib.c **** 
1660:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1661:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1662:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1663:.\Generated_Source\PSoC4/CyLib.c ****     *
1664:.\Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1665:.\Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 46


1666:.\Generated_Source\PSoC4/CyLib.c ****     *
1667:.\Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1668:.\Generated_Source\PSoC4/CyLib.c ****     *
1669:.\Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1670:.\Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1671:.\Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1672:.\Generated_Source\PSoC4/CyLib.c ****     *
1673:.\Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1674:.\Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1675:.\Generated_Source\PSoC4/CyLib.c ****     *
1676:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1677:.\Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1678:.\Generated_Source\PSoC4/CyLib.c ****     {
1679:.\Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1680:.\Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1681:.\Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_LOCKED;
1682:.\Generated_Source\PSoC4/CyLib.c **** 
1683:.\Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1684:.\Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1685:.\Generated_Source\PSoC4/CyLib.c **** 
1686:.\Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1687:.\Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll)) ||
1688:.\Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll)))
1689:.\Generated_Source\PSoC4/CyLib.c ****         {
1690:.\Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1691:.\Generated_Source\PSoC4/CyLib.c ****         }
1692:.\Generated_Source\PSoC4/CyLib.c **** 
1693:.\Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1694:.\Generated_Source\PSoC4/CyLib.c ****     }
1695:.\Generated_Source\PSoC4/CyLib.c **** 
1696:.\Generated_Source\PSoC4/CyLib.c **** 
1697:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1698:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1699:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1700:.\Generated_Source\PSoC4/CyLib.c ****     *
1701:.\Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1702:.\Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1703:.\Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1704:.\Generated_Source\PSoC4/CyLib.c ****     *  this API.
1705:.\Generated_Source\PSoC4/CyLib.c ****     *
1706:.\Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1707:.\Generated_Source\PSoC4/CyLib.c ****     *
1708:.\Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1709:.\Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1710:.\Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1711:.\Generated_Source\PSoC4/CyLib.c ****     *
1712:.\Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1713:.\Generated_Source\PSoC4/CyLib.c ****     *
1714:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1715:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1716:.\Generated_Source\PSoC4/CyLib.c ****     {
1717:.\Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1718:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1719:.\Generated_Source\PSoC4/CyLib.c **** 
1720:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1721:.\Generated_Source\PSoC4/CyLib.c **** 
1722:.\Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 47


1723:.\Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1724:.\Generated_Source\PSoC4/CyLib.c **** 
1725:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1726:.\Generated_Source\PSoC4/CyLib.c **** 
1727:.\Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1728:.\Generated_Source\PSoC4/CyLib.c ****     }
1729:.\Generated_Source\PSoC4/CyLib.c **** 
1730:.\Generated_Source\PSoC4/CyLib.c **** 
1731:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1732:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1733:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1734:.\Generated_Source\PSoC4/CyLib.c ****     *
1735:.\Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1736:.\Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1737:.\Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1738:.\Generated_Source\PSoC4/CyLib.c ****     *
1739:.\Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1740:.\Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1741:.\Generated_Source\PSoC4/CyLib.c ****     *
1742:.\Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1743:.\Generated_Source\PSoC4/CyLib.c ****     *
1744:.\Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1745:.\Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1746:.\Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1747:.\Generated_Source\PSoC4/CyLib.c ****     *
1748:.\Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1749:.\Generated_Source\PSoC4/CyLib.c ****     *
1750:.\Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
1751:.\Generated_Source\PSoC4/CyLib.c ****     *
1752:.\Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
1753:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
1754:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1755:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1756:.\Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1757:.\Generated_Source\PSoC4/CyLib.c ****     *
1758:.\Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
1759:.\Generated_Source\PSoC4/CyLib.c ****     *
1760:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
1761:.\Generated_Source\PSoC4/CyLib.c ****     * frequency.
1762:.\Generated_Source\PSoC4/CyLib.c ****     *
1763:.\Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
1764:.\Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
1765:.\Generated_Source\PSoC4/CyLib.c ****     *
1766:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1767:.\Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
1768:.\Generated_Source\PSoC4/CyLib.c ****     {
1769:.\Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
1770:.\Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
1771:.\Generated_Source\PSoC4/CyLib.c **** 
1772:.\Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
1773:.\Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
1774:.\Generated_Source\PSoC4/CyLib.c **** 
1775:.\Generated_Source\PSoC4/CyLib.c ****         uint32 q;
1776:.\Generated_Source\PSoC4/CyLib.c ****         uint32 p;
1777:.\Generated_Source\PSoC4/CyLib.c **** 
1778:.\Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
1779:.\Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 48


1780:.\Generated_Source\PSoC4/CyLib.c **** 
1781:.\Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1782:.\Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1783:.\Generated_Source\PSoC4/CyLib.c **** 
1784:.\Generated_Source\PSoC4/CyLib.c **** 
1785:.\Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1786:.\Generated_Source\PSoC4/CyLib.c **** 
1787:.\Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1788:.\Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
1789:.\Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
1790:.\Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
1791:.\Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1792:.\Generated_Source\PSoC4/CyLib.c ****         {
1793:.\Generated_Source\PSoC4/CyLib.c **** 
1794:.\Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
1795:.\Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
1796:.\Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
1797:.\Generated_Source\PSoC4/CyLib.c **** 
1798:.\Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
1799:.\Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
1800:.\Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
1801:.\Generated_Source\PSoC4/CyLib.c **** 
1802:.\Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
1803:.\Generated_Source\PSoC4/CyLib.c ****             {
1804:.\Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
1805:.\Generated_Source\PSoC4/CyLib.c ****                 {
1806:.\Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
1807:.\Generated_Source\PSoC4/CyLib.c **** 
1808:.\Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
1809:.\Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
1810:.\Generated_Source\PSoC4/CyLib.c **** 
1811:.\Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
1812:.\Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
1813:.\Generated_Source\PSoC4/CyLib.c **** 
1814:.\Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
1815:.\Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
1816:.\Generated_Source\PSoC4/CyLib.c **** 
1817:.\Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
1818:.\Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
1819:.\Generated_Source\PSoC4/CyLib.c ****                     {
1820:.\Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
1821:.\Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
1822:.\Generated_Source\PSoC4/CyLib.c ****                         break;
1823:.\Generated_Source\PSoC4/CyLib.c ****                     }
1824:.\Generated_Source\PSoC4/CyLib.c ****                 }
1825:.\Generated_Source\PSoC4/CyLib.c **** 
1826:.\Generated_Source\PSoC4/CyLib.c **** 
1827:.\Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
1828:.\Generated_Source\PSoC4/CyLib.c ****                 {
1829:.\Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
1830:.\Generated_Source\PSoC4/CyLib.c ****                     {
1831:.\Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
1832:.\Generated_Source\PSoC4/CyLib.c ****                     }
1833:.\Generated_Source\PSoC4/CyLib.c ****                 }
1834:.\Generated_Source\PSoC4/CyLib.c ****             }
1835:.\Generated_Source\PSoC4/CyLib.c **** 
1836:.\Generated_Source\PSoC4/CyLib.c ****         }
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 49


1837:.\Generated_Source\PSoC4/CyLib.c **** 
1838:.\Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1839:.\Generated_Source\PSoC4/CyLib.c ****     }
1840:.\Generated_Source\PSoC4/CyLib.c **** 
1841:.\Generated_Source\PSoC4/CyLib.c **** 
1842:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1843:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
1844:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1845:.\Generated_Source\PSoC4/CyLib.c ****     *
1846:.\Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
1847:.\Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
1848:.\Generated_Source\PSoC4/CyLib.c ****     *
1849:.\Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1850:.\Generated_Source\PSoC4/CyLib.c ****     *
1851:.\Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1852:.\Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1853:.\Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1854:.\Generated_Source\PSoC4/CyLib.c ****     *
1855:.\Generated_Source\PSoC4/CyLib.c ****     * \param source:
1856:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
1857:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock
1858:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
1859:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0]
1860:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1]
1861:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2]
1862:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3]
1863:.\Generated_Source\PSoC4/CyLib.c ****     *
1864:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1865:.\Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
1866:.\Generated_Source\PSoC4/CyLib.c ****     {
1867:.\Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1868:.\Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1869:.\Generated_Source\PSoC4/CyLib.c **** 
1870:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1871:.\Generated_Source\PSoC4/CyLib.c **** 
1872:.\Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1873:.\Generated_Source\PSoC4/CyLib.c ****         {
1874:.\Generated_Source\PSoC4/CyLib.c ****             regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
1875:.\Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MASK(pl
1876:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG = regTmp;
1877:.\Generated_Source\PSoC4/CyLib.c ****         }
1878:.\Generated_Source\PSoC4/CyLib.c **** 
1879:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1880:.\Generated_Source\PSoC4/CyLib.c ****     }
1881:.\Generated_Source\PSoC4/CyLib.c **** 
1882:.\Generated_Source\PSoC4/CyLib.c **** 
1883:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1884:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
1885:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1886:.\Generated_Source\PSoC4/CyLib.c ****     *
1887:.\Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
1888:.\Generated_Source\PSoC4/CyLib.c ****     *
1889:.\Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
1890:.\Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
1891:.\Generated_Source\PSoC4/CyLib.c ****     *
1892:.\Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1893:.\Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 50


1894:.\Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1895:.\Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1896:.\Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1897:.\Generated_Source\PSoC4/CyLib.c ****     *
1898:.\Generated_Source\PSoC4/CyLib.c ****     * \param divider:
1899:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
1900:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1901:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1902:.\Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1903:.\Generated_Source\PSoC4/CyLib.c ****     *
1904:.\Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
1905:.\Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
1906:.\Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
1907:.\Generated_Source\PSoC4/CyLib.c ****     *
1908:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1909:.\Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
1910:.\Generated_Source\PSoC4/CyLib.c ****     {
1911:.\Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
1912:.\Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1913:.\Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1914:.\Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1915:.\Generated_Source\PSoC4/CyLib.c **** 
1916:.\Generated_Source\PSoC4/CyLib.c **** 
1917:.\Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1918:.\Generated_Source\PSoC4/CyLib.c **** 
1919:.\Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1920:.\Generated_Source\PSoC4/CyLib.c **** 
1921:.\Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
1922:.\Generated_Source\PSoC4/CyLib.c ****         {
1923:.\Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
1924:.\Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
1925:.\Generated_Source\PSoC4/CyLib.c **** 
1926:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
1927:.\Generated_Source\PSoC4/CyLib.c **** 
1928:.\Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1929:.\Generated_Source\PSoC4/CyLib.c ****         }
1930:.\Generated_Source\PSoC4/CyLib.c **** 
1931:.\Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1932:.\Generated_Source\PSoC4/CyLib.c **** 
1933:.\Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1934:.\Generated_Source\PSoC4/CyLib.c ****     }
1935:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
1936:.\Generated_Source\PSoC4/CyLib.c **** 
1937:.\Generated_Source\PSoC4/CyLib.c **** 
1938:.\Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
1939:.\Generated_Source\PSoC4/CyLib.c **** 
1940:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1941:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
1942:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1943:.\Generated_Source\PSoC4/CyLib.c ****     *
1944:.\Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
1945:.\Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
1946:.\Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
1947:.\Generated_Source\PSoC4/CyLib.c ****     *
1948:.\Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
1949:.\Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
1950:.\Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 51


1951:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
1952:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
1953:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
1954:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
1955:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
1956:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
1957:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
1958:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
1959:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
1960:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
1961:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
1962:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
1963:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
1964:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
1965:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
1966:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
1967:.\Generated_Source\PSoC4/CyLib.c ****     *
1968:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1969:.\Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
1970:.\Generated_Source\PSoC4/CyLib.c ****     {
 891              		.loc 1 1970 0
 892              		.cfi_startproc
 893 0000 80B5     		push	{r7, lr}
 894              		.cfi_def_cfa_offset 8
 895              		.cfi_offset 7, -8
 896              		.cfi_offset 14, -4
 897 0002 82B0     		sub	sp, sp, #8
 898              		.cfi_def_cfa_offset 16
 899 0004 00AF     		add	r7, sp, #0
 900              		.cfi_def_cfa_register 7
 901 0006 7860     		str	r0, [r7, #4]
1971:.\Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
1972:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 902              		.loc 1 1972 0
 903 0008 134B     		ldr	r3, .L52
 904 000a 134A     		ldr	r2, .L52
 905 000c 1268     		ldr	r2, [r2]
 906 000e 0221     		mov	r1, #2
 907 0010 8A43     		bic	r2, r1
 908 0012 1A60     		str	r2, [r3]
1973:.\Generated_Source\PSoC4/CyLib.c **** 
1974:.\Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
1975:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 909              		.loc 1 1975 0
 910 0014 114B     		ldr	r3, .L52+4
 911 0016 114A     		ldr	r2, .L52+4
 912 0018 1268     		ldr	r2, [r2]
 913 001a 1E21     		mov	r1, #30
 914 001c 8A43     		bic	r2, r1
 915 001e 111C     		mov	r1, r2
1976:.\Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 916              		.loc 1 1976 0
 917 0020 7A68     		ldr	r2, [r7, #4]
 918 0022 5200     		lsl	r2, r2, #1
 919 0024 1E20     		mov	r0, #30
 920 0026 0240     		and	r2, r0
1975:.\Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 52


 921              		.loc 1 1975 0
 922 0028 0A43     		orr	r2, r1
 923 002a 1A60     		str	r2, [r3]
1977:.\Generated_Source\PSoC4/CyLib.c **** 
1978:.\Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
1979:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 924              		.loc 1 1979 0
 925 002c 0B4B     		ldr	r3, .L52+4
 926 002e 0B4A     		ldr	r2, .L52+4
 927 0030 1268     		ldr	r2, [r2]
 928 0032 0121     		mov	r1, #1
 929 0034 0A43     		orr	r2, r1
 930 0036 1A60     		str	r2, [r3]
1980:.\Generated_Source\PSoC4/CyLib.c **** 
1981:.\Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
1982:.\Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
 931              		.loc 1 1982 0
 932 0038 FA23     		mov	r3, #250
 933 003a 9B00     		lsl	r3, r3, #2
 934 003c 181C     		mov	r0, r3
 935 003e FFF7FEFF 		bl	CyDelayUs
1983:.\Generated_Source\PSoC4/CyLib.c **** 
1984:.\Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
1985:.\Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 936              		.loc 1 1985 0
 937 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
1986:.\Generated_Source\PSoC4/CyLib.c **** 
1987:.\Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
1988:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 938              		.loc 1 1988 0
 939 0046 044B     		ldr	r3, .L52
 940 0048 034A     		ldr	r2, .L52
 941 004a 1268     		ldr	r2, [r2]
 942 004c 0221     		mov	r1, #2
 943 004e 0A43     		orr	r2, r1
 944 0050 1A60     		str	r2, [r3]
1989:.\Generated_Source\PSoC4/CyLib.c ****     }
 945              		.loc 1 1989 0
 946 0052 BD46     		mov	sp, r7
 947 0054 02B0     		add	sp, sp, #8
 948              		@ sp needed
 949 0056 80BD     		pop	{r7, pc}
 950              	.L53:
 951              		.align	2
 952              	.L52:
 953 0058 08000B40 		.word	1074462728
 954 005c 18000B40 		.word	1074462744
 955              		.cfi_endproc
 956              	.LFE12:
 957              		.size	CySysLvdEnable, .-CySysLvdEnable
 958              		.section	.text.CySysLvdDisable,"ax",%progbits
 959              		.align	2
 960              		.global	CySysLvdDisable
 961              		.code	16
 962              		.thumb_func
 963              		.type	CySysLvdDisable, %function
 964              	CySysLvdDisable:
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 53


 965              	.LFB13:
1990:.\Generated_Source\PSoC4/CyLib.c **** 
1991:.\Generated_Source\PSoC4/CyLib.c **** 
1992:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1993:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
1994:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1995:.\Generated_Source\PSoC4/CyLib.c ****     *
1996:.\Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
1997:.\Generated_Source\PSoC4/CyLib.c ****     *
1998:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1999:.\Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2000:.\Generated_Source\PSoC4/CyLib.c ****     {
 966              		.loc 1 2000 0
 967              		.cfi_startproc
 968 0000 80B5     		push	{r7, lr}
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 7, -8
 971              		.cfi_offset 14, -4
 972 0002 00AF     		add	r7, sp, #0
 973              		.cfi_def_cfa_register 7
2001:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 974              		.loc 1 2001 0
 975 0004 064B     		ldr	r3, .L55
 976 0006 064A     		ldr	r2, .L55
 977 0008 1268     		ldr	r2, [r2]
 978 000a 0221     		mov	r1, #2
 979 000c 8A43     		bic	r2, r1
 980 000e 1A60     		str	r2, [r3]
2002:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 981              		.loc 1 2002 0
 982 0010 044B     		ldr	r3, .L55+4
 983 0012 044A     		ldr	r2, .L55+4
 984 0014 1268     		ldr	r2, [r2]
 985 0016 0121     		mov	r1, #1
 986 0018 8A43     		bic	r2, r1
 987 001a 1A60     		str	r2, [r3]
2003:.\Generated_Source\PSoC4/CyLib.c ****     }
 988              		.loc 1 2003 0
 989 001c BD46     		mov	sp, r7
 990              		@ sp needed
 991 001e 80BD     		pop	{r7, pc}
 992              	.L56:
 993              		.align	2
 994              	.L55:
 995 0020 08000B40 		.word	1074462728
 996 0024 18000B40 		.word	1074462744
 997              		.cfi_endproc
 998              	.LFE13:
 999              		.size	CySysLvdDisable, .-CySysLvdDisable
 1000              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 1001              		.align	2
 1002              		.global	CySysLvdGetInterruptSource
 1003              		.code	16
 1004              		.thumb_func
 1005              		.type	CySysLvdGetInterruptSource, %function
 1006              	CySysLvdGetInterruptSource:
 1007              	.LFB14:
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 54


2004:.\Generated_Source\PSoC4/CyLib.c **** 
2005:.\Generated_Source\PSoC4/CyLib.c **** 
2006:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2007:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2008:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2009:.\Generated_Source\PSoC4/CyLib.c ****     *
2010:.\Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2011:.\Generated_Source\PSoC4/CyLib.c ****     *
2012:.\Generated_Source\PSoC4/CyLib.c ****     * \return
2013:.\Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2014:.\Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2015:.\Generated_Source\PSoC4/CyLib.c ****     *
2016:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2017:.\Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2018:.\Generated_Source\PSoC4/CyLib.c ****     {
 1008              		.loc 1 2018 0
 1009              		.cfi_startproc
 1010 0000 80B5     		push	{r7, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 00AF     		add	r7, sp, #0
 1015              		.cfi_def_cfa_register 7
2019:.\Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 1016              		.loc 1 2019 0
 1017 0004 034B     		ldr	r3, .L59
 1018 0006 1B68     		ldr	r3, [r3]
 1019 0008 0222     		mov	r2, #2
 1020 000a 1340     		and	r3, r2
2020:.\Generated_Source\PSoC4/CyLib.c ****     }
 1021              		.loc 1 2020 0
 1022 000c 181C     		mov	r0, r3
 1023 000e BD46     		mov	sp, r7
 1024              		@ sp needed
 1025 0010 80BD     		pop	{r7, pc}
 1026              	.L60:
 1027 0012 C046     		.align	2
 1028              	.L59:
 1029 0014 04000B40 		.word	1074462724
 1030              		.cfi_endproc
 1031              	.LFE14:
 1032              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 1033              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 1034              		.align	2
 1035              		.global	CySysLvdClearInterrupt
 1036              		.code	16
 1037              		.thumb_func
 1038              		.type	CySysLvdClearInterrupt, %function
 1039              	CySysLvdClearInterrupt:
 1040              	.LFB15:
2021:.\Generated_Source\PSoC4/CyLib.c **** 
2022:.\Generated_Source\PSoC4/CyLib.c **** 
2023:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2024:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2025:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2026:.\Generated_Source\PSoC4/CyLib.c ****     *
2027:.\Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 55


2028:.\Generated_Source\PSoC4/CyLib.c ****     *
2029:.\Generated_Source\PSoC4/CyLib.c ****     * \return
2030:.\Generated_Source\PSoC4/CyLib.c ****     *  None
2031:.\Generated_Source\PSoC4/CyLib.c ****     *
2032:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2033:.\Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2034:.\Generated_Source\PSoC4/CyLib.c ****     {
 1041              		.loc 1 2034 0
 1042              		.cfi_startproc
 1043 0000 80B5     		push	{r7, lr}
 1044              		.cfi_def_cfa_offset 8
 1045              		.cfi_offset 7, -8
 1046              		.cfi_offset 14, -4
 1047 0002 00AF     		add	r7, sp, #0
 1048              		.cfi_def_cfa_register 7
2035:.\Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 1049              		.loc 1 2035 0
 1050 0004 024B     		ldr	r3, .L62
 1051 0006 0222     		mov	r2, #2
 1052 0008 1A60     		str	r2, [r3]
2036:.\Generated_Source\PSoC4/CyLib.c ****     }
 1053              		.loc 1 2036 0
 1054 000a BD46     		mov	sp, r7
 1055              		@ sp needed
 1056 000c 80BD     		pop	{r7, pc}
 1057              	.L63:
 1058 000e C046     		.align	2
 1059              	.L62:
 1060 0010 04000B40 		.word	1074462724
 1061              		.cfi_endproc
 1062              	.LFE15:
 1063              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 1064              		.section	.text.CySysGetResetReason,"ax",%progbits
 1065              		.align	2
 1066              		.global	CySysGetResetReason
 1067              		.code	16
 1068              		.thumb_func
 1069              		.type	CySysGetResetReason, %function
 1070              	CySysGetResetReason:
 1071              	.LFB16:
2037:.\Generated_Source\PSoC4/CyLib.c **** 
2038:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2039:.\Generated_Source\PSoC4/CyLib.c **** 
2040:.\Generated_Source\PSoC4/CyLib.c **** 
2041:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2042:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2043:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2044:.\Generated_Source\PSoC4/CyLib.c **** *
2045:.\Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2046:.\Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2047:.\Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2048:.\Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2049:.\Generated_Source\PSoC4/CyLib.c **** *
2050:.\Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2051:.\Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2052:.\Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2053:.\Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 56


2054:.\Generated_Source\PSoC4/CyLib.c **** *
2055:.\Generated_Source\PSoC4/CyLib.c **** * \return
2056:.\Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2057:.\Generated_Source\PSoC4/CyLib.c **** *
2058:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2059:.\Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2060:.\Generated_Source\PSoC4/CyLib.c **** {
 1072              		.loc 1 2060 0
 1073              		.cfi_startproc
 1074 0000 80B5     		push	{r7, lr}
 1075              		.cfi_def_cfa_offset 8
 1076              		.cfi_offset 7, -8
 1077              		.cfi_offset 14, -4
 1078 0002 84B0     		sub	sp, sp, #16
 1079              		.cfi_def_cfa_offset 24
 1080 0004 00AF     		add	r7, sp, #0
 1081              		.cfi_def_cfa_register 7
 1082 0006 7860     		str	r0, [r7, #4]
2061:.\Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2062:.\Generated_Source\PSoC4/CyLib.c **** 
2063:.\Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 1083              		.loc 1 2063 0
 1084 0008 7B68     		ldr	r3, [r7, #4]
 1085 000a 1922     		mov	r2, #25
 1086 000c 1340     		and	r3, r2
 1087 000e 7B60     		str	r3, [r7, #4]
2064:.\Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 1088              		.loc 1 2064 0
 1089 0010 064B     		ldr	r3, .L66
 1090 0012 1B68     		ldr	r3, [r3]
 1091 0014 1922     		mov	r2, #25
 1092 0016 1340     		and	r3, r2
 1093 0018 FB60     		str	r3, [r7, #12]
2065:.\Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2066:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 1094              		.loc 1 2066 0
 1095 001a 044B     		ldr	r3, .L66
 1096 001c 7A68     		ldr	r2, [r7, #4]
 1097 001e 1A60     		str	r2, [r3]
2067:.\Generated_Source\PSoC4/CyLib.c **** 
2068:.\Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 1098              		.loc 1 2068 0
 1099 0020 FB68     		ldr	r3, [r7, #12]
2069:.\Generated_Source\PSoC4/CyLib.c **** }
 1100              		.loc 1 2069 0
 1101 0022 181C     		mov	r0, r3
 1102 0024 BD46     		mov	sp, r7
 1103 0026 04B0     		add	sp, sp, #16
 1104              		@ sp needed
 1105 0028 80BD     		pop	{r7, pc}
 1106              	.L67:
 1107 002a C046     		.align	2
 1108              	.L66:
 1109 002c 00030B40 		.word	1074463488
 1110              		.cfi_endproc
 1111              	.LFE16:
 1112              		.size	CySysGetResetReason, .-CySysGetResetReason
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 57


 1113              		.section	.text.CyDisableInts,"ax",%progbits
 1114              		.align	2
 1115              		.global	CyDisableInts
 1116              		.code	16
 1117              		.thumb_func
 1118              		.type	CyDisableInts, %function
 1119              	CyDisableInts:
 1120              	.LFB17:
2070:.\Generated_Source\PSoC4/CyLib.c **** 
2071:.\Generated_Source\PSoC4/CyLib.c **** 
2072:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2073:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2074:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2075:.\Generated_Source\PSoC4/CyLib.c **** *
2076:.\Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2077:.\Generated_Source\PSoC4/CyLib.c **** *
2078:.\Generated_Source\PSoC4/CyLib.c **** * \return
2079:.\Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2080:.\Generated_Source\PSoC4/CyLib.c **** *
2081:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2082:.\Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2083:.\Generated_Source\PSoC4/CyLib.c **** {
 1121              		.loc 1 2083 0
 1122              		.cfi_startproc
 1123 0000 80B5     		push	{r7, lr}
 1124              		.cfi_def_cfa_offset 8
 1125              		.cfi_offset 7, -8
 1126              		.cfi_offset 14, -4
 1127 0002 82B0     		sub	sp, sp, #8
 1128              		.cfi_def_cfa_offset 16
 1129 0004 00AF     		add	r7, sp, #0
 1130              		.cfi_def_cfa_register 7
2084:.\Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2085:.\Generated_Source\PSoC4/CyLib.c **** 
2086:.\Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2087:.\Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 1131              		.loc 1 2087 0
 1132 0006 064B     		ldr	r3, .L70
 1133 0008 1B68     		ldr	r3, [r3]
 1134 000a 7B60     		str	r3, [r7, #4]
2088:.\Generated_Source\PSoC4/CyLib.c **** 
2089:.\Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2090:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 1135              		.loc 1 2090 0
 1136 000c 044B     		ldr	r3, .L70
 1137 000e 0122     		mov	r2, #1
 1138 0010 5242     		neg	r2, r2
 1139 0012 1A60     		str	r2, [r3]
2091:.\Generated_Source\PSoC4/CyLib.c **** 
2092:.\Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1140              		.loc 1 2092 0
 1141 0014 7B68     		ldr	r3, [r7, #4]
2093:.\Generated_Source\PSoC4/CyLib.c **** }
 1142              		.loc 1 2093 0
 1143 0016 181C     		mov	r0, r3
 1144 0018 BD46     		mov	sp, r7
 1145 001a 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 58


 1146              		@ sp needed
 1147 001c 80BD     		pop	{r7, pc}
 1148              	.L71:
 1149 001e C046     		.align	2
 1150              	.L70:
 1151 0020 80E100E0 		.word	-536813184
 1152              		.cfi_endproc
 1153              	.LFE17:
 1154              		.size	CyDisableInts, .-CyDisableInts
 1155              		.section	.text.CyEnableInts,"ax",%progbits
 1156              		.align	2
 1157              		.global	CyEnableInts
 1158              		.code	16
 1159              		.thumb_func
 1160              		.type	CyEnableInts, %function
 1161              	CyEnableInts:
 1162              	.LFB18:
2094:.\Generated_Source\PSoC4/CyLib.c **** 
2095:.\Generated_Source\PSoC4/CyLib.c **** 
2096:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2097:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2098:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2099:.\Generated_Source\PSoC4/CyLib.c **** *
2100:.\Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2101:.\Generated_Source\PSoC4/CyLib.c **** *
2102:.\Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2103:.\Generated_Source\PSoC4/CyLib.c **** *
2104:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2105:.\Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2106:.\Generated_Source\PSoC4/CyLib.c **** {
 1163              		.loc 1 2106 0
 1164              		.cfi_startproc
 1165 0000 80B5     		push	{r7, lr}
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 7, -8
 1168              		.cfi_offset 14, -4
 1169 0002 82B0     		sub	sp, sp, #8
 1170              		.cfi_def_cfa_offset 16
 1171 0004 00AF     		add	r7, sp, #0
 1172              		.cfi_def_cfa_register 7
 1173 0006 7860     		str	r0, [r7, #4]
2107:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1174              		.loc 1 2107 0
 1175 0008 024B     		ldr	r3, .L73
 1176 000a 7A68     		ldr	r2, [r7, #4]
 1177 000c 1A60     		str	r2, [r3]
2108:.\Generated_Source\PSoC4/CyLib.c **** }
 1178              		.loc 1 2108 0
 1179 000e BD46     		mov	sp, r7
 1180 0010 02B0     		add	sp, sp, #8
 1181              		@ sp needed
 1182 0012 80BD     		pop	{r7, pc}
 1183              	.L74:
 1184              		.align	2
 1185              	.L73:
 1186 0014 00E100E0 		.word	-536813312
 1187              		.cfi_endproc
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 59


 1188              	.LFE18:
 1189              		.size	CyEnableInts, .-CyEnableInts
 1190              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1191              		.align	2
 1192              		.global	CyIntSetSysVector
 1193              		.code	16
 1194              		.thumb_func
 1195              		.type	CyIntSetSysVector, %function
 1196              	CyIntSetSysVector:
 1197              	.LFB19:
2109:.\Generated_Source\PSoC4/CyLib.c **** 
2110:.\Generated_Source\PSoC4/CyLib.c **** 
2111:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2112:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2113:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2114:.\Generated_Source\PSoC4/CyLib.c **** *
2115:.\Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2116:.\Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2117:.\Generated_Source\PSoC4/CyLib.c **** *
2118:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2119:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2120:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2121:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2122:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2123:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2124:.\Generated_Source\PSoC4/CyLib.c **** *
2125:.\Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2126:.\Generated_Source\PSoC4/CyLib.c **** *
2127:.\Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2128:.\Generated_Source\PSoC4/CyLib.c **** *
2129:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2130:.\Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2131:.\Generated_Source\PSoC4/CyLib.c **** {
 1198              		.loc 1 2131 0
 1199              		.cfi_startproc
 1200 0000 80B5     		push	{r7, lr}
 1201              		.cfi_def_cfa_offset 8
 1202              		.cfi_offset 7, -8
 1203              		.cfi_offset 14, -4
 1204 0002 84B0     		sub	sp, sp, #16
 1205              		.cfi_def_cfa_offset 24
 1206 0004 00AF     		add	r7, sp, #0
 1207              		.cfi_def_cfa_register 7
 1208 0006 021C     		mov	r2, r0
 1209 0008 3960     		str	r1, [r7]
 1210 000a FB1D     		add	r3, r7, #7
 1211 000c 1A70     		strb	r2, [r3]
2132:.\Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2133:.\Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1212              		.loc 1 2133 0
 1213 000e 8023     		mov	r3, #128
 1214 0010 9B05     		lsl	r3, r3, #22
 1215 0012 FB60     		str	r3, [r7, #12]
2134:.\Generated_Source\PSoC4/CyLib.c **** 
2135:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1216              		.loc 1 2135 0
 1217 0014 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 60


 1218 0016 1B78     		ldrb	r3, [r3]
 1219 0018 0F2B     		cmp	r3, #15
 1220 001a 02D9     		bls	.L76
 1221              		.loc 1 2135 0 is_stmt 0 discriminator 1
 1222 001c 0020     		mov	r0, #0
 1223 001e FFF7FEFF 		bl	CyHalt
 1224              	.L76:
2136:.\Generated_Source\PSoC4/CyLib.c **** 
2137:.\Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2138:.\Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1225              		.loc 1 2138 0 is_stmt 1
 1226 0022 FB1D     		add	r3, r7, #7
 1227 0024 1B78     		ldrb	r3, [r3]
 1228 0026 9B00     		lsl	r3, r3, #2
 1229 0028 FA68     		ldr	r2, [r7, #12]
 1230 002a D318     		add	r3, r2, r3
 1231 002c 1B68     		ldr	r3, [r3]
 1232 002e BB60     		str	r3, [r7, #8]
2139:.\Generated_Source\PSoC4/CyLib.c **** 
2140:.\Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2141:.\Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1233              		.loc 1 2141 0
 1234 0030 FB1D     		add	r3, r7, #7
 1235 0032 1B78     		ldrb	r3, [r3]
 1236 0034 9B00     		lsl	r3, r3, #2
 1237 0036 FA68     		ldr	r2, [r7, #12]
 1238 0038 D318     		add	r3, r2, r3
 1239 003a 3A68     		ldr	r2, [r7]
 1240 003c 1A60     		str	r2, [r3]
2142:.\Generated_Source\PSoC4/CyLib.c **** 
2143:.\Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1241              		.loc 1 2143 0
 1242 003e BB68     		ldr	r3, [r7, #8]
2144:.\Generated_Source\PSoC4/CyLib.c **** }
 1243              		.loc 1 2144 0
 1244 0040 181C     		mov	r0, r3
 1245 0042 BD46     		mov	sp, r7
 1246 0044 04B0     		add	sp, sp, #16
 1247              		@ sp needed
 1248 0046 80BD     		pop	{r7, pc}
 1249              		.cfi_endproc
 1250              	.LFE19:
 1251              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1252              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1253              		.align	2
 1254              		.global	CyIntGetSysVector
 1255              		.code	16
 1256              		.thumb_func
 1257              		.type	CyIntGetSysVector, %function
 1258              	CyIntGetSysVector:
 1259              	.LFB20:
2145:.\Generated_Source\PSoC4/CyLib.c **** 
2146:.\Generated_Source\PSoC4/CyLib.c **** 
2147:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2148:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2149:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2150:.\Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 61


2151:.\Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2152:.\Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2153:.\Generated_Source\PSoC4/CyLib.c **** *
2154:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2155:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2156:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2157:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2158:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2159:.\Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2160:.\Generated_Source\PSoC4/CyLib.c **** *
2161:.\Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2162:.\Generated_Source\PSoC4/CyLib.c **** *
2163:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2164:.\Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2165:.\Generated_Source\PSoC4/CyLib.c **** {
 1260              		.loc 1 2165 0
 1261              		.cfi_startproc
 1262 0000 80B5     		push	{r7, lr}
 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266 0002 84B0     		sub	sp, sp, #16
 1267              		.cfi_def_cfa_offset 24
 1268 0004 00AF     		add	r7, sp, #0
 1269              		.cfi_def_cfa_register 7
 1270 0006 021C     		mov	r2, r0
 1271 0008 FB1D     		add	r3, r7, #7
 1272 000a 1A70     		strb	r2, [r3]
2166:.\Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1273              		.loc 1 2166 0
 1274 000c 8023     		mov	r3, #128
 1275 000e 9B05     		lsl	r3, r3, #22
 1276 0010 FB60     		str	r3, [r7, #12]
2167:.\Generated_Source\PSoC4/CyLib.c **** 
2168:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1277              		.loc 1 2168 0
 1278 0012 FB1D     		add	r3, r7, #7
 1279 0014 1B78     		ldrb	r3, [r3]
 1280 0016 0F2B     		cmp	r3, #15
 1281 0018 02D9     		bls	.L79
 1282              		.loc 1 2168 0 is_stmt 0 discriminator 1
 1283 001a 0020     		mov	r0, #0
 1284 001c FFF7FEFF 		bl	CyHalt
 1285              	.L79:
2169:.\Generated_Source\PSoC4/CyLib.c **** 
2170:.\Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1286              		.loc 1 2170 0 is_stmt 1
 1287 0020 FB1D     		add	r3, r7, #7
 1288 0022 1B78     		ldrb	r3, [r3]
 1289 0024 9B00     		lsl	r3, r3, #2
 1290 0026 FA68     		ldr	r2, [r7, #12]
 1291 0028 D318     		add	r3, r2, r3
 1292 002a 1B68     		ldr	r3, [r3]
2171:.\Generated_Source\PSoC4/CyLib.c **** }
 1293              		.loc 1 2171 0
 1294 002c 181C     		mov	r0, r3
 1295 002e BD46     		mov	sp, r7
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 62


 1296 0030 04B0     		add	sp, sp, #16
 1297              		@ sp needed
 1298 0032 80BD     		pop	{r7, pc}
 1299              		.cfi_endproc
 1300              	.LFE20:
 1301              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1302              		.section	.text.CyIntSetVector,"ax",%progbits
 1303              		.align	2
 1304              		.global	CyIntSetVector
 1305              		.code	16
 1306              		.thumb_func
 1307              		.type	CyIntSetVector, %function
 1308              	CyIntSetVector:
 1309              	.LFB21:
2172:.\Generated_Source\PSoC4/CyLib.c **** 
2173:.\Generated_Source\PSoC4/CyLib.c **** 
2174:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2175:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2176:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2177:.\Generated_Source\PSoC4/CyLib.c **** *
2178:.\Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2179:.\Generated_Source\PSoC4/CyLib.c **** *
2180:.\Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2181:.\Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2182:.\Generated_Source\PSoC4/CyLib.c **** *
2183:.\Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2184:.\Generated_Source\PSoC4/CyLib.c **** *
2185:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2186:.\Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2187:.\Generated_Source\PSoC4/CyLib.c **** {
 1310              		.loc 1 2187 0
 1311              		.cfi_startproc
 1312 0000 80B5     		push	{r7, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 84B0     		sub	sp, sp, #16
 1317              		.cfi_def_cfa_offset 24
 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 1320 0006 021C     		mov	r2, r0
 1321 0008 3960     		str	r1, [r7]
 1322 000a FB1D     		add	r3, r7, #7
 1323 000c 1A70     		strb	r2, [r3]
2188:.\Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2189:.\Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1324              		.loc 1 2189 0
 1325 000e 8023     		mov	r3, #128
 1326 0010 9B05     		lsl	r3, r3, #22
 1327 0012 FB60     		str	r3, [r7, #12]
2190:.\Generated_Source\PSoC4/CyLib.c **** 
2191:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1328              		.loc 1 2191 0
 1329 0014 FB1D     		add	r3, r7, #7
 1330 0016 1B78     		ldrb	r3, [r3]
 1331 0018 1F2B     		cmp	r3, #31
 1332 001a 02D9     		bls	.L82
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 63


 1333              		.loc 1 2191 0 is_stmt 0 discriminator 1
 1334 001c 0020     		mov	r0, #0
 1335 001e FFF7FEFF 		bl	CyHalt
 1336              	.L82:
2192:.\Generated_Source\PSoC4/CyLib.c **** 
2193:.\Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2194:.\Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 1337              		.loc 1 2194 0 is_stmt 1
 1338 0022 FB1D     		add	r3, r7, #7
 1339 0024 1B78     		ldrb	r3, [r3]
 1340 0026 1033     		add	r3, r3, #16
 1341 0028 9B00     		lsl	r3, r3, #2
 1342 002a FA68     		ldr	r2, [r7, #12]
 1343 002c D318     		add	r3, r2, r3
 1344 002e 1B68     		ldr	r3, [r3]
 1345 0030 BB60     		str	r3, [r7, #8]
2195:.\Generated_Source\PSoC4/CyLib.c **** 
2196:.\Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2197:.\Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1346              		.loc 1 2197 0
 1347 0032 FB1D     		add	r3, r7, #7
 1348 0034 1B78     		ldrb	r3, [r3]
 1349 0036 1033     		add	r3, r3, #16
 1350 0038 9B00     		lsl	r3, r3, #2
 1351 003a FA68     		ldr	r2, [r7, #12]
 1352 003c D318     		add	r3, r2, r3
 1353 003e 3A68     		ldr	r2, [r7]
 1354 0040 1A60     		str	r2, [r3]
2198:.\Generated_Source\PSoC4/CyLib.c **** 
2199:.\Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1355              		.loc 1 2199 0
 1356 0042 BB68     		ldr	r3, [r7, #8]
2200:.\Generated_Source\PSoC4/CyLib.c **** }
 1357              		.loc 1 2200 0
 1358 0044 181C     		mov	r0, r3
 1359 0046 BD46     		mov	sp, r7
 1360 0048 04B0     		add	sp, sp, #16
 1361              		@ sp needed
 1362 004a 80BD     		pop	{r7, pc}
 1363              		.cfi_endproc
 1364              	.LFE21:
 1365              		.size	CyIntSetVector, .-CyIntSetVector
 1366              		.section	.text.CyIntGetVector,"ax",%progbits
 1367              		.align	2
 1368              		.global	CyIntGetVector
 1369              		.code	16
 1370              		.thumb_func
 1371              		.type	CyIntGetVector, %function
 1372              	CyIntGetVector:
 1373              	.LFB22:
2201:.\Generated_Source\PSoC4/CyLib.c **** 
2202:.\Generated_Source\PSoC4/CyLib.c **** 
2203:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2204:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2205:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2206:.\Generated_Source\PSoC4/CyLib.c **** *
2207:.\Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 64


2208:.\Generated_Source\PSoC4/CyLib.c **** *
2209:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2210:.\Generated_Source\PSoC4/CyLib.c **** *
2211:.\Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2212:.\Generated_Source\PSoC4/CyLib.c **** *
2213:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2214:.\Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2215:.\Generated_Source\PSoC4/CyLib.c **** {
 1374              		.loc 1 2215 0
 1375              		.cfi_startproc
 1376 0000 80B5     		push	{r7, lr}
 1377              		.cfi_def_cfa_offset 8
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0002 84B0     		sub	sp, sp, #16
 1381              		.cfi_def_cfa_offset 24
 1382 0004 00AF     		add	r7, sp, #0
 1383              		.cfi_def_cfa_register 7
 1384 0006 021C     		mov	r2, r0
 1385 0008 FB1D     		add	r3, r7, #7
 1386 000a 1A70     		strb	r2, [r3]
2216:.\Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1387              		.loc 1 2216 0
 1388 000c 8023     		mov	r3, #128
 1389 000e 9B05     		lsl	r3, r3, #22
 1390 0010 FB60     		str	r3, [r7, #12]
2217:.\Generated_Source\PSoC4/CyLib.c **** 
2218:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1391              		.loc 1 2218 0
 1392 0012 FB1D     		add	r3, r7, #7
 1393 0014 1B78     		ldrb	r3, [r3]
 1394 0016 1F2B     		cmp	r3, #31
 1395 0018 02D9     		bls	.L85
 1396              		.loc 1 2218 0 is_stmt 0 discriminator 1
 1397 001a 0020     		mov	r0, #0
 1398 001c FFF7FEFF 		bl	CyHalt
 1399              	.L85:
2219:.\Generated_Source\PSoC4/CyLib.c **** 
2220:.\Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1400              		.loc 1 2220 0 is_stmt 1
 1401 0020 FB1D     		add	r3, r7, #7
 1402 0022 1B78     		ldrb	r3, [r3]
 1403 0024 1033     		add	r3, r3, #16
 1404 0026 9B00     		lsl	r3, r3, #2
 1405 0028 FA68     		ldr	r2, [r7, #12]
 1406 002a D318     		add	r3, r2, r3
 1407 002c 1B68     		ldr	r3, [r3]
2221:.\Generated_Source\PSoC4/CyLib.c **** }
 1408              		.loc 1 2221 0
 1409 002e 181C     		mov	r0, r3
 1410 0030 BD46     		mov	sp, r7
 1411 0032 04B0     		add	sp, sp, #16
 1412              		@ sp needed
 1413 0034 80BD     		pop	{r7, pc}
 1414              		.cfi_endproc
 1415              	.LFE22:
 1416              		.size	CyIntGetVector, .-CyIntGetVector
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 65


 1417              		.section	.text.CyIntSetPriority,"ax",%progbits
 1418              		.align	2
 1419              		.global	CyIntSetPriority
 1420              		.code	16
 1421              		.thumb_func
 1422              		.type	CyIntSetPriority, %function
 1423              	CyIntSetPriority:
 1424              	.LFB23:
2222:.\Generated_Source\PSoC4/CyLib.c **** 
2223:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2224:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2225:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2226:.\Generated_Source\PSoC4/CyLib.c **** *
2227:.\Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2228:.\Generated_Source\PSoC4/CyLib.c **** *
2229:.\Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2230:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2231:.\Generated_Source\PSoC4/CyLib.c **** *
2232:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2233:.\Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2234:.\Generated_Source\PSoC4/CyLib.c **** {
 1425              		.loc 1 2234 0
 1426              		.cfi_startproc
 1427 0000 90B5     		push	{r4, r7, lr}
 1428              		.cfi_def_cfa_offset 12
 1429              		.cfi_offset 4, -12
 1430              		.cfi_offset 7, -8
 1431              		.cfi_offset 14, -4
 1432 0002 87B0     		sub	sp, sp, #28
 1433              		.cfi_def_cfa_offset 40
 1434 0004 00AF     		add	r7, sp, #0
 1435              		.cfi_def_cfa_register 7
 1436 0006 021C     		mov	r2, r0
 1437 0008 FB1D     		add	r3, r7, #7
 1438 000a 1A70     		strb	r2, [r3]
 1439 000c BB1D     		add	r3, r7, #6
 1440 000e 0A1C     		add	r2, r1, #0
 1441 0010 1A70     		strb	r2, [r3]
2235:.\Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2236:.\Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2237:.\Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2238:.\Generated_Source\PSoC4/CyLib.c **** 
2239:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1442              		.loc 1 2239 0
 1443 0012 BB1D     		add	r3, r7, #6
 1444 0014 1B78     		ldrb	r3, [r3]
 1445 0016 032B     		cmp	r3, #3
 1446 0018 02D9     		bls	.L88
 1447              		.loc 1 2239 0 is_stmt 0 discriminator 1
 1448 001a 0020     		mov	r0, #0
 1449 001c FFF7FEFF 		bl	CyHalt
 1450              	.L88:
2240:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1451              		.loc 1 2240 0 is_stmt 1
 1452 0020 FB1D     		add	r3, r7, #7
 1453 0022 1B78     		ldrb	r3, [r3]
 1454 0024 1F2B     		cmp	r3, #31
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 66


 1455 0026 02D9     		bls	.L89
 1456              		.loc 1 2240 0 is_stmt 0 discriminator 1
 1457 0028 0020     		mov	r0, #0
 1458 002a FFF7FEFF 		bl	CyHalt
 1459              	.L89:
2241:.\Generated_Source\PSoC4/CyLib.c **** 
2242:.\Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 1460              		.loc 1 2242 0 is_stmt 1
 1461 002e FB1D     		add	r3, r7, #7
 1462 0030 1B78     		ldrb	r3, [r3]
 1463 0032 0322     		mov	r2, #3
 1464 0034 1340     		and	r3, r2
 1465 0036 DB00     		lsl	r3, r3, #3
 1466 0038 0633     		add	r3, r3, #6
 1467 003a 7B61     		str	r3, [r7, #20]
2243:.\Generated_Source\PSoC4/CyLib.c **** 
2244:.\Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1468              		.loc 1 2244 0
 1469 003c 1323     		mov	r3, #19
 1470 003e FC18     		add	r4, r7, r3
 1471 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1472 0044 031C     		mov	r3, r0
 1473 0046 2370     		strb	r3, [r4]
2245:.\Generated_Source\PSoC4/CyLib.c **** 
2246:.\Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1474              		.loc 1 2246 0
 1475 0048 FB1D     		add	r3, r7, #7
 1476 004a 1B78     		ldrb	r3, [r3]
 1477 004c 9B08     		lsr	r3, r3, #2
 1478 004e DBB2     		uxtb	r3, r3
 1479 0050 9B00     		lsl	r3, r3, #2
 1480 0052 144A     		ldr	r2, .L90
 1481 0054 9446     		mov	ip, r2
 1482 0056 6344     		add	r3, r3, ip
 1483 0058 1B68     		ldr	r3, [r3]
 1484 005a FB60     		str	r3, [r7, #12]
2247:.\Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1485              		.loc 1 2247 0
 1486 005c 7B69     		ldr	r3, [r7, #20]
 1487 005e 0322     		mov	r2, #3
 1488 0060 9A40     		lsl	r2, r2, r3
 1489 0062 131C     		mov	r3, r2
 1490 0064 DA43     		mvn	r2, r3
 1491 0066 FB68     		ldr	r3, [r7, #12]
 1492 0068 1340     		and	r3, r2
 1493 006a FB60     		str	r3, [r7, #12]
2248:.\Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 1494              		.loc 1 2248 0
 1495 006c BB1D     		add	r3, r7, #6
 1496 006e 1A78     		ldrb	r2, [r3]
 1497 0070 7B69     		ldr	r3, [r7, #20]
 1498 0072 9A40     		lsl	r2, r2, r3
 1499 0074 131C     		mov	r3, r2
 1500 0076 FA68     		ldr	r2, [r7, #12]
 1501 0078 1343     		orr	r3, r2
 1502 007a FB60     		str	r3, [r7, #12]
2249:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 67


 1503              		.loc 1 2249 0
 1504 007c FB1D     		add	r3, r7, #7
 1505 007e 1B78     		ldrb	r3, [r3]
 1506 0080 9B08     		lsr	r3, r3, #2
 1507 0082 DBB2     		uxtb	r3, r3
 1508 0084 9B00     		lsl	r3, r3, #2
 1509 0086 074A     		ldr	r2, .L90
 1510 0088 9446     		mov	ip, r2
 1511 008a 6344     		add	r3, r3, ip
 1512 008c FA68     		ldr	r2, [r7, #12]
 1513 008e 1A60     		str	r2, [r3]
2250:.\Generated_Source\PSoC4/CyLib.c **** 
2251:.\Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1514              		.loc 1 2251 0
 1515 0090 1323     		mov	r3, #19
 1516 0092 FB18     		add	r3, r7, r3
 1517 0094 1B78     		ldrb	r3, [r3]
 1518 0096 181C     		mov	r0, r3
 1519 0098 FFF7FEFF 		bl	CyExitCriticalSection
2252:.\Generated_Source\PSoC4/CyLib.c **** }
 1520              		.loc 1 2252 0
 1521 009c BD46     		mov	sp, r7
 1522 009e 07B0     		add	sp, sp, #28
 1523              		@ sp needed
 1524 00a0 90BD     		pop	{r4, r7, pc}
 1525              	.L91:
 1526 00a2 C046     		.align	2
 1527              	.L90:
 1528 00a4 00E400E0 		.word	-536812544
 1529              		.cfi_endproc
 1530              	.LFE23:
 1531              		.size	CyIntSetPriority, .-CyIntSetPriority
 1532              		.section	.text.CyIntGetPriority,"ax",%progbits
 1533              		.align	2
 1534              		.global	CyIntGetPriority
 1535              		.code	16
 1536              		.thumb_func
 1537              		.type	CyIntGetPriority, %function
 1538              	CyIntGetPriority:
 1539              	.LFB24:
2253:.\Generated_Source\PSoC4/CyLib.c **** 
2254:.\Generated_Source\PSoC4/CyLib.c **** 
2255:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2256:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2257:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2258:.\Generated_Source\PSoC4/CyLib.c **** *
2259:.\Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2260:.\Generated_Source\PSoC4/CyLib.c **** *
2261:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2262:.\Generated_Source\PSoC4/CyLib.c **** *
2263:.\Generated_Source\PSoC4/CyLib.c **** * \return
2264:.\Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2265:.\Generated_Source\PSoC4/CyLib.c **** *
2266:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2267:.\Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2268:.\Generated_Source\PSoC4/CyLib.c **** {
 1540              		.loc 1 2268 0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 68


 1541              		.cfi_startproc
 1542 0000 80B5     		push	{r7, lr}
 1543              		.cfi_def_cfa_offset 8
 1544              		.cfi_offset 7, -8
 1545              		.cfi_offset 14, -4
 1546 0002 84B0     		sub	sp, sp, #16
 1547              		.cfi_def_cfa_offset 24
 1548 0004 00AF     		add	r7, sp, #0
 1549              		.cfi_def_cfa_register 7
 1550 0006 021C     		mov	r2, r0
 1551 0008 FB1D     		add	r3, r7, #7
 1552 000a 1A70     		strb	r2, [r3]
2269:.\Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2270:.\Generated_Source\PSoC4/CyLib.c **** 
2271:.\Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1553              		.loc 1 2271 0
 1554 000c FB1D     		add	r3, r7, #7
 1555 000e 1B78     		ldrb	r3, [r3]
 1556 0010 1F2B     		cmp	r3, #31
 1557 0012 02D9     		bls	.L93
 1558              		.loc 1 2271 0 is_stmt 0 discriminator 1
 1559 0014 0020     		mov	r0, #0
 1560 0016 FFF7FEFF 		bl	CyHalt
 1561              	.L93:
2272:.\Generated_Source\PSoC4/CyLib.c **** 
2273:.\Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1562              		.loc 1 2273 0 is_stmt 1
 1563 001a FB1D     		add	r3, r7, #7
 1564 001c 1B78     		ldrb	r3, [r3]
 1565 001e 9B08     		lsr	r3, r3, #2
 1566 0020 DBB2     		uxtb	r3, r3
 1567 0022 9B00     		lsl	r3, r3, #2
 1568 0024 0C4A     		ldr	r2, .L95
 1569 0026 9446     		mov	ip, r2
 1570 0028 6344     		add	r3, r3, ip
 1571 002a 1B68     		ldr	r3, [r3]
 1572 002c FA1D     		add	r2, r7, #7
 1573 002e 1278     		ldrb	r2, [r2]
 1574 0030 0321     		mov	r1, #3
 1575 0032 0A40     		and	r2, r1
 1576 0034 D200     		lsl	r2, r2, #3
 1577 0036 0632     		add	r2, r2, #6
 1578 0038 D340     		lsr	r3, r3, r2
 1579 003a 1A1C     		mov	r2, r3
 1580 003c 0F23     		mov	r3, #15
 1581 003e FB18     		add	r3, r7, r3
 1582 0040 1A70     		strb	r2, [r3]
2274:.\Generated_Source\PSoC4/CyLib.c **** 
2275:.\Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1583              		.loc 1 2275 0
 1584 0042 0F23     		mov	r3, #15
 1585 0044 FB18     		add	r3, r7, r3
 1586 0046 1B78     		ldrb	r3, [r3]
 1587 0048 0322     		mov	r2, #3
 1588 004a 1340     		and	r3, r2
 1589 004c DBB2     		uxtb	r3, r3
2276:.\Generated_Source\PSoC4/CyLib.c **** }
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 69


 1590              		.loc 1 2276 0
 1591 004e 181C     		mov	r0, r3
 1592 0050 BD46     		mov	sp, r7
 1593 0052 04B0     		add	sp, sp, #16
 1594              		@ sp needed
 1595 0054 80BD     		pop	{r7, pc}
 1596              	.L96:
 1597 0056 C046     		.align	2
 1598              	.L95:
 1599 0058 00E400E0 		.word	-536812544
 1600              		.cfi_endproc
 1601              	.LFE24:
 1602              		.size	CyIntGetPriority, .-CyIntGetPriority
 1603              		.section	.text.CyIntEnable,"ax",%progbits
 1604              		.align	2
 1605              		.global	CyIntEnable
 1606              		.code	16
 1607              		.thumb_func
 1608              		.type	CyIntEnable, %function
 1609              	CyIntEnable:
 1610              	.LFB25:
2277:.\Generated_Source\PSoC4/CyLib.c **** 
2278:.\Generated_Source\PSoC4/CyLib.c **** 
2279:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2280:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2281:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2282:.\Generated_Source\PSoC4/CyLib.c **** *
2283:.\Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2284:.\Generated_Source\PSoC4/CyLib.c **** *
2285:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2286:.\Generated_Source\PSoC4/CyLib.c **** *
2287:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2288:.\Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2289:.\Generated_Source\PSoC4/CyLib.c **** {
 1611              		.loc 1 2289 0
 1612              		.cfi_startproc
 1613 0000 80B5     		push	{r7, lr}
 1614              		.cfi_def_cfa_offset 8
 1615              		.cfi_offset 7, -8
 1616              		.cfi_offset 14, -4
 1617 0002 82B0     		sub	sp, sp, #8
 1618              		.cfi_def_cfa_offset 16
 1619 0004 00AF     		add	r7, sp, #0
 1620              		.cfi_def_cfa_register 7
 1621 0006 021C     		mov	r2, r0
 1622 0008 FB1D     		add	r3, r7, #7
 1623 000a 1A70     		strb	r2, [r3]
2290:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1624              		.loc 1 2290 0
 1625 000c 054B     		ldr	r3, .L98
 1626 000e FA1D     		add	r2, r7, #7
 1627 0010 1278     		ldrb	r2, [r2]
 1628 0012 1F21     		mov	r1, #31
 1629 0014 0A40     		and	r2, r1
 1630 0016 0121     		mov	r1, #1
 1631 0018 9140     		lsl	r1, r1, r2
 1632 001a 0A1C     		mov	r2, r1
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 70


 1633 001c 1A60     		str	r2, [r3]
2291:.\Generated_Source\PSoC4/CyLib.c **** }
 1634              		.loc 1 2291 0
 1635 001e BD46     		mov	sp, r7
 1636 0020 02B0     		add	sp, sp, #8
 1637              		@ sp needed
 1638 0022 80BD     		pop	{r7, pc}
 1639              	.L99:
 1640              		.align	2
 1641              	.L98:
 1642 0024 00E100E0 		.word	-536813312
 1643              		.cfi_endproc
 1644              	.LFE25:
 1645              		.size	CyIntEnable, .-CyIntEnable
 1646              		.section	.text.CyIntGetState,"ax",%progbits
 1647              		.align	2
 1648              		.global	CyIntGetState
 1649              		.code	16
 1650              		.thumb_func
 1651              		.type	CyIntGetState, %function
 1652              	CyIntGetState:
 1653              	.LFB26:
2292:.\Generated_Source\PSoC4/CyLib.c **** 
2293:.\Generated_Source\PSoC4/CyLib.c **** 
2294:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2295:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2296:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2297:.\Generated_Source\PSoC4/CyLib.c **** *
2298:.\Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2299:.\Generated_Source\PSoC4/CyLib.c **** *
2300:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2301:.\Generated_Source\PSoC4/CyLib.c **** *
2302:.\Generated_Source\PSoC4/CyLib.c **** * \return
2303:.\Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2304:.\Generated_Source\PSoC4/CyLib.c **** *
2305:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2306:.\Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2307:.\Generated_Source\PSoC4/CyLib.c **** {
 1654              		.loc 1 2307 0
 1655              		.cfi_startproc
 1656 0000 80B5     		push	{r7, lr}
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 7, -8
 1659              		.cfi_offset 14, -4
 1660 0002 82B0     		sub	sp, sp, #8
 1661              		.cfi_def_cfa_offset 16
 1662 0004 00AF     		add	r7, sp, #0
 1663              		.cfi_def_cfa_register 7
 1664 0006 021C     		mov	r2, r0
 1665 0008 FB1D     		add	r3, r7, #7
 1666 000a 1A70     		strb	r2, [r3]
2308:.\Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2309:.\Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1667              		.loc 1 2309 0
 1668 000c 074B     		ldr	r3, .L102
 1669 000e 1A68     		ldr	r2, [r3]
 1670 0010 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 71


 1671 0012 1B78     		ldrb	r3, [r3]
 1672 0014 1F21     		mov	r1, #31
 1673 0016 0B40     		and	r3, r1
 1674 0018 DA40     		lsr	r2, r2, r3
 1675 001a 131C     		mov	r3, r2
 1676 001c DBB2     		uxtb	r3, r3
 1677 001e 0122     		mov	r2, #1
 1678 0020 1340     		and	r3, r2
 1679 0022 DBB2     		uxtb	r3, r3
2310:.\Generated_Source\PSoC4/CyLib.c **** }
 1680              		.loc 1 2310 0
 1681 0024 181C     		mov	r0, r3
 1682 0026 BD46     		mov	sp, r7
 1683 0028 02B0     		add	sp, sp, #8
 1684              		@ sp needed
 1685 002a 80BD     		pop	{r7, pc}
 1686              	.L103:
 1687              		.align	2
 1688              	.L102:
 1689 002c 00E100E0 		.word	-536813312
 1690              		.cfi_endproc
 1691              	.LFE26:
 1692              		.size	CyIntGetState, .-CyIntGetState
 1693              		.section	.text.CyIntDisable,"ax",%progbits
 1694              		.align	2
 1695              		.global	CyIntDisable
 1696              		.code	16
 1697              		.thumb_func
 1698              		.type	CyIntDisable, %function
 1699              	CyIntDisable:
 1700              	.LFB27:
2311:.\Generated_Source\PSoC4/CyLib.c **** 
2312:.\Generated_Source\PSoC4/CyLib.c **** 
2313:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2314:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2315:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2316:.\Generated_Source\PSoC4/CyLib.c **** *
2317:.\Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2318:.\Generated_Source\PSoC4/CyLib.c **** *
2319:.\Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2320:.\Generated_Source\PSoC4/CyLib.c **** *
2321:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2322:.\Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2323:.\Generated_Source\PSoC4/CyLib.c **** {
 1701              		.loc 1 2323 0
 1702              		.cfi_startproc
 1703 0000 80B5     		push	{r7, lr}
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 82B0     		sub	sp, sp, #8
 1708              		.cfi_def_cfa_offset 16
 1709 0004 00AF     		add	r7, sp, #0
 1710              		.cfi_def_cfa_register 7
 1711 0006 021C     		mov	r2, r0
 1712 0008 FB1D     		add	r3, r7, #7
 1713 000a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 72


2324:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1714              		.loc 1 2324 0
 1715 000c 054B     		ldr	r3, .L105
 1716 000e FA1D     		add	r2, r7, #7
 1717 0010 1278     		ldrb	r2, [r2]
 1718 0012 1F21     		mov	r1, #31
 1719 0014 0A40     		and	r2, r1
 1720 0016 0121     		mov	r1, #1
 1721 0018 9140     		lsl	r1, r1, r2
 1722 001a 0A1C     		mov	r2, r1
 1723 001c 1A60     		str	r2, [r3]
2325:.\Generated_Source\PSoC4/CyLib.c **** }
 1724              		.loc 1 2325 0
 1725 001e BD46     		mov	sp, r7
 1726 0020 02B0     		add	sp, sp, #8
 1727              		@ sp needed
 1728 0022 80BD     		pop	{r7, pc}
 1729              	.L106:
 1730              		.align	2
 1731              	.L105:
 1732 0024 80E100E0 		.word	-536813184
 1733              		.cfi_endproc
 1734              	.LFE27:
 1735              		.size	CyIntDisable, .-CyIntDisable
 1736              		.section	.text.CyIntSetPending,"ax",%progbits
 1737              		.align	2
 1738              		.global	CyIntSetPending
 1739              		.code	16
 1740              		.thumb_func
 1741              		.type	CyIntSetPending, %function
 1742              	CyIntSetPending:
 1743              	.LFB28:
2326:.\Generated_Source\PSoC4/CyLib.c **** 
2327:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2328:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2329:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2330:.\Generated_Source\PSoC4/CyLib.c **** *
2331:.\Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2332:.\Generated_Source\PSoC4/CyLib.c **** *
2333:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2334:.\Generated_Source\PSoC4/CyLib.c **** *
2335:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2336:.\Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2337:.\Generated_Source\PSoC4/CyLib.c **** {
 1744              		.loc 1 2337 0
 1745              		.cfi_startproc
 1746 0000 80B5     		push	{r7, lr}
 1747              		.cfi_def_cfa_offset 8
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 82B0     		sub	sp, sp, #8
 1751              		.cfi_def_cfa_offset 16
 1752 0004 00AF     		add	r7, sp, #0
 1753              		.cfi_def_cfa_register 7
 1754 0006 021C     		mov	r2, r0
 1755 0008 FB1D     		add	r3, r7, #7
 1756 000a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 73


2338:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1757              		.loc 1 2338 0
 1758 000c 054B     		ldr	r3, .L108
 1759 000e FA1D     		add	r2, r7, #7
 1760 0010 1278     		ldrb	r2, [r2]
 1761 0012 1F21     		mov	r1, #31
 1762 0014 0A40     		and	r2, r1
 1763 0016 0121     		mov	r1, #1
 1764 0018 9140     		lsl	r1, r1, r2
 1765 001a 0A1C     		mov	r2, r1
 1766 001c 1A60     		str	r2, [r3]
2339:.\Generated_Source\PSoC4/CyLib.c **** }
 1767              		.loc 1 2339 0
 1768 001e BD46     		mov	sp, r7
 1769 0020 02B0     		add	sp, sp, #8
 1770              		@ sp needed
 1771 0022 80BD     		pop	{r7, pc}
 1772              	.L109:
 1773              		.align	2
 1774              	.L108:
 1775 0024 00E200E0 		.word	-536813056
 1776              		.cfi_endproc
 1777              	.LFE28:
 1778              		.size	CyIntSetPending, .-CyIntSetPending
 1779              		.section	.text.CyIntClearPending,"ax",%progbits
 1780              		.align	2
 1781              		.global	CyIntClearPending
 1782              		.code	16
 1783              		.thumb_func
 1784              		.type	CyIntClearPending, %function
 1785              	CyIntClearPending:
 1786              	.LFB29:
2340:.\Generated_Source\PSoC4/CyLib.c **** 
2341:.\Generated_Source\PSoC4/CyLib.c **** 
2342:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2343:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2344:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2345:.\Generated_Source\PSoC4/CyLib.c **** *
2346:.\Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2347:.\Generated_Source\PSoC4/CyLib.c **** *
2348:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2349:.\Generated_Source\PSoC4/CyLib.c **** *
2350:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2351:.\Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2352:.\Generated_Source\PSoC4/CyLib.c **** {
 1787              		.loc 1 2352 0
 1788              		.cfi_startproc
 1789 0000 80B5     		push	{r7, lr}
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 7, -8
 1792              		.cfi_offset 14, -4
 1793 0002 82B0     		sub	sp, sp, #8
 1794              		.cfi_def_cfa_offset 16
 1795 0004 00AF     		add	r7, sp, #0
 1796              		.cfi_def_cfa_register 7
 1797 0006 021C     		mov	r2, r0
 1798 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 74


 1799 000a 1A70     		strb	r2, [r3]
2353:.\Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1800              		.loc 1 2353 0
 1801 000c 054B     		ldr	r3, .L111
 1802 000e FA1D     		add	r2, r7, #7
 1803 0010 1278     		ldrb	r2, [r2]
 1804 0012 1F21     		mov	r1, #31
 1805 0014 0A40     		and	r2, r1
 1806 0016 0121     		mov	r1, #1
 1807 0018 9140     		lsl	r1, r1, r2
 1808 001a 0A1C     		mov	r2, r1
 1809 001c 1A60     		str	r2, [r3]
2354:.\Generated_Source\PSoC4/CyLib.c **** }
 1810              		.loc 1 2354 0
 1811 001e BD46     		mov	sp, r7
 1812 0020 02B0     		add	sp, sp, #8
 1813              		@ sp needed
 1814 0022 80BD     		pop	{r7, pc}
 1815              	.L112:
 1816              		.align	2
 1817              	.L111:
 1818 0024 80E200E0 		.word	-536812928
 1819              		.cfi_endproc
 1820              	.LFE29:
 1821              		.size	CyIntClearPending, .-CyIntClearPending
 1822              		.section	.text.CyHalt,"ax",%progbits
 1823              		.align	2
 1824              		.global	CyHalt
 1825              		.code	16
 1826              		.thumb_func
 1827              		.type	CyHalt, %function
 1828              	CyHalt:
 1829              	.LFB30:
2355:.\Generated_Source\PSoC4/CyLib.c **** 
2356:.\Generated_Source\PSoC4/CyLib.c **** 
2357:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2358:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2359:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2360:.\Generated_Source\PSoC4/CyLib.c **** *
2361:.\Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2362:.\Generated_Source\PSoC4/CyLib.c **** *
2363:.\Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2364:.\Generated_Source\PSoC4/CyLib.c **** *
2365:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2366:.\Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2367:.\Generated_Source\PSoC4/CyLib.c **** {
 1830              		.loc 1 2367 0
 1831              		.cfi_startproc
 1832 0000 80B5     		push	{r7, lr}
 1833              		.cfi_def_cfa_offset 8
 1834              		.cfi_offset 7, -8
 1835              		.cfi_offset 14, -4
 1836 0002 82B0     		sub	sp, sp, #8
 1837              		.cfi_def_cfa_offset 16
 1838 0004 00AF     		add	r7, sp, #0
 1839              		.cfi_def_cfa_register 7
 1840 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 75


 1841 0008 FB1D     		add	r3, r7, #7
 1842 000a 1A70     		strb	r2, [r3]
2368:.\Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2369:.\Generated_Source\PSoC4/CyLib.c ****     {
2370:.\Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2371:.\Generated_Source\PSoC4/CyLib.c ****     }
2372:.\Generated_Source\PSoC4/CyLib.c **** 
2373:.\Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2374:.\Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2375:.\Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2376:.\Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1843              		.loc 1 2376 0
 1844              	@ 2376 ".\Generated_Source\PSoC4\CyLib.c" 1
 1845 000c 01BE     		    bkpt    1
 1846              	@ 0 "" 2
2377:.\Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2378:.\Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2379:.\Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2380:.\Generated_Source\PSoC4/CyLib.c **** }
 1847              		.loc 1 2380 0
 1848              		.code	16
 1849 000e BD46     		mov	sp, r7
 1850 0010 02B0     		add	sp, sp, #8
 1851              		@ sp needed
 1852 0012 80BD     		pop	{r7, pc}
 1853              		.cfi_endproc
 1854              	.LFE30:
 1855              		.size	CyHalt, .-CyHalt
 1856              		.section	.text.CySoftwareReset,"ax",%progbits
 1857              		.align	2
 1858              		.global	CySoftwareReset
 1859              		.code	16
 1860              		.thumb_func
 1861              		.type	CySoftwareReset, %function
 1862              	CySoftwareReset:
 1863              	.LFB31:
2381:.\Generated_Source\PSoC4/CyLib.c **** 
2382:.\Generated_Source\PSoC4/CyLib.c **** 
2383:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2384:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2385:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2386:.\Generated_Source\PSoC4/CyLib.c **** *
2387:.\Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2388:.\Generated_Source\PSoC4/CyLib.c **** *
2389:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2390:.\Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2391:.\Generated_Source\PSoC4/CyLib.c **** {
 1864              		.loc 1 2391 0
 1865              		.cfi_startproc
 1866 0000 80B5     		push	{r7, lr}
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 00AF     		add	r7, sp, #0
 1871              		.cfi_def_cfa_register 7
2392:.\Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2393:.\Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 76


2394:.\Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2395:.\Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2396:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1872              		.loc 1 2396 0
 1873 0004 044B     		ldr	r3, .L115
 1874 0006 044A     		ldr	r2, .L115
 1875 0008 1268     		ldr	r2, [r2]
 1876 000a 1204     		lsl	r2, r2, #16
 1877 000c 120C     		lsr	r2, r2, #16
2397:.\Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1878              		.loc 1 2397 0
 1879 000e 0349     		ldr	r1, .L115+4
 1880 0010 0A43     		orr	r2, r1
2396:.\Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1881              		.loc 1 2396 0
 1882 0012 1A60     		str	r2, [r3]
2398:.\Generated_Source\PSoC4/CyLib.c **** }
 1883              		.loc 1 2398 0
 1884 0014 BD46     		mov	sp, r7
 1885              		@ sp needed
 1886 0016 80BD     		pop	{r7, pc}
 1887              	.L116:
 1888              		.align	2
 1889              	.L115:
 1890 0018 0CED00E0 		.word	-536810228
 1891 001c 0400FA05 		.word	100270084
 1892              		.cfi_endproc
 1893              	.LFE31:
 1894              		.size	CySoftwareReset, .-CySoftwareReset
 1895              		.section	.text.CyDelay,"ax",%progbits
 1896              		.align	2
 1897              		.global	CyDelay
 1898              		.code	16
 1899              		.thumb_func
 1900              		.type	CyDelay, %function
 1901              	CyDelay:
 1902              	.LFB32:
2399:.\Generated_Source\PSoC4/CyLib.c **** 
2400:.\Generated_Source\PSoC4/CyLib.c **** 
2401:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2402:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2403:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2404:.\Generated_Source\PSoC4/CyLib.c **** *
2405:.\Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2406:.\Generated_Source\PSoC4/CyLib.c **** *
2407:.\Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2408:.\Generated_Source\PSoC4/CyLib.c **** *
2409:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2410:.\Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2411:.\Generated_Source\PSoC4/CyLib.c **** {
 1903              		.loc 1 2411 0
 1904              		.cfi_startproc
 1905 0000 80B5     		push	{r7, lr}
 1906              		.cfi_def_cfa_offset 8
 1907              		.cfi_offset 7, -8
 1908              		.cfi_offset 14, -4
 1909 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 77


 1910              		.cfi_def_cfa_offset 16
 1911 0004 00AF     		add	r7, sp, #0
 1912              		.cfi_def_cfa_register 7
 1913 0006 7860     		str	r0, [r7, #4]
2412:.\Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1914              		.loc 1 2412 0
 1915 0008 09E0     		b	.L118
 1916              	.L119:
2413:.\Generated_Source\PSoC4/CyLib.c ****     {
2414:.\Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2415:.\Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2416:.\Generated_Source\PSoC4/CyLib.c ****          */
2417:.\Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1917              		.loc 1 2417 0
 1918 000a 0C4B     		ldr	r3, .L120
 1919 000c 1B68     		ldr	r3, [r3]
 1920 000e 181C     		mov	r0, r3
 1921 0010 FFF7FEFF 		bl	CyDelayCycles
2418:.\Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1922              		.loc 1 2418 0
 1923 0014 7B68     		ldr	r3, [r7, #4]
 1924 0016 0A4A     		ldr	r2, .L120+4
 1925 0018 9446     		mov	ip, r2
 1926 001a 6344     		add	r3, r3, ip
 1927 001c 7B60     		str	r3, [r7, #4]
 1928              	.L118:
2412:.\Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1929              		.loc 1 2412 0
 1930 001e 7A68     		ldr	r2, [r7, #4]
 1931 0020 8023     		mov	r3, #128
 1932 0022 1B02     		lsl	r3, r3, #8
 1933 0024 9A42     		cmp	r2, r3
 1934 0026 F0D8     		bhi	.L119
2419:.\Generated_Source\PSoC4/CyLib.c ****     }
2420:.\Generated_Source\PSoC4/CyLib.c **** 
2421:.\Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1935              		.loc 1 2421 0
 1936 0028 064B     		ldr	r3, .L120+8
 1937 002a 1B68     		ldr	r3, [r3]
 1938 002c 7A68     		ldr	r2, [r7, #4]
 1939 002e 5343     		mul	r3, r2
 1940 0030 181C     		mov	r0, r3
 1941 0032 FFF7FEFF 		bl	CyDelayCycles
2422:.\Generated_Source\PSoC4/CyLib.c **** }
 1942              		.loc 1 2422 0
 1943 0036 BD46     		mov	sp, r7
 1944 0038 02B0     		add	sp, sp, #8
 1945              		@ sp needed
 1946 003a 80BD     		pop	{r7, pc}
 1947              	.L121:
 1948              		.align	2
 1949              	.L120:
 1950 003c 00000000 		.word	cydelay32kMs
 1951 0040 0080FFFF 		.word	-32768
 1952 0044 00000000 		.word	cydelayFreqKhz
 1953              		.cfi_endproc
 1954              	.LFE32:
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 78


 1955              		.size	CyDelay, .-CyDelay
 1956              		.section	.text.CyDelayUs,"ax",%progbits
 1957              		.align	2
 1958              		.global	CyDelayUs
 1959              		.code	16
 1960              		.thumb_func
 1961              		.type	CyDelayUs, %function
 1962              	CyDelayUs:
 1963              	.LFB33:
2423:.\Generated_Source\PSoC4/CyLib.c **** 
2424:.\Generated_Source\PSoC4/CyLib.c **** 
2425:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2426:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2427:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2428:.\Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2429:.\Generated_Source\PSoC4/CyLib.c **** *
2430:.\Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2431:.\Generated_Source\PSoC4/CyLib.c **** *
2432:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2433:.\Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2434:.\Generated_Source\PSoC4/CyLib.c **** {
 1964              		.loc 1 2434 0
 1965              		.cfi_startproc
 1966 0000 80B5     		push	{r7, lr}
 1967              		.cfi_def_cfa_offset 8
 1968              		.cfi_offset 7, -8
 1969              		.cfi_offset 14, -4
 1970 0002 82B0     		sub	sp, sp, #8
 1971              		.cfi_def_cfa_offset 16
 1972 0004 00AF     		add	r7, sp, #0
 1973              		.cfi_def_cfa_register 7
 1974 0006 021C     		mov	r2, r0
 1975 0008 BB1D     		add	r3, r7, #6
 1976 000a 1A80     		strh	r2, [r3]
2435:.\Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1977              		.loc 1 2435 0
 1978 000c BB1D     		add	r3, r7, #6
 1979 000e 1B88     		ldrh	r3, [r3]
 1980 0010 044A     		ldr	r2, .L123
 1981 0012 1278     		ldrb	r2, [r2]
 1982 0014 5343     		mul	r3, r2
 1983 0016 181C     		mov	r0, r3
 1984 0018 FFF7FEFF 		bl	CyDelayCycles
2436:.\Generated_Source\PSoC4/CyLib.c **** }
 1985              		.loc 1 2436 0
 1986 001c BD46     		mov	sp, r7
 1987 001e 02B0     		add	sp, sp, #8
 1988              		@ sp needed
 1989 0020 80BD     		pop	{r7, pc}
 1990              	.L124:
 1991 0022 C046     		.align	2
 1992              	.L123:
 1993 0024 00000000 		.word	cydelayFreqMhz
 1994              		.cfi_endproc
 1995              	.LFE33:
 1996              		.size	CyDelayUs, .-CyDelayUs
 1997              		.global	__aeabi_uidiv
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 79


 1998              		.section	.text.CyDelayFreq,"ax",%progbits
 1999              		.align	2
 2000              		.global	CyDelayFreq
 2001              		.code	16
 2002              		.thumb_func
 2003              		.type	CyDelayFreq, %function
 2004              	CyDelayFreq:
 2005              	.LFB34:
2437:.\Generated_Source\PSoC4/CyLib.c **** 
2438:.\Generated_Source\PSoC4/CyLib.c **** 
2439:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2440:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2441:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2442:.\Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2443:.\Generated_Source\PSoC4/CyLib.c **** *
2444:.\Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2445:.\Generated_Source\PSoC4/CyLib.c **** *
2446:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2447:.\Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2448:.\Generated_Source\PSoC4/CyLib.c **** {
 2006              		.loc 1 2448 0
 2007              		.cfi_startproc
 2008 0000 80B5     		push	{r7, lr}
 2009              		.cfi_def_cfa_offset 8
 2010              		.cfi_offset 7, -8
 2011              		.cfi_offset 14, -4
 2012 0002 82B0     		sub	sp, sp, #8
 2013              		.cfi_def_cfa_offset 16
 2014 0004 00AF     		add	r7, sp, #0
 2015              		.cfi_def_cfa_register 7
 2016 0006 7860     		str	r0, [r7, #4]
2449:.\Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 2017              		.loc 1 2449 0
 2018 0008 7B68     		ldr	r3, [r7, #4]
 2019 000a 002B     		cmp	r3, #0
 2020 000c 03D0     		beq	.L126
2450:.\Generated_Source\PSoC4/CyLib.c ****     {
2451:.\Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 2021              		.loc 1 2451 0
 2022 000e 154B     		ldr	r3, .L128
 2023 0010 7A68     		ldr	r2, [r7, #4]
 2024 0012 1A60     		str	r2, [r3]
 2025 0014 02E0     		b	.L127
 2026              	.L126:
2452:.\Generated_Source\PSoC4/CyLib.c ****     }
2453:.\Generated_Source\PSoC4/CyLib.c ****     else
2454:.\Generated_Source\PSoC4/CyLib.c ****     {
2455:.\Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 2027              		.loc 1 2455 0
 2028 0016 134B     		ldr	r3, .L128
 2029 0018 134A     		ldr	r2, .L128+4
 2030 001a 1A60     		str	r2, [r3]
 2031              	.L127:
2456:.\Generated_Source\PSoC4/CyLib.c ****     }
2457:.\Generated_Source\PSoC4/CyLib.c **** 
2458:.\Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 2032              		.loc 1 2458 0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 80


 2033 001c 114B     		ldr	r3, .L128
 2034 001e 1B68     		ldr	r3, [r3]
 2035 0020 124A     		ldr	r2, .L128+8
 2036 0022 9446     		mov	ip, r2
 2037 0024 6344     		add	r3, r3, ip
 2038 0026 181C     		mov	r0, r3
 2039 0028 1149     		ldr	r1, .L128+12
 2040 002a FFF7FEFF 		bl	__aeabi_uidiv
 2041 002e 031C     		mov	r3, r0
 2042 0030 DAB2     		uxtb	r2, r3
 2043 0032 104B     		ldr	r3, .L128+16
 2044 0034 1A70     		strb	r2, [r3]
2459:.\Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 2045              		.loc 1 2459 0
 2046 0036 0B4B     		ldr	r3, .L128
 2047 0038 1B68     		ldr	r3, [r3]
 2048 003a 0F4A     		ldr	r2, .L128+20
 2049 003c 9446     		mov	ip, r2
 2050 003e 6344     		add	r3, r3, ip
 2051 0040 181C     		mov	r0, r3
 2052 0042 FA23     		mov	r3, #250
 2053 0044 9900     		lsl	r1, r3, #2
 2054 0046 FFF7FEFF 		bl	__aeabi_uidiv
 2055 004a 031C     		mov	r3, r0
 2056 004c 1A1C     		mov	r2, r3
 2057 004e 0B4B     		ldr	r3, .L128+24
 2058 0050 1A60     		str	r2, [r3]
2460:.\Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 2059              		.loc 1 2460 0
 2060 0052 0A4B     		ldr	r3, .L128+24
 2061 0054 1B68     		ldr	r3, [r3]
 2062 0056 DA03     		lsl	r2, r3, #15
 2063 0058 094B     		ldr	r3, .L128+28
 2064 005a 1A60     		str	r2, [r3]
2461:.\Generated_Source\PSoC4/CyLib.c **** }
 2065              		.loc 1 2461 0
 2066 005c BD46     		mov	sp, r7
 2067 005e 02B0     		add	sp, sp, #8
 2068              		@ sp needed
 2069 0060 80BD     		pop	{r7, pc}
 2070              	.L129:
 2071 0062 C046     		.align	2
 2072              	.L128:
 2073 0064 00000000 		.word	cydelayFreqHz
 2074 0068 006CDC02 		.word	48000000
 2075 006c 3F420F00 		.word	999999
 2076 0070 40420F00 		.word	1000000
 2077 0074 00000000 		.word	cydelayFreqMhz
 2078 0078 E7030000 		.word	999
 2079 007c 00000000 		.word	cydelayFreqKhz
 2080 0080 00000000 		.word	cydelay32kMs
 2081              		.cfi_endproc
 2082              	.LFE34:
 2083              		.size	CyDelayFreq, .-CyDelayFreq
 2084              		.section	.text.CySysTickStart,"ax",%progbits
 2085              		.align	2
 2086              		.global	CySysTickStart
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 81


 2087              		.code	16
 2088              		.thumb_func
 2089              		.type	CySysTickStart, %function
 2090              	CySysTickStart:
 2091              	.LFB35:
2462:.\Generated_Source\PSoC4/CyLib.c **** 
2463:.\Generated_Source\PSoC4/CyLib.c **** 
2464:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2465:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2466:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2467:.\Generated_Source\PSoC4/CyLib.c **** *
2468:.\Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2469:.\Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2470:.\Generated_Source\PSoC4/CyLib.c **** *
2471:.\Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2472:.\Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2473:.\Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2474:.\Generated_Source\PSoC4/CyLib.c **** *
2475:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2476:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2477:.\Generated_Source\PSoC4/CyLib.c **** *
2478:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2479:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2480:.\Generated_Source\PSoC4/CyLib.c **** {
 2092              		.loc 1 2480 0
 2093              		.cfi_startproc
 2094 0000 80B5     		push	{r7, lr}
 2095              		.cfi_def_cfa_offset 8
 2096              		.cfi_offset 7, -8
 2097              		.cfi_offset 14, -4
 2098 0002 00AF     		add	r7, sp, #0
 2099              		.cfi_def_cfa_register 7
2481:.\Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 2100              		.loc 1 2481 0
 2101 0004 064B     		ldr	r3, .L132
 2102 0006 1B68     		ldr	r3, [r3]
 2103 0008 002B     		cmp	r3, #0
 2104 000a 04D1     		bne	.L131
2482:.\Generated_Source\PSoC4/CyLib.c ****     {
2483:.\Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2105              		.loc 1 2483 0
 2106 000c FFF7FEFF 		bl	CySysTickInit
2484:.\Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2107              		.loc 1 2484 0
 2108 0010 034B     		ldr	r3, .L132
 2109 0012 0122     		mov	r2, #1
 2110 0014 1A60     		str	r2, [r3]
 2111              	.L131:
2485:.\Generated_Source\PSoC4/CyLib.c ****     }
2486:.\Generated_Source\PSoC4/CyLib.c **** 
2487:.\Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2112              		.loc 1 2487 0
 2113 0016 FFF7FEFF 		bl	CySysTickEnable
2488:.\Generated_Source\PSoC4/CyLib.c **** }
 2114              		.loc 1 2488 0
 2115 001a BD46     		mov	sp, r7
 2116              		@ sp needed
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 82


 2117 001c 80BD     		pop	{r7, pc}
 2118              	.L133:
 2119 001e C046     		.align	2
 2120              	.L132:
 2121 0020 00000000 		.word	CySysTickInitVar
 2122              		.cfi_endproc
 2123              	.LFE35:
 2124              		.size	CySysTickStart, .-CySysTickStart
 2125              		.section	.text.CySysTickInit,"ax",%progbits
 2126              		.align	2
 2127              		.global	CySysTickInit
 2128              		.code	16
 2129              		.thumb_func
 2130              		.type	CySysTickInit, %function
 2131              	CySysTickInit:
 2132              	.LFB36:
2489:.\Generated_Source\PSoC4/CyLib.c **** 
2490:.\Generated_Source\PSoC4/CyLib.c **** 
2491:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2492:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2493:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2494:.\Generated_Source\PSoC4/CyLib.c **** *
2495:.\Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2496:.\Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2497:.\Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2498:.\Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2499:.\Generated_Source\PSoC4/CyLib.c **** *
2500:.\Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2501:.\Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2502:.\Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2503:.\Generated_Source\PSoC4/CyLib.c **** *
2504:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2505:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2506:.\Generated_Source\PSoC4/CyLib.c **** *
2507:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2508:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2509:.\Generated_Source\PSoC4/CyLib.c **** {
 2133              		.loc 1 2509 0
 2134              		.cfi_startproc
 2135 0000 80B5     		push	{r7, lr}
 2136              		.cfi_def_cfa_offset 8
 2137              		.cfi_offset 7, -8
 2138              		.cfi_offset 14, -4
 2139 0002 82B0     		sub	sp, sp, #8
 2140              		.cfi_def_cfa_offset 16
 2141 0004 00AF     		add	r7, sp, #0
 2142              		.cfi_def_cfa_register 7
2510:.\Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2511:.\Generated_Source\PSoC4/CyLib.c **** 
2512:.\Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2143              		.loc 1 2512 0
 2144 0006 0023     		mov	r3, #0
 2145 0008 7B60     		str	r3, [r7, #4]
 2146 000a 07E0     		b	.L135
 2147              	.L136:
2513:.\Generated_Source\PSoC4/CyLib.c ****     {
2514:.\Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 83


 2148              		.loc 1 2514 0 discriminator 3
 2149 000c 124B     		ldr	r3, .L137
 2150 000e 7A68     		ldr	r2, [r7, #4]
 2151 0010 9200     		lsl	r2, r2, #2
 2152 0012 0021     		mov	r1, #0
 2153 0014 D150     		str	r1, [r2, r3]
2512:.\Generated_Source\PSoC4/CyLib.c ****     {
 2154              		.loc 1 2512 0 discriminator 3
 2155 0016 7B68     		ldr	r3, [r7, #4]
 2156 0018 0133     		add	r3, r3, #1
 2157 001a 7B60     		str	r3, [r7, #4]
 2158              	.L135:
2512:.\Generated_Source\PSoC4/CyLib.c ****     {
 2159              		.loc 1 2512 0 is_stmt 0 discriminator 1
 2160 001c 7B68     		ldr	r3, [r7, #4]
 2161 001e 042B     		cmp	r3, #4
 2162 0020 F4D9     		bls	.L136
2515:.\Generated_Source\PSoC4/CyLib.c ****     }
2516:.\Generated_Source\PSoC4/CyLib.c **** 
2517:.\Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2163              		.loc 1 2517 0 is_stmt 1
 2164 0022 0E4B     		ldr	r3, .L137+4
 2165 0024 0F20     		mov	r0, #15
 2166 0026 191C     		mov	r1, r3
 2167 0028 FFF7FEFF 		bl	CyIntSetSysVector
2518:.\Generated_Source\PSoC4/CyLib.c **** 
2519:.\Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2520:.\Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
 2168              		.loc 1 2520 0
 2169 002c 0120     		mov	r0, #1
 2170 002e FFF7FEFF 		bl	CySysTickSetClockSource
2521:.\Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2522:.\Generated_Source\PSoC4/CyLib.c **** 
2523:.\Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2171              		.loc 1 2523 0
 2172 0032 0B4B     		ldr	r3, .L137+8
 2173 0034 1B68     		ldr	r3, [r3]
 2174 0036 181C     		mov	r0, r3
 2175 0038 FA23     		mov	r3, #250
 2176 003a 9900     		lsl	r1, r3, #2
 2177 003c FFF7FEFF 		bl	__aeabi_uidiv
 2178 0040 031C     		mov	r3, r0
 2179 0042 181C     		mov	r0, r3
 2180 0044 FFF7FEFF 		bl	CySysTickSetReload
2524:.\Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 2181              		.loc 1 2524 0
 2182 0048 FFF7FEFF 		bl	CySysTickClear
2525:.\Generated_Source\PSoC4/CyLib.c ****     CyIntEnable(CY_INT_SYSTICK_IRQN);
 2183              		.loc 1 2525 0
 2184 004c 0F20     		mov	r0, #15
 2185 004e FFF7FEFF 		bl	CyIntEnable
2526:.\Generated_Source\PSoC4/CyLib.c **** }
 2186              		.loc 1 2526 0
 2187 0052 BD46     		mov	sp, r7
 2188 0054 02B0     		add	sp, sp, #8
 2189              		@ sp needed
 2190 0056 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 84


 2191              	.L138:
 2192              		.align	2
 2193              	.L137:
 2194 0058 00000000 		.word	CySysTickCallbacks
 2195 005c 00000000 		.word	CySysTickServiceCallbacks
 2196 0060 00000000 		.word	cydelayFreqHz
 2197              		.cfi_endproc
 2198              	.LFE36:
 2199              		.size	CySysTickInit, .-CySysTickInit
 2200              		.section	.text.CySysTickEnable,"ax",%progbits
 2201              		.align	2
 2202              		.global	CySysTickEnable
 2203              		.code	16
 2204              		.thumb_func
 2205              		.type	CySysTickEnable, %function
 2206              	CySysTickEnable:
 2207              	.LFB37:
2527:.\Generated_Source\PSoC4/CyLib.c **** 
2528:.\Generated_Source\PSoC4/CyLib.c **** 
2529:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2530:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2531:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2532:.\Generated_Source\PSoC4/CyLib.c **** *
2533:.\Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2534:.\Generated_Source\PSoC4/CyLib.c **** *
2535:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2536:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2537:.\Generated_Source\PSoC4/CyLib.c **** *
2538:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2539:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2540:.\Generated_Source\PSoC4/CyLib.c **** {
 2208              		.loc 1 2540 0
 2209              		.cfi_startproc
 2210 0000 80B5     		push	{r7, lr}
 2211              		.cfi_def_cfa_offset 8
 2212              		.cfi_offset 7, -8
 2213              		.cfi_offset 14, -4
 2214 0002 00AF     		add	r7, sp, #0
 2215              		.cfi_def_cfa_register 7
2541:.\Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2216              		.loc 1 2541 0
 2217 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
2542:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2218              		.loc 1 2542 0
 2219 0008 034B     		ldr	r3, .L140
 2220 000a 034A     		ldr	r2, .L140
 2221 000c 1268     		ldr	r2, [r2]
 2222 000e 0121     		mov	r1, #1
 2223 0010 0A43     		orr	r2, r1
 2224 0012 1A60     		str	r2, [r3]
2543:.\Generated_Source\PSoC4/CyLib.c **** }
 2225              		.loc 1 2543 0
 2226 0014 BD46     		mov	sp, r7
 2227              		@ sp needed
 2228 0016 80BD     		pop	{r7, pc}
 2229              	.L141:
 2230              		.align	2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 85


 2231              	.L140:
 2232 0018 10E000E0 		.word	-536813552
 2233              		.cfi_endproc
 2234              	.LFE37:
 2235              		.size	CySysTickEnable, .-CySysTickEnable
 2236              		.section	.text.CySysTickStop,"ax",%progbits
 2237              		.align	2
 2238              		.global	CySysTickStop
 2239              		.code	16
 2240              		.thumb_func
 2241              		.type	CySysTickStop, %function
 2242              	CySysTickStop:
 2243              	.LFB38:
2544:.\Generated_Source\PSoC4/CyLib.c **** 
2545:.\Generated_Source\PSoC4/CyLib.c **** 
2546:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2547:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2548:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2549:.\Generated_Source\PSoC4/CyLib.c **** *
2550:.\Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2551:.\Generated_Source\PSoC4/CyLib.c **** *
2552:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2553:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2554:.\Generated_Source\PSoC4/CyLib.c **** *
2555:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2556:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2557:.\Generated_Source\PSoC4/CyLib.c **** {
 2244              		.loc 1 2557 0
 2245              		.cfi_startproc
 2246 0000 80B5     		push	{r7, lr}
 2247              		.cfi_def_cfa_offset 8
 2248              		.cfi_offset 7, -8
 2249              		.cfi_offset 14, -4
 2250 0002 00AF     		add	r7, sp, #0
 2251              		.cfi_def_cfa_register 7
2558:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2252              		.loc 1 2558 0
 2253 0004 034B     		ldr	r3, .L143
 2254 0006 034A     		ldr	r2, .L143
 2255 0008 1268     		ldr	r2, [r2]
 2256 000a 0121     		mov	r1, #1
 2257 000c 8A43     		bic	r2, r1
 2258 000e 1A60     		str	r2, [r3]
2559:.\Generated_Source\PSoC4/CyLib.c **** }
 2259              		.loc 1 2559 0
 2260 0010 BD46     		mov	sp, r7
 2261              		@ sp needed
 2262 0012 80BD     		pop	{r7, pc}
 2263              	.L144:
 2264              		.align	2
 2265              	.L143:
 2266 0014 10E000E0 		.word	-536813552
 2267              		.cfi_endproc
 2268              	.LFE38:
 2269              		.size	CySysTickStop, .-CySysTickStop
 2270              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2271              		.align	2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 86


 2272              		.global	CySysTickEnableInterrupt
 2273              		.code	16
 2274              		.thumb_func
 2275              		.type	CySysTickEnableInterrupt, %function
 2276              	CySysTickEnableInterrupt:
 2277              	.LFB39:
2560:.\Generated_Source\PSoC4/CyLib.c **** 
2561:.\Generated_Source\PSoC4/CyLib.c **** 
2562:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2563:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2564:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2565:.\Generated_Source\PSoC4/CyLib.c **** *
2566:.\Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2567:.\Generated_Source\PSoC4/CyLib.c **** *
2568:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2569:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2570:.\Generated_Source\PSoC4/CyLib.c **** *
2571:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2572:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2573:.\Generated_Source\PSoC4/CyLib.c **** {
 2278              		.loc 1 2573 0
 2279              		.cfi_startproc
 2280 0000 80B5     		push	{r7, lr}
 2281              		.cfi_def_cfa_offset 8
 2282              		.cfi_offset 7, -8
 2283              		.cfi_offset 14, -4
 2284 0002 00AF     		add	r7, sp, #0
 2285              		.cfi_def_cfa_register 7
2574:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2286              		.loc 1 2574 0
 2287 0004 034B     		ldr	r3, .L146
 2288 0006 034A     		ldr	r2, .L146
 2289 0008 1268     		ldr	r2, [r2]
 2290 000a 0221     		mov	r1, #2
 2291 000c 0A43     		orr	r2, r1
 2292 000e 1A60     		str	r2, [r3]
2575:.\Generated_Source\PSoC4/CyLib.c **** }
 2293              		.loc 1 2575 0
 2294 0010 BD46     		mov	sp, r7
 2295              		@ sp needed
 2296 0012 80BD     		pop	{r7, pc}
 2297              	.L147:
 2298              		.align	2
 2299              	.L146:
 2300 0014 10E000E0 		.word	-536813552
 2301              		.cfi_endproc
 2302              	.LFE39:
 2303              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2304              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 2305              		.align	2
 2306              		.global	CySysTickDisableInterrupt
 2307              		.code	16
 2308              		.thumb_func
 2309              		.type	CySysTickDisableInterrupt, %function
 2310              	CySysTickDisableInterrupt:
 2311              	.LFB40:
2576:.\Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 87


2577:.\Generated_Source\PSoC4/CyLib.c **** 
2578:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2579:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2580:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2581:.\Generated_Source\PSoC4/CyLib.c **** *
2582:.\Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2583:.\Generated_Source\PSoC4/CyLib.c **** *
2584:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2585:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2586:.\Generated_Source\PSoC4/CyLib.c **** *
2587:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2588:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2589:.\Generated_Source\PSoC4/CyLib.c **** {
 2312              		.loc 1 2589 0
 2313              		.cfi_startproc
 2314 0000 80B5     		push	{r7, lr}
 2315              		.cfi_def_cfa_offset 8
 2316              		.cfi_offset 7, -8
 2317              		.cfi_offset 14, -4
 2318 0002 00AF     		add	r7, sp, #0
 2319              		.cfi_def_cfa_register 7
2590:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2320              		.loc 1 2590 0
 2321 0004 034B     		ldr	r3, .L149
 2322 0006 034A     		ldr	r2, .L149
 2323 0008 1268     		ldr	r2, [r2]
 2324 000a 0221     		mov	r1, #2
 2325 000c 8A43     		bic	r2, r1
 2326 000e 1A60     		str	r2, [r3]
2591:.\Generated_Source\PSoC4/CyLib.c **** }
 2327              		.loc 1 2591 0
 2328 0010 BD46     		mov	sp, r7
 2329              		@ sp needed
 2330 0012 80BD     		pop	{r7, pc}
 2331              	.L150:
 2332              		.align	2
 2333              	.L149:
 2334 0014 10E000E0 		.word	-536813552
 2335              		.cfi_endproc
 2336              	.LFE40:
 2337              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2338              		.section	.text.CySysTickSetReload,"ax",%progbits
 2339              		.align	2
 2340              		.global	CySysTickSetReload
 2341              		.code	16
 2342              		.thumb_func
 2343              		.type	CySysTickSetReload, %function
 2344              	CySysTickSetReload:
 2345              	.LFB41:
2592:.\Generated_Source\PSoC4/CyLib.c **** 
2593:.\Generated_Source\PSoC4/CyLib.c **** 
2594:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2595:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2596:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2597:.\Generated_Source\PSoC4/CyLib.c **** *
2598:.\Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2599:.\Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 88


2600:.\Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2601:.\Generated_Source\PSoC4/CyLib.c **** *
2602:.\Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2603:.\Generated_Source\PSoC4/CyLib.c **** *
2604:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2605:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2606:.\Generated_Source\PSoC4/CyLib.c **** {
 2346              		.loc 1 2606 0
 2347              		.cfi_startproc
 2348 0000 80B5     		push	{r7, lr}
 2349              		.cfi_def_cfa_offset 8
 2350              		.cfi_offset 7, -8
 2351              		.cfi_offset 14, -4
 2352 0002 82B0     		sub	sp, sp, #8
 2353              		.cfi_def_cfa_offset 16
 2354 0004 00AF     		add	r7, sp, #0
 2355              		.cfi_def_cfa_register 7
 2356 0006 7860     		str	r0, [r7, #4]
2607:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2357              		.loc 1 2607 0
 2358 0008 034B     		ldr	r3, .L152
 2359 000a 7A68     		ldr	r2, [r7, #4]
 2360 000c 1202     		lsl	r2, r2, #8
 2361 000e 120A     		lsr	r2, r2, #8
 2362 0010 1A60     		str	r2, [r3]
2608:.\Generated_Source\PSoC4/CyLib.c **** }
 2363              		.loc 1 2608 0
 2364 0012 BD46     		mov	sp, r7
 2365 0014 02B0     		add	sp, sp, #8
 2366              		@ sp needed
 2367 0016 80BD     		pop	{r7, pc}
 2368              	.L153:
 2369              		.align	2
 2370              	.L152:
 2371 0018 14E000E0 		.word	-536813548
 2372              		.cfi_endproc
 2373              	.LFE41:
 2374              		.size	CySysTickSetReload, .-CySysTickSetReload
 2375              		.section	.text.CySysTickGetReload,"ax",%progbits
 2376              		.align	2
 2377              		.global	CySysTickGetReload
 2378              		.code	16
 2379              		.thumb_func
 2380              		.type	CySysTickGetReload, %function
 2381              	CySysTickGetReload:
 2382              	.LFB42:
2609:.\Generated_Source\PSoC4/CyLib.c **** 
2610:.\Generated_Source\PSoC4/CyLib.c **** 
2611:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2612:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2613:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2614:.\Generated_Source\PSoC4/CyLib.c **** *
2615:.\Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2616:.\Generated_Source\PSoC4/CyLib.c **** *
2617:.\Generated_Source\PSoC4/CyLib.c **** * \return
2618:.\Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2619:.\Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 89


2620:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2621:.\Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2622:.\Generated_Source\PSoC4/CyLib.c **** {
 2383              		.loc 1 2622 0
 2384              		.cfi_startproc
 2385 0000 80B5     		push	{r7, lr}
 2386              		.cfi_def_cfa_offset 8
 2387              		.cfi_offset 7, -8
 2388              		.cfi_offset 14, -4
 2389 0002 00AF     		add	r7, sp, #0
 2390              		.cfi_def_cfa_register 7
2623:.\Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2391              		.loc 1 2623 0
 2392 0004 034B     		ldr	r3, .L156
 2393 0006 1B68     		ldr	r3, [r3]
 2394 0008 1B02     		lsl	r3, r3, #8
 2395 000a 1B0A     		lsr	r3, r3, #8
2624:.\Generated_Source\PSoC4/CyLib.c **** }
 2396              		.loc 1 2624 0
 2397 000c 181C     		mov	r0, r3
 2398 000e BD46     		mov	sp, r7
 2399              		@ sp needed
 2400 0010 80BD     		pop	{r7, pc}
 2401              	.L157:
 2402 0012 C046     		.align	2
 2403              	.L156:
 2404 0014 14E000E0 		.word	-536813548
 2405              		.cfi_endproc
 2406              	.LFE42:
 2407              		.size	CySysTickGetReload, .-CySysTickGetReload
 2408              		.section	.text.CySysTickGetValue,"ax",%progbits
 2409              		.align	2
 2410              		.global	CySysTickGetValue
 2411              		.code	16
 2412              		.thumb_func
 2413              		.type	CySysTickGetValue, %function
 2414              	CySysTickGetValue:
 2415              	.LFB43:
2625:.\Generated_Source\PSoC4/CyLib.c **** 
2626:.\Generated_Source\PSoC4/CyLib.c **** 
2627:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2628:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2629:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2630:.\Generated_Source\PSoC4/CyLib.c **** *
2631:.\Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2632:.\Generated_Source\PSoC4/CyLib.c **** *
2633:.\Generated_Source\PSoC4/CyLib.c **** * \return
2634:.\Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2635:.\Generated_Source\PSoC4/CyLib.c **** *
2636:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2637:.\Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2638:.\Generated_Source\PSoC4/CyLib.c **** {
 2416              		.loc 1 2638 0
 2417              		.cfi_startproc
 2418 0000 80B5     		push	{r7, lr}
 2419              		.cfi_def_cfa_offset 8
 2420              		.cfi_offset 7, -8
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 90


 2421              		.cfi_offset 14, -4
 2422 0002 00AF     		add	r7, sp, #0
 2423              		.cfi_def_cfa_register 7
2639:.\Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2424              		.loc 1 2639 0
 2425 0004 034B     		ldr	r3, .L160
 2426 0006 1B68     		ldr	r3, [r3]
 2427 0008 1B02     		lsl	r3, r3, #8
 2428 000a 1B0A     		lsr	r3, r3, #8
2640:.\Generated_Source\PSoC4/CyLib.c **** }
 2429              		.loc 1 2640 0
 2430 000c 181C     		mov	r0, r3
 2431 000e BD46     		mov	sp, r7
 2432              		@ sp needed
 2433 0010 80BD     		pop	{r7, pc}
 2434              	.L161:
 2435 0012 C046     		.align	2
 2436              	.L160:
 2437 0014 18E000E0 		.word	-536813544
 2438              		.cfi_endproc
 2439              	.LFE43:
 2440              		.size	CySysTickGetValue, .-CySysTickGetValue
 2441              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 2442              		.align	2
 2443              		.global	CySysTickSetClockSource
 2444              		.code	16
 2445              		.thumb_func
 2446              		.type	CySysTickSetClockSource, %function
 2447              	CySysTickSetClockSource:
 2448              	.LFB44:
2641:.\Generated_Source\PSoC4/CyLib.c **** 
2642:.\Generated_Source\PSoC4/CyLib.c **** 
2643:.\Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2644:.\Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2645:.\Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2646:.\Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2647:.\Generated_Source\PSoC4/CyLib.c ****     *
2648:.\Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2649:.\Generated_Source\PSoC4/CyLib.c ****     *
2650:.\Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2651:.\Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2652:.\Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2653:.\Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2654:.\Generated_Source\PSoC4/CyLib.c ****     *
2655:.\Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2656:.\Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2657:.\Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2658:.\Generated_Source\PSoC4/CyLib.c ****     *
2659:.\Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2660:.\Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2661:.\Generated_Source\PSoC4/CyLib.c ****     *
2662:.\Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2663:.\Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2664:.\Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2665:.\Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2666:.\Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2667:.\Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 91


2668:.\Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2669:.\Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2670:.\Generated_Source\PSoC4/CyLib.c ****     {
 2449              		.loc 1 2670 0
 2450              		.cfi_startproc
 2451 0000 80B5     		push	{r7, lr}
 2452              		.cfi_def_cfa_offset 8
 2453              		.cfi_offset 7, -8
 2454              		.cfi_offset 14, -4
 2455 0002 82B0     		sub	sp, sp, #8
 2456              		.cfi_def_cfa_offset 16
 2457 0004 00AF     		add	r7, sp, #0
 2458              		.cfi_def_cfa_register 7
 2459 0006 7860     		str	r0, [r7, #4]
2671:.\Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
 2460              		.loc 1 2671 0
 2461 0008 7B68     		ldr	r3, [r7, #4]
 2462 000a 012B     		cmp	r3, #1
 2463 000c 06D1     		bne	.L163
2672:.\Generated_Source\PSoC4/CyLib.c ****         {
2673:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 2464              		.loc 1 2673 0
 2465 000e 084B     		ldr	r3, .L165
 2466 0010 074A     		ldr	r2, .L165
 2467 0012 1268     		ldr	r2, [r2]
 2468 0014 0421     		mov	r1, #4
 2469 0016 0A43     		orr	r2, r1
 2470 0018 1A60     		str	r2, [r3]
 2471 001a 05E0     		b	.L162
 2472              	.L163:
2674:.\Generated_Source\PSoC4/CyLib.c ****         }
2675:.\Generated_Source\PSoC4/CyLib.c ****         else
2676:.\Generated_Source\PSoC4/CyLib.c ****         {
2677:.\Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
 2473              		.loc 1 2677 0
 2474 001c 044B     		ldr	r3, .L165
 2475 001e 044A     		ldr	r2, .L165
 2476 0020 1268     		ldr	r2, [r2]
 2477 0022 0421     		mov	r1, #4
 2478 0024 8A43     		bic	r2, r1
 2479 0026 1A60     		str	r2, [r3]
 2480              	.L162:
2678:.\Generated_Source\PSoC4/CyLib.c ****         }
2679:.\Generated_Source\PSoC4/CyLib.c ****     }
 2481              		.loc 1 2679 0
 2482 0028 BD46     		mov	sp, r7
 2483 002a 02B0     		add	sp, sp, #8
 2484              		@ sp needed
 2485 002c 80BD     		pop	{r7, pc}
 2486              	.L166:
 2487 002e C046     		.align	2
 2488              	.L165:
 2489 0030 10E000E0 		.word	-536813552
 2490              		.cfi_endproc
 2491              	.LFE44:
 2492              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 2493              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 92


 2494              		.align	2
 2495              		.global	CySysTickGetCountFlag
 2496              		.code	16
 2497              		.thumb_func
 2498              		.type	CySysTickGetCountFlag, %function
 2499              	CySysTickGetCountFlag:
 2500              	.LFB45:
2680:.\Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2681:.\Generated_Source\PSoC4/CyLib.c **** 
2682:.\Generated_Source\PSoC4/CyLib.c **** 
2683:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2684:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2685:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2686:.\Generated_Source\PSoC4/CyLib.c **** *
2687:.\Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
2688:.\Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2689:.\Generated_Source\PSoC4/CyLib.c **** *
2690:.\Generated_Source\PSoC4/CyLib.c **** * \return
2691:.\Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2692:.\Generated_Source\PSoC4/CyLib.c **** *
2693:.\Generated_Source\PSoC4/CyLib.c **** *
2694:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2695:.\Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2696:.\Generated_Source\PSoC4/CyLib.c **** *
2697:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2698:.\Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2699:.\Generated_Source\PSoC4/CyLib.c **** {
 2501              		.loc 1 2699 0
 2502              		.cfi_startproc
 2503 0000 80B5     		push	{r7, lr}
 2504              		.cfi_def_cfa_offset 8
 2505              		.cfi_offset 7, -8
 2506              		.cfi_offset 14, -4
 2507 0002 00AF     		add	r7, sp, #0
 2508              		.cfi_def_cfa_register 7
2700:.\Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG>>CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2509              		.loc 1 2700 0
 2510 0004 034B     		ldr	r3, .L169
 2511 0006 1B68     		ldr	r3, [r3]
 2512 0008 1B0C     		lsr	r3, r3, #16
 2513 000a 0122     		mov	r2, #1
 2514 000c 1340     		and	r3, r2
2701:.\Generated_Source\PSoC4/CyLib.c **** }
 2515              		.loc 1 2701 0
 2516 000e 181C     		mov	r0, r3
 2517 0010 BD46     		mov	sp, r7
 2518              		@ sp needed
 2519 0012 80BD     		pop	{r7, pc}
 2520              	.L170:
 2521              		.align	2
 2522              	.L169:
 2523 0014 10E000E0 		.word	-536813552
 2524              		.cfi_endproc
 2525              	.LFE45:
 2526              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2527              		.section	.text.CySysTickClear,"ax",%progbits
 2528              		.align	2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 93


 2529              		.global	CySysTickClear
 2530              		.code	16
 2531              		.thumb_func
 2532              		.type	CySysTickClear, %function
 2533              	CySysTickClear:
 2534              	.LFB46:
2702:.\Generated_Source\PSoC4/CyLib.c **** 
2703:.\Generated_Source\PSoC4/CyLib.c **** 
2704:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2705:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2706:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2707:.\Generated_Source\PSoC4/CyLib.c **** *
2708:.\Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
2709:.\Generated_Source\PSoC4/CyLib.c **** *
2710:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2711:.\Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
2712:.\Generated_Source\PSoC4/CyLib.c **** {
 2535              		.loc 1 2712 0
 2536              		.cfi_startproc
 2537 0000 80B5     		push	{r7, lr}
 2538              		.cfi_def_cfa_offset 8
 2539              		.cfi_offset 7, -8
 2540              		.cfi_offset 14, -4
 2541 0002 00AF     		add	r7, sp, #0
 2542              		.cfi_def_cfa_register 7
2713:.\Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2543              		.loc 1 2713 0
 2544 0004 024B     		ldr	r3, .L172
 2545 0006 0022     		mov	r2, #0
 2546 0008 1A60     		str	r2, [r3]
2714:.\Generated_Source\PSoC4/CyLib.c **** }
 2547              		.loc 1 2714 0
 2548 000a BD46     		mov	sp, r7
 2549              		@ sp needed
 2550 000c 80BD     		pop	{r7, pc}
 2551              	.L173:
 2552 000e C046     		.align	2
 2553              	.L172:
 2554 0010 18E000E0 		.word	-536813544
 2555              		.cfi_endproc
 2556              	.LFE46:
 2557              		.size	CySysTickClear, .-CySysTickClear
 2558              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2559              		.align	2
 2560              		.global	CySysTickSetCallback
 2561              		.code	16
 2562              		.thumb_func
 2563              		.type	CySysTickSetCallback, %function
 2564              	CySysTickSetCallback:
 2565              	.LFB47:
2715:.\Generated_Source\PSoC4/CyLib.c **** 
2716:.\Generated_Source\PSoC4/CyLib.c **** 
2717:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2718:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
2719:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2720:.\Generated_Source\PSoC4/CyLib.c **** *
2721:.\Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 94


2722:.\Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
2723:.\Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
2724:.\Generated_Source\PSoC4/CyLib.c **** *
2725:.\Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
2726:.\Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
2727:.\Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
2728:.\Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
2729:.\Generated_Source\PSoC4/CyLib.c **** *  functions.
2730:.\Generated_Source\PSoC4/CyLib.c **** *
2731:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
2732:.\Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2733:.\Generated_Source\PSoC4/CyLib.c **** *
2734:.\Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
2735:.\Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
2736:.\Generated_Source\PSoC4/CyLib.c **** *                                specified number.
2737:.\Generated_Source\PSoC4/CyLib.c **** *
2738:.\Generated_Source\PSoC4/CyLib.c **** * \return
2739:.\Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
2740:.\Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
2741:.\Generated_Source\PSoC4/CyLib.c **** *
2742:.\Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2743:.\Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
2744:.\Generated_Source\PSoC4/CyLib.c **** *
2745:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2746:.\Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
2747:.\Generated_Source\PSoC4/CyLib.c **** {
 2566              		.loc 1 2747 0
 2567              		.cfi_startproc
 2568 0000 80B5     		push	{r7, lr}
 2569              		.cfi_def_cfa_offset 8
 2570              		.cfi_offset 7, -8
 2571              		.cfi_offset 14, -4
 2572 0002 84B0     		sub	sp, sp, #16
 2573              		.cfi_def_cfa_offset 24
 2574 0004 00AF     		add	r7, sp, #0
 2575              		.cfi_def_cfa_register 7
 2576 0006 7860     		str	r0, [r7, #4]
 2577 0008 3960     		str	r1, [r7]
2748:.\Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
2749:.\Generated_Source\PSoC4/CyLib.c **** 
2750:.\Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
 2578              		.loc 1 2750 0
 2579 000a 074B     		ldr	r3, .L176
 2580 000c 7A68     		ldr	r2, [r7, #4]
 2581 000e 9200     		lsl	r2, r2, #2
 2582 0010 D358     		ldr	r3, [r2, r3]
 2583 0012 FB60     		str	r3, [r7, #12]
2751:.\Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2584              		.loc 1 2751 0
 2585 0014 044B     		ldr	r3, .L176
 2586 0016 7A68     		ldr	r2, [r7, #4]
 2587 0018 9200     		lsl	r2, r2, #2
 2588 001a 3968     		ldr	r1, [r7]
 2589 001c D150     		str	r1, [r2, r3]
2752:.\Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2590              		.loc 1 2752 0
 2591 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 95


2753:.\Generated_Source\PSoC4/CyLib.c **** }
 2592              		.loc 1 2753 0
 2593 0020 181C     		mov	r0, r3
 2594 0022 BD46     		mov	sp, r7
 2595 0024 04B0     		add	sp, sp, #16
 2596              		@ sp needed
 2597 0026 80BD     		pop	{r7, pc}
 2598              	.L177:
 2599              		.align	2
 2600              	.L176:
 2601 0028 00000000 		.word	CySysTickCallbacks
 2602              		.cfi_endproc
 2603              	.LFE47:
 2604              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2605              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2606              		.align	2
 2607              		.global	CySysTickGetCallback
 2608              		.code	16
 2609              		.thumb_func
 2610              		.type	CySysTickGetCallback, %function
 2611              	CySysTickGetCallback:
 2612              	.LFB48:
2754:.\Generated_Source\PSoC4/CyLib.c **** 
2755:.\Generated_Source\PSoC4/CyLib.c **** 
2756:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2757:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
2758:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2759:.\Generated_Source\PSoC4/CyLib.c **** *
2760:.\Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
2761:.\Generated_Source\PSoC4/CyLib.c **** *
2762:.\Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
2763:.\Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2764:.\Generated_Source\PSoC4/CyLib.c **** *
2765:.\Generated_Source\PSoC4/CyLib.c **** * \return
2766:.\Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
2767:.\Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
2768:.\Generated_Source\PSoC4/CyLib.c **** *
2769:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2770:.\Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
2771:.\Generated_Source\PSoC4/CyLib.c **** {
 2613              		.loc 1 2771 0
 2614              		.cfi_startproc
 2615 0000 80B5     		push	{r7, lr}
 2616              		.cfi_def_cfa_offset 8
 2617              		.cfi_offset 7, -8
 2618              		.cfi_offset 14, -4
 2619 0002 82B0     		sub	sp, sp, #8
 2620              		.cfi_def_cfa_offset 16
 2621 0004 00AF     		add	r7, sp, #0
 2622              		.cfi_def_cfa_register 7
 2623 0006 7860     		str	r0, [r7, #4]
2772:.\Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2624              		.loc 1 2772 0
 2625 0008 034B     		ldr	r3, .L180
 2626 000a 7A68     		ldr	r2, [r7, #4]
 2627 000c 9200     		lsl	r2, r2, #2
 2628 000e D358     		ldr	r3, [r2, r3]
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 96


2773:.\Generated_Source\PSoC4/CyLib.c **** }
 2629              		.loc 1 2773 0
 2630 0010 181C     		mov	r0, r3
 2631 0012 BD46     		mov	sp, r7
 2632 0014 02B0     		add	sp, sp, #8
 2633              		@ sp needed
 2634 0016 80BD     		pop	{r7, pc}
 2635              	.L181:
 2636              		.align	2
 2637              	.L180:
 2638 0018 00000000 		.word	CySysTickCallbacks
 2639              		.cfi_endproc
 2640              	.LFE48:
 2641              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2642              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2643              		.align	2
 2644              		.code	16
 2645              		.thumb_func
 2646              		.type	CySysTickServiceCallbacks, %function
 2647              	CySysTickServiceCallbacks:
 2648              	.LFB49:
2774:.\Generated_Source\PSoC4/CyLib.c **** 
2775:.\Generated_Source\PSoC4/CyLib.c **** 
2776:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2777:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
2778:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2779:.\Generated_Source\PSoC4/CyLib.c **** *
2780:.\Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
2781:.\Generated_Source\PSoC4/CyLib.c **** *
2782:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2783:.\Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
2784:.\Generated_Source\PSoC4/CyLib.c **** {
 2649              		.loc 1 2784 0
 2650              		.cfi_startproc
 2651 0000 80B5     		push	{r7, lr}
 2652              		.cfi_def_cfa_offset 8
 2653              		.cfi_offset 7, -8
 2654              		.cfi_offset 14, -4
 2655 0002 82B0     		sub	sp, sp, #8
 2656              		.cfi_def_cfa_offset 16
 2657 0004 00AF     		add	r7, sp, #0
 2658              		.cfi_def_cfa_register 7
2785:.\Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2786:.\Generated_Source\PSoC4/CyLib.c **** 
2787:.\Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
2788:.\Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2659              		.loc 1 2788 0
 2660 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2661 000a 031E     		sub	r3, r0, #0
 2662 000c 012B     		cmp	r3, #1
 2663 000e 13D1     		bne	.L182
2789:.\Generated_Source\PSoC4/CyLib.c ****     {
2790:.\Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2664              		.loc 1 2790 0
 2665 0010 0023     		mov	r3, #0
 2666 0012 7B60     		str	r3, [r7, #4]
 2667 0014 0DE0     		b	.L184
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 97


 2668              	.L186:
2791:.\Generated_Source\PSoC4/CyLib.c ****         {
2792:.\Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2669              		.loc 1 2792 0
 2670 0016 0A4B     		ldr	r3, .L187
 2671 0018 7A68     		ldr	r2, [r7, #4]
 2672 001a 9200     		lsl	r2, r2, #2
 2673 001c D358     		ldr	r3, [r2, r3]
 2674 001e 002B     		cmp	r3, #0
 2675 0020 04D0     		beq	.L185
2793:.\Generated_Source\PSoC4/CyLib.c ****             {
2794:.\Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2676              		.loc 1 2794 0
 2677 0022 074B     		ldr	r3, .L187
 2678 0024 7A68     		ldr	r2, [r7, #4]
 2679 0026 9200     		lsl	r2, r2, #2
 2680 0028 D358     		ldr	r3, [r2, r3]
 2681 002a 9847     		blx	r3
 2682              	.L185:
2790:.\Generated_Source\PSoC4/CyLib.c ****         {
 2683              		.loc 1 2790 0 discriminator 2
 2684 002c 7B68     		ldr	r3, [r7, #4]
 2685 002e 0133     		add	r3, r3, #1
 2686 0030 7B60     		str	r3, [r7, #4]
 2687              	.L184:
2790:.\Generated_Source\PSoC4/CyLib.c ****         {
 2688              		.loc 1 2790 0 is_stmt 0 discriminator 1
 2689 0032 7B68     		ldr	r3, [r7, #4]
 2690 0034 042B     		cmp	r3, #4
 2691 0036 EED9     		bls	.L186
 2692              	.L182:
2795:.\Generated_Source\PSoC4/CyLib.c ****             }
2796:.\Generated_Source\PSoC4/CyLib.c ****         }
2797:.\Generated_Source\PSoC4/CyLib.c ****     }
2798:.\Generated_Source\PSoC4/CyLib.c **** }
 2693              		.loc 1 2798 0 is_stmt 1
 2694 0038 BD46     		mov	sp, r7
 2695 003a 02B0     		add	sp, sp, #8
 2696              		@ sp needed
 2697 003c 80BD     		pop	{r7, pc}
 2698              	.L188:
 2699 003e C046     		.align	2
 2700              	.L187:
 2701 0040 00000000 		.word	CySysTickCallbacks
 2702              		.cfi_endproc
 2703              	.LFE49:
 2704              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2705              		.section	.text.CyGetUniqueId,"ax",%progbits
 2706              		.align	2
 2707              		.global	CyGetUniqueId
 2708              		.code	16
 2709              		.thumb_func
 2710              		.type	CyGetUniqueId, %function
 2711              	CyGetUniqueId:
 2712              	.LFB50:
2799:.\Generated_Source\PSoC4/CyLib.c **** 
2800:.\Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 98


2801:.\Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2802:.\Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
2803:.\Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2804:.\Generated_Source\PSoC4/CyLib.c **** *
2805:.\Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2806:.\Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2807:.\Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
2808:.\Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
2809:.\Generated_Source\PSoC4/CyLib.c **** *
2810:.\Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
2811:.\Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
2812:.\Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
2813:.\Generated_Source\PSoC4/CyLib.c **** *
2814:.\Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2815:.\Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
2816:.\Generated_Source\PSoC4/CyLib.c **** {
 2713              		.loc 1 2816 0
 2714              		.cfi_startproc
 2715 0000 80B5     		push	{r7, lr}
 2716              		.cfi_def_cfa_offset 8
 2717              		.cfi_offset 7, -8
 2718              		.cfi_offset 14, -4
 2719 0002 82B0     		sub	sp, sp, #8
 2720              		.cfi_def_cfa_offset 16
 2721 0004 00AF     		add	r7, sp, #0
 2722              		.cfi_def_cfa_register 7
 2723 0006 7860     		str	r0, [r7, #4]
2817:.\Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
2818:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2724              		.loc 1 2818 0
 2725 0008 254B     		ldr	r3, .L190
 2726 000a 1B78     		ldrb	r3, [r3]
 2727 000c DBB2     		uxtb	r3, r3
 2728 000e 1A1C     		mov	r2, r3
 2729 0010 7B68     		ldr	r3, [r7, #4]
 2730 0012 1A60     		str	r2, [r3]
2819:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2731              		.loc 1 2819 0
 2732 0014 234B     		ldr	r3, .L190+4
 2733 0016 1B78     		ldrb	r3, [r3]
 2734 0018 DBB2     		uxtb	r3, r3
 2735 001a 1A02     		lsl	r2, r3, #8
 2736 001c 7B68     		ldr	r3, [r7, #4]
 2737 001e 1B68     		ldr	r3, [r3]
 2738 0020 1A43     		orr	r2, r3
 2739 0022 7B68     		ldr	r3, [r7, #4]
 2740 0024 1A60     		str	r2, [r3]
2820:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2741              		.loc 1 2820 0
 2742 0026 204B     		ldr	r3, .L190+8
 2743 0028 1B78     		ldrb	r3, [r3]
 2744 002a DBB2     		uxtb	r3, r3
 2745 002c 1A04     		lsl	r2, r3, #16
 2746 002e 7B68     		ldr	r3, [r7, #4]
 2747 0030 1B68     		ldr	r3, [r3]
 2748 0032 1A43     		orr	r2, r3
 2749 0034 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 99


 2750 0036 1A60     		str	r2, [r3]
2821:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2751              		.loc 1 2821 0
 2752 0038 1C4B     		ldr	r3, .L190+12
 2753 003a 1B78     		ldrb	r3, [r3]
 2754 003c DBB2     		uxtb	r3, r3
 2755 003e 1A06     		lsl	r2, r3, #24
 2756 0040 7B68     		ldr	r3, [r7, #4]
 2757 0042 1B68     		ldr	r3, [r3]
 2758 0044 1A43     		orr	r2, r3
 2759 0046 7B68     		ldr	r3, [r7, #4]
 2760 0048 1A60     		str	r2, [r3]
2822:.\Generated_Source\PSoC4/CyLib.c **** 
2823:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2761              		.loc 1 2823 0
 2762 004a 7B68     		ldr	r3, [r7, #4]
 2763 004c 0433     		add	r3, r3, #4
 2764 004e 184A     		ldr	r2, .L190+16
 2765 0050 1278     		ldrb	r2, [r2]
 2766 0052 D2B2     		uxtb	r2, r2
 2767 0054 1A60     		str	r2, [r3]
2824:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2768              		.loc 1 2824 0
 2769 0056 174B     		ldr	r3, .L190+20
 2770 0058 1B78     		ldrb	r3, [r3]
 2771 005a DBB2     		uxtb	r3, r3
 2772 005c 1902     		lsl	r1, r3, #8
 2773 005e 7B68     		ldr	r3, [r7, #4]
 2774 0060 0433     		add	r3, r3, #4
 2775 0062 7A68     		ldr	r2, [r7, #4]
 2776 0064 0432     		add	r2, r2, #4
 2777 0066 1268     		ldr	r2, [r2]
 2778 0068 0A43     		orr	r2, r1
 2779 006a 1A60     		str	r2, [r3]
2825:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2780              		.loc 1 2825 0
 2781 006c 124B     		ldr	r3, .L190+24
 2782 006e 1B78     		ldrb	r3, [r3]
 2783 0070 DBB2     		uxtb	r3, r3
 2784 0072 1904     		lsl	r1, r3, #16
 2785 0074 7B68     		ldr	r3, [r7, #4]
 2786 0076 0433     		add	r3, r3, #4
 2787 0078 7A68     		ldr	r2, [r7, #4]
 2788 007a 0432     		add	r2, r2, #4
 2789 007c 1268     		ldr	r2, [r2]
 2790 007e 0A43     		orr	r2, r1
 2791 0080 1A60     		str	r2, [r3]
2826:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2792              		.loc 1 2826 0
 2793 0082 0E4B     		ldr	r3, .L190+28
 2794 0084 1B78     		ldrb	r3, [r3]
 2795 0086 DBB2     		uxtb	r3, r3
 2796 0088 1906     		lsl	r1, r3, #24
 2797 008a 7B68     		ldr	r3, [r7, #4]
 2798 008c 0433     		add	r3, r3, #4
 2799 008e 7A68     		ldr	r2, [r7, #4]
 2800 0090 0432     		add	r2, r2, #4
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 100


 2801 0092 1268     		ldr	r2, [r2]
 2802 0094 0A43     		orr	r2, r1
 2803 0096 1A60     		str	r2, [r3]
2827:.\Generated_Source\PSoC4/CyLib.c **** #else
2828:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
2829:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
2830:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
2831:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
2832:.\Generated_Source\PSoC4/CyLib.c **** 
2833:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
2834:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
2835:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
2836:.\Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
2837:.\Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
2838:.\Generated_Source\PSoC4/CyLib.c **** }
 2804              		.loc 1 2838 0
 2805 0098 BD46     		mov	sp, r7
 2806 009a 02B0     		add	sp, sp, #8
 2807              		@ sp needed
 2808 009c 80BD     		pop	{r7, pc}
 2809              	.L191:
 2810 009e C046     		.align	2
 2811              	.L190:
 2812 00a0 78F2FF0F 		.word	268431992
 2813 00a4 79F2FF0F 		.word	268431993
 2814 00a8 7AF2FF0F 		.word	268431994
 2815 00ac 7BF2FF0F 		.word	268431995
 2816 00b0 7CF2FF0F 		.word	268431996
 2817 00b4 7DF2FF0F 		.word	268431997
 2818 00b8 7EF2FF0F 		.word	268431998
 2819 00bc 7FF2FF0F 		.word	268431999
 2820              		.cfi_endproc
 2821              	.LFE50:
 2822              		.size	CyGetUniqueId, .-CyGetUniqueId
 2823              		.text
 2824              	.Letext0:
 2825              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 2826              		.file 3 ".\\Generated_Source\\PSoC4\\CyLib.h"
 2827              		.section	.debug_info,"",%progbits
 2828              	.Ldebug_info0:
 2829 0000 84090000 		.4byte	0x984
 2830 0004 0400     		.2byte	0x4
 2831 0006 00000000 		.4byte	.Ldebug_abbrev0
 2832 000a 04       		.byte	0x4
 2833 000b 01       		.uleb128 0x1
 2834 000c CC050000 		.4byte	.LASF107
 2835 0010 01       		.byte	0x1
 2836 0011 F2020000 		.4byte	.LASF108
 2837 0015 4D050000 		.4byte	.LASF109
 2838 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2839 001d 00000000 		.4byte	0
 2840 0021 00000000 		.4byte	.Ldebug_line0
 2841 0025 02       		.uleb128 0x2
 2842 0026 01       		.byte	0x1
 2843 0027 06       		.byte	0x6
 2844 0028 EB000000 		.4byte	.LASF0
 2845 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 101


 2846 002d 01       		.byte	0x1
 2847 002e 08       		.byte	0x8
 2848 002f 41040000 		.4byte	.LASF1
 2849 0033 02       		.uleb128 0x2
 2850 0034 02       		.byte	0x2
 2851 0035 05       		.byte	0x5
 2852 0036 4F040000 		.4byte	.LASF2
 2853 003a 02       		.uleb128 0x2
 2854 003b 02       		.byte	0x2
 2855 003c 07       		.byte	0x7
 2856 003d B8020000 		.4byte	.LASF3
 2857 0041 02       		.uleb128 0x2
 2858 0042 04       		.byte	0x4
 2859 0043 05       		.byte	0x5
 2860 0044 2A010000 		.4byte	.LASF4
 2861 0048 02       		.uleb128 0x2
 2862 0049 04       		.byte	0x4
 2863 004a 07       		.byte	0x7
 2864 004b 57020000 		.4byte	.LASF5
 2865 004f 02       		.uleb128 0x2
 2866 0050 08       		.byte	0x8
 2867 0051 05       		.byte	0x5
 2868 0052 DD000000 		.4byte	.LASF6
 2869 0056 02       		.uleb128 0x2
 2870 0057 08       		.byte	0x8
 2871 0058 07       		.byte	0x7
 2872 0059 71000000 		.4byte	.LASF7
 2873 005d 03       		.uleb128 0x3
 2874 005e 04       		.byte	0x4
 2875 005f 05       		.byte	0x5
 2876 0060 696E7400 		.ascii	"int\000"
 2877 0064 02       		.uleb128 0x2
 2878 0065 04       		.byte	0x4
 2879 0066 07       		.byte	0x7
 2880 0067 3B020000 		.4byte	.LASF8
 2881 006b 04       		.uleb128 0x4
 2882 006c 55010000 		.4byte	.LASF9
 2883 0070 02       		.byte	0x2
 2884 0071 9801     		.2byte	0x198
 2885 0073 2C000000 		.4byte	0x2c
 2886 0077 04       		.uleb128 0x4
 2887 0078 17000000 		.4byte	.LASF10
 2888 007c 02       		.byte	0x2
 2889 007d 9901     		.2byte	0x199
 2890 007f 3A000000 		.4byte	0x3a
 2891 0083 04       		.uleb128 0x4
 2892 0084 98010000 		.4byte	.LASF11
 2893 0088 02       		.byte	0x2
 2894 0089 9A01     		.2byte	0x19a
 2895 008b 48000000 		.4byte	0x48
 2896 008f 02       		.uleb128 0x2
 2897 0090 04       		.byte	0x4
 2898 0091 04       		.byte	0x4
 2899 0092 E8030000 		.4byte	.LASF12
 2900 0096 02       		.uleb128 0x2
 2901 0097 08       		.byte	0x8
 2902 0098 04       		.byte	0x4
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 102


 2903 0099 74010000 		.4byte	.LASF13
 2904 009d 02       		.uleb128 0x2
 2905 009e 01       		.byte	0x1
 2906 009f 08       		.byte	0x8
 2907 00a0 99040000 		.4byte	.LASF14
 2908 00a4 04       		.uleb128 0x4
 2909 00a5 C3050000 		.4byte	.LASF15
 2910 00a9 02       		.byte	0x2
 2911 00aa 3A02     		.2byte	0x23a
 2912 00ac 48000000 		.4byte	0x48
 2913 00b0 04       		.uleb128 0x4
 2914 00b1 2B040000 		.4byte	.LASF16
 2915 00b5 02       		.byte	0x2
 2916 00b6 4202     		.2byte	0x242
 2917 00b8 BC000000 		.4byte	0xbc
 2918 00bc 05       		.uleb128 0x5
 2919 00bd 6B000000 		.4byte	0x6b
 2920 00c1 04       		.uleb128 0x4
 2921 00c2 43030000 		.4byte	.LASF17
 2922 00c6 02       		.byte	0x2
 2923 00c7 4402     		.2byte	0x244
 2924 00c9 CD000000 		.4byte	0xcd
 2925 00cd 05       		.uleb128 0x5
 2926 00ce 83000000 		.4byte	0x83
 2927 00d2 04       		.uleb128 0x4
 2928 00d3 9E040000 		.4byte	.LASF18
 2929 00d7 02       		.byte	0x2
 2930 00d8 5402     		.2byte	0x254
 2931 00da DE000000 		.4byte	0xde
 2932 00de 06       		.uleb128 0x6
 2933 00df 04       		.byte	0x4
 2934 00e0 E4000000 		.4byte	0xe4
 2935 00e4 07       		.uleb128 0x7
 2936 00e5 02       		.uleb128 0x2
 2937 00e6 04       		.byte	0x4
 2938 00e7 07       		.byte	0x7
 2939 00e8 65030000 		.4byte	.LASF19
 2940 00ec 08       		.uleb128 0x8
 2941 00ed FD030000 		.4byte	.LASF20
 2942 00f1 03       		.byte	0x3
 2943 00f2 F3       		.byte	0xf3
 2944 00f3 DE000000 		.4byte	0xde
 2945 00f7 09       		.uleb128 0x9
 2946 00f8 6F060000 		.4byte	.LASF21
 2947 00fc 01       		.byte	0x1
 2948 00fd 68       		.byte	0x68
 2949 00fe 00000000 		.4byte	.LFB2
 2950 0102 1C000000 		.4byte	.LFE2-.LFB2
 2951 0106 01       		.uleb128 0x1
 2952 0107 9C       		.byte	0x9c
 2953 0108 09       		.uleb128 0x9
 2954 0109 84020000 		.4byte	.LASF22
 2955 010d 01       		.byte	0x1
 2956 010e 88       		.byte	0x88
 2957 010f 00000000 		.4byte	.LFB3
 2958 0113 18000000 		.4byte	.LFE3-.LFB3
 2959 0117 01       		.uleb128 0x1
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 103


 2960 0118 9C       		.byte	0x9c
 2961 0119 0A       		.uleb128 0xa
 2962 011a 27000000 		.4byte	.LASF26
 2963 011e 01       		.byte	0x1
 2964 011f AA01     		.2byte	0x1aa
 2965 0121 00000000 		.4byte	.LFB4
 2966 0125 48000000 		.4byte	.LFE4-.LFB4
 2967 0129 01       		.uleb128 0x1
 2968 012a 9C       		.byte	0x9c
 2969 012b 5D010000 		.4byte	0x15d
 2970 012f 0B       		.uleb128 0xb
 2971 0130 77040000 		.4byte	.LASF28
 2972 0134 01       		.byte	0x1
 2973 0135 AA01     		.2byte	0x1aa
 2974 0137 83000000 		.4byte	0x83
 2975 013b 02       		.uleb128 0x2
 2976 013c 91       		.byte	0x91
 2977 013d 64       		.sleb128 -28
 2978 013e 0C       		.uleb128 0xc
 2979 013f 08010000 		.4byte	.LASF23
 2980 0143 01       		.byte	0x1
 2981 0144 AC01     		.2byte	0x1ac
 2982 0146 6B000000 		.4byte	0x6b
 2983 014a 02       		.uleb128 0x2
 2984 014b 91       		.byte	0x91
 2985 014c 6F       		.sleb128 -17
 2986 014d 0C       		.uleb128 0xc
 2987 014e 9E060000 		.4byte	.LASF24
 2988 0152 01       		.byte	0x1
 2989 0153 AD01     		.2byte	0x1ad
 2990 0155 83000000 		.4byte	0x83
 2991 0159 02       		.uleb128 0x2
 2992 015a 91       		.byte	0x91
 2993 015b 68       		.sleb128 -24
 2994 015c 00       		.byte	0
 2995 015d 0D       		.uleb128 0xd
 2996 015e C1010000 		.4byte	.LASF37
 2997 0162 01       		.byte	0x1
 2998 0163 CF01     		.2byte	0x1cf
 2999 0165 83000000 		.4byte	0x83
 3000 0169 00000000 		.4byte	.LFB5
 3001 016d 34000000 		.4byte	.LFE5-.LFB5
 3002 0171 01       		.uleb128 0x1
 3003 0172 9C       		.byte	0x9c
 3004 0173 96010000 		.4byte	0x196
 3005 0177 0C       		.uleb128 0xc
 3006 0178 08010000 		.4byte	.LASF23
 3007 017c 01       		.byte	0x1
 3008 017d D101     		.2byte	0x1d1
 3009 017f 6B000000 		.4byte	0x6b
 3010 0183 02       		.uleb128 0x2
 3011 0184 91       		.byte	0x91
 3012 0185 6F       		.sleb128 -17
 3013 0186 0C       		.uleb128 0xc
 3014 0187 90030000 		.4byte	.LASF25
 3015 018b 01       		.byte	0x1
 3016 018c D201     		.2byte	0x1d2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 104


 3017 018e 83000000 		.4byte	0x83
 3018 0192 02       		.uleb128 0x2
 3019 0193 91       		.byte	0x91
 3020 0194 68       		.sleb128 -24
 3021 0195 00       		.byte	0
 3022 0196 0A       		.uleb128 0xa
 3023 0197 BB040000 		.4byte	.LASF27
 3024 019b 01       		.byte	0x1
 3025 019c 0602     		.2byte	0x206
 3026 019e 00000000 		.4byte	.LFB6
 3027 01a2 44000000 		.4byte	.LFE6-.LFB6
 3028 01a6 01       		.uleb128 0x1
 3029 01a7 9C       		.byte	0x9c
 3030 01a8 CB010000 		.4byte	0x1cb
 3031 01ac 0B       		.uleb128 0xb
 3032 01ad A7050000 		.4byte	.LASF29
 3033 01b1 01       		.byte	0x1
 3034 01b2 0602     		.2byte	0x206
 3035 01b4 83000000 		.4byte	0x83
 3036 01b8 02       		.uleb128 0x2
 3037 01b9 91       		.byte	0x91
 3038 01ba 64       		.sleb128 -28
 3039 01bb 0C       		.uleb128 0xc
 3040 01bc 08010000 		.4byte	.LASF23
 3041 01c0 01       		.byte	0x1
 3042 01c1 0802     		.2byte	0x208
 3043 01c3 6B000000 		.4byte	0x6b
 3044 01c7 02       		.uleb128 0x2
 3045 01c8 91       		.byte	0x91
 3046 01c9 6F       		.sleb128 -17
 3047 01ca 00       		.byte	0
 3048 01cb 0A       		.uleb128 0xa
 3049 01cc 1C030000 		.4byte	.LASF30
 3050 01d0 01       		.byte	0x1
 3051 01d1 4002     		.2byte	0x240
 3052 01d3 00000000 		.4byte	.LFB7
 3053 01d7 EC010000 		.4byte	.LFE7-.LFB7
 3054 01db 01       		.uleb128 0x1
 3055 01dc 9C       		.byte	0x9c
 3056 01dd 4B020000 		.4byte	0x24b
 3057 01e1 0B       		.uleb128 0xb
 3058 01e2 F7000000 		.4byte	.LASF31
 3059 01e6 01       		.byte	0x1
 3060 01e7 4002     		.2byte	0x240
 3061 01e9 83000000 		.4byte	0x83
 3062 01ed 02       		.uleb128 0x2
 3063 01ee 91       		.byte	0x91
 3064 01ef 64       		.sleb128 -28
 3065 01f0 0C       		.uleb128 0xc
 3066 01f1 0F000000 		.4byte	.LASF32
 3067 01f5 01       		.byte	0x1
 3068 01f6 4602     		.2byte	0x246
 3069 01f8 6B000000 		.4byte	0x6b
 3070 01fc 02       		.uleb128 0x2
 3071 01fd 91       		.byte	0x91
 3072 01fe 6F       		.sleb128 -17
 3073 01ff 0C       		.uleb128 0xc
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 105


 3074 0200 88030000 		.4byte	.LASF33
 3075 0204 01       		.byte	0x1
 3076 0205 4702     		.2byte	0x247
 3077 0207 6B000000 		.4byte	0x6b
 3078 020b 02       		.uleb128 0x2
 3079 020c 91       		.byte	0x91
 3080 020d 6E       		.sleb128 -18
 3081 020e 0C       		.uleb128 0xc
 3082 020f 80060000 		.4byte	.LASF34
 3083 0213 01       		.byte	0x1
 3084 0214 4802     		.2byte	0x248
 3085 0216 6B000000 		.4byte	0x6b
 3086 021a 02       		.uleb128 0x2
 3087 021b 91       		.byte	0x91
 3088 021c 6B       		.sleb128 -21
 3089 021d 0C       		.uleb128 0xc
 3090 021e 5C000000 		.4byte	.LASF35
 3091 0222 01       		.byte	0x1
 3092 0223 4902     		.2byte	0x249
 3093 0225 6B000000 		.4byte	0x6b
 3094 0229 02       		.uleb128 0x2
 3095 022a 91       		.byte	0x91
 3096 022b 6D       		.sleb128 -19
 3097 022c 0C       		.uleb128 0xc
 3098 022d F5040000 		.4byte	.LASF36
 3099 0231 01       		.byte	0x1
 3100 0232 4A02     		.2byte	0x24a
 3101 0234 6B000000 		.4byte	0x6b
 3102 0238 02       		.uleb128 0x2
 3103 0239 91       		.byte	0x91
 3104 023a 6A       		.sleb128 -22
 3105 023b 0C       		.uleb128 0xc
 3106 023c 08010000 		.4byte	.LASF23
 3107 0240 01       		.byte	0x1
 3108 0241 5502     		.2byte	0x255
 3109 0243 6B000000 		.4byte	0x6b
 3110 0247 02       		.uleb128 0x2
 3111 0248 91       		.byte	0x91
 3112 0249 6C       		.sleb128 -20
 3113 024a 00       		.byte	0
 3114 024b 0D       		.uleb128 0xd
 3115 024c 81040000 		.4byte	.LASF38
 3116 0250 01       		.byte	0x1
 3117 0251 D203     		.2byte	0x3d2
 3118 0253 A4000000 		.4byte	0xa4
 3119 0257 00000000 		.4byte	.LFB8
 3120 025b 74000000 		.4byte	.LFE8-.LFB8
 3121 025f 01       		.uleb128 0x1
 3122 0260 9C       		.byte	0x9c
 3123 0261 84020000 		.4byte	0x284
 3124 0265 0B       		.uleb128 0xb
 3125 0266 9D050000 		.4byte	.LASF39
 3126 026a 01       		.byte	0x1
 3127 026b D203     		.2byte	0x3d2
 3128 026d 83000000 		.4byte	0x83
 3129 0271 02       		.uleb128 0x2
 3130 0272 91       		.byte	0x91
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 106


 3131 0273 6C       		.sleb128 -20
 3132 0274 0C       		.uleb128 0xc
 3133 0275 58030000 		.4byte	.LASF40
 3134 0279 01       		.byte	0x1
 3135 027a D403     		.2byte	0x3d4
 3136 027c A4000000 		.4byte	0xa4
 3137 0280 02       		.uleb128 0x2
 3138 0281 91       		.byte	0x91
 3139 0282 74       		.sleb128 -12
 3140 0283 00       		.byte	0
 3141 0284 0E       		.uleb128 0xe
 3142 0285 D2040000 		.4byte	.LASF41
 3143 0289 01       		.byte	0x1
 3144 028a 0504     		.2byte	0x405
 3145 028c 00000000 		.4byte	.LFB9
 3146 0290 2C000000 		.4byte	.LFE9-.LFB9
 3147 0294 01       		.uleb128 0x1
 3148 0295 9C       		.byte	0x9c
 3149 0296 0F       		.uleb128 0xf
 3150 0297 9F010000 		.4byte	.LASF42
 3151 029b 01       		.byte	0x1
 3152 029c 2504     		.2byte	0x425
 3153 029e 83000000 		.4byte	0x83
 3154 02a2 00000000 		.4byte	.LFB10
 3155 02a6 20000000 		.4byte	.LFE10-.LFB10
 3156 02aa 01       		.uleb128 0x1
 3157 02ab 9C       		.byte	0x9c
 3158 02ac C0020000 		.4byte	0x2c0
 3159 02b0 0C       		.uleb128 0xc
 3160 02b1 D2060000 		.4byte	.LASF43
 3161 02b5 01       		.byte	0x1
 3162 02b6 2704     		.2byte	0x427
 3163 02b8 83000000 		.4byte	0x83
 3164 02bc 02       		.uleb128 0x2
 3165 02bd 91       		.byte	0x91
 3166 02be 74       		.sleb128 -12
 3167 02bf 00       		.byte	0
 3168 02c0 0A       		.uleb128 0xa
 3169 02c1 AF050000 		.4byte	.LASF44
 3170 02c5 01       		.byte	0x1
 3171 02c6 4D04     		.2byte	0x44d
 3172 02c8 00000000 		.4byte	.LFB11
 3173 02cc 58000000 		.4byte	.LFE11-.LFB11
 3174 02d0 01       		.uleb128 0x1
 3175 02d1 9C       		.byte	0x9c
 3176 02d2 F5020000 		.4byte	0x2f5
 3177 02d6 0B       		.uleb128 0xb
 3178 02d7 A7050000 		.4byte	.LASF29
 3179 02db 01       		.byte	0x1
 3180 02dc 4D04     		.2byte	0x44d
 3181 02de 83000000 		.4byte	0x83
 3182 02e2 02       		.uleb128 0x2
 3183 02e3 91       		.byte	0x91
 3184 02e4 64       		.sleb128 -28
 3185 02e5 0C       		.uleb128 0xc
 3186 02e6 08010000 		.4byte	.LASF23
 3187 02ea 01       		.byte	0x1
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 107


 3188 02eb 4F04     		.2byte	0x44f
 3189 02ed 6B000000 		.4byte	0x6b
 3190 02f1 02       		.uleb128 0x2
 3191 02f2 91       		.byte	0x91
 3192 02f3 6F       		.sleb128 -17
 3193 02f4 00       		.byte	0
 3194 02f5 0A       		.uleb128 0xa
 3195 02f6 EE030000 		.4byte	.LASF45
 3196 02fa 01       		.byte	0x1
 3197 02fb B107     		.2byte	0x7b1
 3198 02fd 00000000 		.4byte	.LFB12
 3199 0301 60000000 		.4byte	.LFE12-.LFB12
 3200 0305 01       		.uleb128 0x1
 3201 0306 9C       		.byte	0x9c
 3202 0307 1B030000 		.4byte	0x31b
 3203 030b 0B       		.uleb128 0xb
 3204 030c 30040000 		.4byte	.LASF46
 3205 0310 01       		.byte	0x1
 3206 0311 B107     		.2byte	0x7b1
 3207 0313 83000000 		.4byte	0x83
 3208 0317 02       		.uleb128 0x2
 3209 0318 91       		.byte	0x91
 3210 0319 74       		.sleb128 -12
 3211 031a 00       		.byte	0
 3212 031b 0E       		.uleb128 0xe
 3213 031c 2E050000 		.4byte	.LASF47
 3214 0320 01       		.byte	0x1
 3215 0321 CF07     		.2byte	0x7cf
 3216 0323 00000000 		.4byte	.LFB13
 3217 0327 28000000 		.4byte	.LFE13-.LFB13
 3218 032b 01       		.uleb128 0x1
 3219 032c 9C       		.byte	0x9c
 3220 032d 10       		.uleb128 0x10
 3221 032e 69020000 		.4byte	.LASF87
 3222 0332 01       		.byte	0x1
 3223 0333 E107     		.2byte	0x7e1
 3224 0335 83000000 		.4byte	0x83
 3225 0339 00000000 		.4byte	.LFB14
 3226 033d 18000000 		.4byte	.LFE14-.LFB14
 3227 0341 01       		.uleb128 0x1
 3228 0342 9C       		.byte	0x9c
 3229 0343 0E       		.uleb128 0xe
 3230 0344 81010000 		.4byte	.LASF48
 3231 0348 01       		.byte	0x1
 3232 0349 F107     		.2byte	0x7f1
 3233 034b 00000000 		.4byte	.LFB15
 3234 034f 14000000 		.4byte	.LFE15-.LFB15
 3235 0353 01       		.uleb128 0x1
 3236 0354 9C       		.byte	0x9c
 3237 0355 0F       		.uleb128 0xf
 3238 0356 A4020000 		.4byte	.LASF49
 3239 035a 01       		.byte	0x1
 3240 035b 0B08     		.2byte	0x80b
 3241 035d 83000000 		.4byte	0x83
 3242 0361 00000000 		.4byte	.LFB16
 3243 0365 30000000 		.4byte	.LFE16-.LFB16
 3244 0369 01       		.uleb128 0x1
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 108


 3245 036a 9C       		.byte	0x9c
 3246 036b 8E030000 		.4byte	0x38e
 3247 036f 0B       		.uleb128 0xb
 3248 0370 92040000 		.4byte	.LASF50
 3249 0374 01       		.byte	0x1
 3250 0375 0B08     		.2byte	0x80b
 3251 0377 83000000 		.4byte	0x83
 3252 037b 02       		.uleb128 0x2
 3253 037c 91       		.byte	0x91
 3254 037d 6C       		.sleb128 -20
 3255 037e 0C       		.uleb128 0xc
 3256 037f 58030000 		.4byte	.LASF40
 3257 0383 01       		.byte	0x1
 3258 0384 0D08     		.2byte	0x80d
 3259 0386 83000000 		.4byte	0x83
 3260 038a 02       		.uleb128 0x2
 3261 038b 91       		.byte	0x91
 3262 038c 74       		.sleb128 -12
 3263 038d 00       		.byte	0
 3264 038e 0F       		.uleb128 0xf
 3265 038f 4E000000 		.4byte	.LASF51
 3266 0393 01       		.byte	0x1
 3267 0394 2208     		.2byte	0x822
 3268 0396 83000000 		.4byte	0x83
 3269 039a 00000000 		.4byte	.LFB17
 3270 039e 24000000 		.4byte	.LFE17-.LFB17
 3271 03a2 01       		.uleb128 0x1
 3272 03a3 9C       		.byte	0x9c
 3273 03a4 B8030000 		.4byte	0x3b8
 3274 03a8 0C       		.uleb128 0xc
 3275 03a9 1E000000 		.4byte	.LASF52
 3276 03ad 01       		.byte	0x1
 3277 03ae 2408     		.2byte	0x824
 3278 03b0 83000000 		.4byte	0x83
 3279 03b4 02       		.uleb128 0x2
 3280 03b5 91       		.byte	0x91
 3281 03b6 74       		.sleb128 -12
 3282 03b7 00       		.byte	0
 3283 03b8 11       		.uleb128 0x11
 3284 03b9 99000000 		.4byte	.LASF53
 3285 03bd 01       		.byte	0x1
 3286 03be 3908     		.2byte	0x839
 3287 03c0 00000000 		.4byte	.LFB18
 3288 03c4 18000000 		.4byte	.LFE18-.LFB18
 3289 03c8 01       		.uleb128 0x1
 3290 03c9 9C       		.byte	0x9c
 3291 03ca DE030000 		.4byte	0x3de
 3292 03ce 0B       		.uleb128 0xb
 3293 03cf BC010000 		.4byte	.LASF54
 3294 03d3 01       		.byte	0x1
 3295 03d4 3908     		.2byte	0x839
 3296 03d6 83000000 		.4byte	0x83
 3297 03da 02       		.uleb128 0x2
 3298 03db 91       		.byte	0x91
 3299 03dc 74       		.sleb128 -12
 3300 03dd 00       		.byte	0
 3301 03de 0D       		.uleb128 0xd
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 109


 3302 03df 31030000 		.4byte	.LASF55
 3303 03e3 01       		.byte	0x1
 3304 03e4 5208     		.2byte	0x852
 3305 03e6 D2000000 		.4byte	0xd2
 3306 03ea 00000000 		.4byte	.LFB19
 3307 03ee 48000000 		.4byte	.LFE19-.LFB19
 3308 03f2 01       		.uleb128 0x1
 3309 03f3 9C       		.byte	0x9c
 3310 03f4 35040000 		.4byte	0x435
 3311 03f8 0B       		.uleb128 0xb
 3312 03f9 B5010000 		.4byte	.LASF56
 3313 03fd 01       		.byte	0x1
 3314 03fe 5208     		.2byte	0x852
 3315 0400 6B000000 		.4byte	0x6b
 3316 0404 02       		.uleb128 0x2
 3317 0405 91       		.byte	0x91
 3318 0406 6F       		.sleb128 -17
 3319 0407 0B       		.uleb128 0xb
 3320 0408 80030000 		.4byte	.LASF57
 3321 040c 01       		.byte	0x1
 3322 040d 5208     		.2byte	0x852
 3323 040f D2000000 		.4byte	0xd2
 3324 0413 02       		.uleb128 0x2
 3325 0414 91       		.byte	0x91
 3326 0415 68       		.sleb128 -24
 3327 0416 0C       		.uleb128 0xc
 3328 0417 40000000 		.4byte	.LASF58
 3329 041b 01       		.byte	0x1
 3330 041c 5408     		.2byte	0x854
 3331 041e D2000000 		.4byte	0xd2
 3332 0422 02       		.uleb128 0x2
 3333 0423 91       		.byte	0x91
 3334 0424 70       		.sleb128 -16
 3335 0425 0C       		.uleb128 0xc
 3336 0426 00000000 		.4byte	.LASF59
 3337 042a 01       		.byte	0x1
 3338 042b 5508     		.2byte	0x855
 3339 042d 35040000 		.4byte	0x435
 3340 0431 02       		.uleb128 0x2
 3341 0432 91       		.byte	0x91
 3342 0433 74       		.sleb128 -12
 3343 0434 00       		.byte	0
 3344 0435 06       		.uleb128 0x6
 3345 0436 04       		.byte	0x4
 3346 0437 D2000000 		.4byte	0xd2
 3347 043b 0D       		.uleb128 0xd
 3348 043c 65040000 		.4byte	.LASF60
 3349 0440 01       		.byte	0x1
 3350 0441 7408     		.2byte	0x874
 3351 0443 D2000000 		.4byte	0xd2
 3352 0447 00000000 		.4byte	.LFB20
 3353 044b 34000000 		.4byte	.LFE20-.LFB20
 3354 044f 01       		.uleb128 0x1
 3355 0450 9C       		.byte	0x9c
 3356 0451 74040000 		.4byte	0x474
 3357 0455 0B       		.uleb128 0xb
 3358 0456 B5010000 		.4byte	.LASF56
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 110


 3359 045a 01       		.byte	0x1
 3360 045b 7408     		.2byte	0x874
 3361 045d 6B000000 		.4byte	0x6b
 3362 0461 02       		.uleb128 0x2
 3363 0462 91       		.byte	0x91
 3364 0463 6F       		.sleb128 -17
 3365 0464 0C       		.uleb128 0xc
 3366 0465 00000000 		.4byte	.LASF59
 3367 0469 01       		.byte	0x1
 3368 046a 7608     		.2byte	0x876
 3369 046c 35040000 		.4byte	0x435
 3370 0470 02       		.uleb128 0x2
 3371 0471 91       		.byte	0x91
 3372 0472 74       		.sleb128 -12
 3373 0473 00       		.byte	0
 3374 0474 0D       		.uleb128 0xd
 3375 0475 E3020000 		.4byte	.LASF61
 3376 0479 01       		.byte	0x1
 3377 047a 8A08     		.2byte	0x88a
 3378 047c D2000000 		.4byte	0xd2
 3379 0480 00000000 		.4byte	.LFB21
 3380 0484 4C000000 		.4byte	.LFE21-.LFB21
 3381 0488 01       		.uleb128 0x1
 3382 0489 9C       		.byte	0x9c
 3383 048a CB040000 		.4byte	0x4cb
 3384 048e 0B       		.uleb128 0xb
 3385 048f B5010000 		.4byte	.LASF56
 3386 0493 01       		.byte	0x1
 3387 0494 8A08     		.2byte	0x88a
 3388 0496 6B000000 		.4byte	0x6b
 3389 049a 02       		.uleb128 0x2
 3390 049b 91       		.byte	0x91
 3391 049c 6F       		.sleb128 -17
 3392 049d 0B       		.uleb128 0xb
 3393 049e 80030000 		.4byte	.LASF57
 3394 04a2 01       		.byte	0x1
 3395 04a3 8A08     		.2byte	0x88a
 3396 04a5 D2000000 		.4byte	0xd2
 3397 04a9 02       		.uleb128 0x2
 3398 04aa 91       		.byte	0x91
 3399 04ab 68       		.sleb128 -24
 3400 04ac 0C       		.uleb128 0xc
 3401 04ad 40000000 		.4byte	.LASF58
 3402 04b1 01       		.byte	0x1
 3403 04b2 8C08     		.2byte	0x88c
 3404 04b4 D2000000 		.4byte	0xd2
 3405 04b8 02       		.uleb128 0x2
 3406 04b9 91       		.byte	0x91
 3407 04ba 70       		.sleb128 -16
 3408 04bb 0C       		.uleb128 0xc
 3409 04bc 00000000 		.4byte	.LASF59
 3410 04c0 01       		.byte	0x1
 3411 04c1 8D08     		.2byte	0x88d
 3412 04c3 35040000 		.4byte	0x435
 3413 04c7 02       		.uleb128 0x2
 3414 04c8 91       		.byte	0x91
 3415 04c9 74       		.sleb128 -12
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 111


 3416 04ca 00       		.byte	0
 3417 04cb 0D       		.uleb128 0xd
 3418 04cc 0F040000 		.4byte	.LASF62
 3419 04d0 01       		.byte	0x1
 3420 04d1 A608     		.2byte	0x8a6
 3421 04d3 D2000000 		.4byte	0xd2
 3422 04d7 00000000 		.4byte	.LFB22
 3423 04db 36000000 		.4byte	.LFE22-.LFB22
 3424 04df 01       		.uleb128 0x1
 3425 04e0 9C       		.byte	0x9c
 3426 04e1 04050000 		.4byte	0x504
 3427 04e5 0B       		.uleb128 0xb
 3428 04e6 B5010000 		.4byte	.LASF56
 3429 04ea 01       		.byte	0x1
 3430 04eb A608     		.2byte	0x8a6
 3431 04ed 6B000000 		.4byte	0x6b
 3432 04f1 02       		.uleb128 0x2
 3433 04f2 91       		.byte	0x91
 3434 04f3 6F       		.sleb128 -17
 3435 04f4 0C       		.uleb128 0xc
 3436 04f5 00000000 		.4byte	.LASF59
 3437 04f9 01       		.byte	0x1
 3438 04fa A808     		.2byte	0x8a8
 3439 04fc 35040000 		.4byte	0x435
 3440 0500 02       		.uleb128 0x2
 3441 0501 91       		.byte	0x91
 3442 0502 74       		.sleb128 -12
 3443 0503 00       		.byte	0
 3444 0504 0A       		.uleb128 0xa
 3445 0505 D7030000 		.4byte	.LASF63
 3446 0509 01       		.byte	0x1
 3447 050a B908     		.2byte	0x8b9
 3448 050c 00000000 		.4byte	.LFB23
 3449 0510 A8000000 		.4byte	.LFE23-.LFB23
 3450 0514 01       		.uleb128 0x1
 3451 0515 9C       		.byte	0x9c
 3452 0516 66050000 		.4byte	0x566
 3453 051a 0B       		.uleb128 0xb
 3454 051b B5010000 		.4byte	.LASF56
 3455 051f 01       		.byte	0x1
 3456 0520 B908     		.2byte	0x8b9
 3457 0522 6B000000 		.4byte	0x6b
 3458 0526 02       		.uleb128 0x2
 3459 0527 91       		.byte	0x91
 3460 0528 5F       		.sleb128 -33
 3461 0529 0B       		.uleb128 0xb
 3462 052a 13030000 		.4byte	.LASF64
 3463 052e 01       		.byte	0x1
 3464 052f B908     		.2byte	0x8b9
 3465 0531 6B000000 		.4byte	0x6b
 3466 0535 02       		.uleb128 0x2
 3467 0536 91       		.byte	0x91
 3468 0537 5E       		.sleb128 -34
 3469 0538 0C       		.uleb128 0xc
 3470 0539 08010000 		.4byte	.LASF23
 3471 053d 01       		.byte	0x1
 3472 053e BB08     		.2byte	0x8bb
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 112


 3473 0540 6B000000 		.4byte	0x6b
 3474 0544 02       		.uleb128 0x2
 3475 0545 91       		.byte	0x91
 3476 0546 6B       		.sleb128 -21
 3477 0547 0C       		.uleb128 0xc
 3478 0548 7B010000 		.4byte	.LASF65
 3479 054c 01       		.byte	0x1
 3480 054d BC08     		.2byte	0x8bc
 3481 054f 83000000 		.4byte	0x83
 3482 0553 02       		.uleb128 0x2
 3483 0554 91       		.byte	0x91
 3484 0555 6C       		.sleb128 -20
 3485 0556 0C       		.uleb128 0xc
 3486 0557 05020000 		.4byte	.LASF66
 3487 055b 01       		.byte	0x1
 3488 055c BD08     		.2byte	0x8bd
 3489 055e 83000000 		.4byte	0x83
 3490 0562 02       		.uleb128 0x2
 3491 0563 91       		.byte	0x91
 3492 0564 64       		.sleb128 -28
 3493 0565 00       		.byte	0
 3494 0566 0D       		.uleb128 0xd
 3495 0567 D9010000 		.4byte	.LASF67
 3496 056b 01       		.byte	0x1
 3497 056c DB08     		.2byte	0x8db
 3498 056e 6B000000 		.4byte	0x6b
 3499 0572 00000000 		.4byte	.LFB24
 3500 0576 5C000000 		.4byte	.LFE24-.LFB24
 3501 057a 01       		.uleb128 0x1
 3502 057b 9C       		.byte	0x9c
 3503 057c 9F050000 		.4byte	0x59f
 3504 0580 0B       		.uleb128 0xb
 3505 0581 B5010000 		.4byte	.LASF56
 3506 0585 01       		.byte	0x1
 3507 0586 DB08     		.2byte	0x8db
 3508 0588 6B000000 		.4byte	0x6b
 3509 058c 02       		.uleb128 0x2
 3510 058d 91       		.byte	0x91
 3511 058e 6F       		.sleb128 -17
 3512 058f 0C       		.uleb128 0xc
 3513 0590 13030000 		.4byte	.LASF64
 3514 0594 01       		.byte	0x1
 3515 0595 DD08     		.2byte	0x8dd
 3516 0597 6B000000 		.4byte	0x6b
 3517 059b 02       		.uleb128 0x2
 3518 059c 91       		.byte	0x91
 3519 059d 77       		.sleb128 -9
 3520 059e 00       		.byte	0
 3521 059f 11       		.uleb128 0x11
 3522 05a0 59040000 		.4byte	.LASF68
 3523 05a4 01       		.byte	0x1
 3524 05a5 F008     		.2byte	0x8f0
 3525 05a7 00000000 		.4byte	.LFB25
 3526 05ab 28000000 		.4byte	.LFE25-.LFB25
 3527 05af 01       		.uleb128 0x1
 3528 05b0 9C       		.byte	0x9c
 3529 05b1 C5050000 		.4byte	0x5c5
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 113


 3530 05b5 0B       		.uleb128 0xb
 3531 05b6 B5010000 		.4byte	.LASF56
 3532 05ba 01       		.byte	0x1
 3533 05bb F008     		.2byte	0x8f0
 3534 05bd 6B000000 		.4byte	0x6b
 3535 05c1 02       		.uleb128 0x2
 3536 05c2 91       		.byte	0x91
 3537 05c3 77       		.sleb128 -9
 3538 05c4 00       		.byte	0
 3539 05c5 0F       		.uleb128 0xf
 3540 05c6 CF000000 		.4byte	.LASF69
 3541 05ca 01       		.byte	0x1
 3542 05cb 0209     		.2byte	0x902
 3543 05cd 6B000000 		.4byte	0x6b
 3544 05d1 00000000 		.4byte	.LFB26
 3545 05d5 30000000 		.4byte	.LFE26-.LFB26
 3546 05d9 01       		.uleb128 0x1
 3547 05da 9C       		.byte	0x9c
 3548 05db EF050000 		.4byte	0x5ef
 3549 05df 0B       		.uleb128 0xb
 3550 05e0 B5010000 		.4byte	.LASF56
 3551 05e4 01       		.byte	0x1
 3552 05e5 0209     		.2byte	0x902
 3553 05e7 6B000000 		.4byte	0x6b
 3554 05eb 02       		.uleb128 0x2
 3555 05ec 91       		.byte	0x91
 3556 05ed 77       		.sleb128 -9
 3557 05ee 00       		.byte	0
 3558 05ef 11       		.uleb128 0x11
 3559 05f0 33010000 		.4byte	.LASF70
 3560 05f4 01       		.byte	0x1
 3561 05f5 1209     		.2byte	0x912
 3562 05f7 00000000 		.4byte	.LFB27
 3563 05fb 28000000 		.4byte	.LFE27-.LFB27
 3564 05ff 01       		.uleb128 0x1
 3565 0600 9C       		.byte	0x9c
 3566 0601 15060000 		.4byte	0x615
 3567 0605 0B       		.uleb128 0xb
 3568 0606 B5010000 		.4byte	.LASF56
 3569 060a 01       		.byte	0x1
 3570 060b 1209     		.2byte	0x912
 3571 060d 6B000000 		.4byte	0x6b
 3572 0611 02       		.uleb128 0x2
 3573 0612 91       		.byte	0x91
 3574 0613 77       		.sleb128 -9
 3575 0614 00       		.byte	0
 3576 0615 11       		.uleb128 0x11
 3577 0616 94020000 		.4byte	.LASF71
 3578 061a 01       		.byte	0x1
 3579 061b 2009     		.2byte	0x920
 3580 061d 00000000 		.4byte	.LFB28
 3581 0621 28000000 		.4byte	.LFE28-.LFB28
 3582 0625 01       		.uleb128 0x1
 3583 0626 9C       		.byte	0x9c
 3584 0627 3B060000 		.4byte	0x63b
 3585 062b 0B       		.uleb128 0xb
 3586 062c B5010000 		.4byte	.LASF56
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 114


 3587 0630 01       		.byte	0x1
 3588 0631 2009     		.2byte	0x920
 3589 0633 6B000000 		.4byte	0x6b
 3590 0637 02       		.uleb128 0x2
 3591 0638 91       		.byte	0x91
 3592 0639 77       		.sleb128 -9
 3593 063a 00       		.byte	0
 3594 063b 11       		.uleb128 0x11
 3595 063c 6E030000 		.4byte	.LASF72
 3596 0640 01       		.byte	0x1
 3597 0641 2F09     		.2byte	0x92f
 3598 0643 00000000 		.4byte	.LFB29
 3599 0647 28000000 		.4byte	.LFE29-.LFB29
 3600 064b 01       		.uleb128 0x1
 3601 064c 9C       		.byte	0x9c
 3602 064d 61060000 		.4byte	0x661
 3603 0651 0B       		.uleb128 0xb
 3604 0652 B5010000 		.4byte	.LASF56
 3605 0656 01       		.byte	0x1
 3606 0657 2F09     		.2byte	0x92f
 3607 0659 6B000000 		.4byte	0x6b
 3608 065d 02       		.uleb128 0x2
 3609 065e 91       		.byte	0x91
 3610 065f 77       		.sleb128 -9
 3611 0660 00       		.byte	0
 3612 0661 11       		.uleb128 0x11
 3613 0662 3A040000 		.4byte	.LASF73
 3614 0666 01       		.byte	0x1
 3615 0667 3E09     		.2byte	0x93e
 3616 0669 00000000 		.4byte	.LFB30
 3617 066d 14000000 		.4byte	.LFE30-.LFB30
 3618 0671 01       		.uleb128 0x1
 3619 0672 9C       		.byte	0x9c
 3620 0673 87060000 		.4byte	0x687
 3621 0677 0B       		.uleb128 0xb
 3622 0678 92040000 		.4byte	.LASF50
 3623 067c 01       		.byte	0x1
 3624 067d 3E09     		.2byte	0x93e
 3625 067f 6B000000 		.4byte	0x6b
 3626 0683 02       		.uleb128 0x2
 3627 0684 91       		.byte	0x91
 3628 0685 77       		.sleb128 -9
 3629 0686 00       		.byte	0
 3630 0687 0E       		.uleb128 0xe
 3631 0688 A6000000 		.4byte	.LASF74
 3632 068c 01       		.byte	0x1
 3633 068d 5609     		.2byte	0x956
 3634 068f 00000000 		.4byte	.LFB31
 3635 0693 20000000 		.4byte	.LFE31-.LFB31
 3636 0697 01       		.uleb128 0x1
 3637 0698 9C       		.byte	0x9c
 3638 0699 0A       		.uleb128 0xa
 3639 069a 0C050000 		.4byte	.LASF75
 3640 069e 01       		.byte	0x1
 3641 069f 6A09     		.2byte	0x96a
 3642 06a1 00000000 		.4byte	.LFB32
 3643 06a5 48000000 		.4byte	.LFE32-.LFB32
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 115


 3644 06a9 01       		.uleb128 0x1
 3645 06aa 9C       		.byte	0x9c
 3646 06ab BF060000 		.4byte	0x6bf
 3647 06af 0B       		.uleb128 0xb
 3648 06b0 1E040000 		.4byte	.LASF76
 3649 06b4 01       		.byte	0x1
 3650 06b5 6A09     		.2byte	0x96a
 3651 06b7 83000000 		.4byte	0x83
 3652 06bb 02       		.uleb128 0x2
 3653 06bc 91       		.byte	0x91
 3654 06bd 74       		.sleb128 -12
 3655 06be 00       		.byte	0
 3656 06bf 0A       		.uleb128 0xa
 3657 06c0 6A010000 		.4byte	.LASF77
 3658 06c4 01       		.byte	0x1
 3659 06c5 8109     		.2byte	0x981
 3660 06c7 00000000 		.4byte	.LFB33
 3661 06cb 28000000 		.4byte	.LFE33-.LFB33
 3662 06cf 01       		.uleb128 0x1
 3663 06d0 9C       		.byte	0x9c
 3664 06d1 E5060000 		.4byte	0x6e5
 3665 06d5 0B       		.uleb128 0xb
 3666 06d6 91060000 		.4byte	.LASF78
 3667 06da 01       		.byte	0x1
 3668 06db 8109     		.2byte	0x981
 3669 06dd 77000000 		.4byte	0x77
 3670 06e1 02       		.uleb128 0x2
 3671 06e2 91       		.byte	0x91
 3672 06e3 76       		.sleb128 -10
 3673 06e4 00       		.byte	0
 3674 06e5 0A       		.uleb128 0xa
 3675 06e6 FC000000 		.4byte	.LASF79
 3676 06ea 01       		.byte	0x1
 3677 06eb 8F09     		.2byte	0x98f
 3678 06ed 00000000 		.4byte	.LFB34
 3679 06f1 84000000 		.4byte	.LFE34-.LFB34
 3680 06f5 01       		.uleb128 0x1
 3681 06f6 9C       		.byte	0x9c
 3682 06f7 0B070000 		.4byte	0x70b
 3683 06fb 0B       		.uleb128 0xb
 3684 06fc F7000000 		.4byte	.LASF31
 3685 0700 01       		.byte	0x1
 3686 0701 8F09     		.2byte	0x98f
 3687 0703 83000000 		.4byte	0x83
 3688 0707 02       		.uleb128 0x2
 3689 0708 91       		.byte	0x91
 3690 0709 74       		.sleb128 -12
 3691 070a 00       		.byte	0
 3692 070b 12       		.uleb128 0x12
 3693 070c 49030000 		.4byte	.LASF80
 3694 0710 01       		.byte	0x1
 3695 0711 AF09     		.2byte	0x9af
 3696 0713 00000000 		.4byte	.LFB35
 3697 0717 24000000 		.4byte	.LFE35-.LFB35
 3698 071b 01       		.uleb128 0x1
 3699 071c 9C       		.byte	0x9c
 3700 071d 0A       		.uleb128 0xa
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 116


 3701 071e F7010000 		.4byte	.LASF81
 3702 0722 01       		.byte	0x1
 3703 0723 CC09     		.2byte	0x9cc
 3704 0725 00000000 		.4byte	.LFB36
 3705 0729 64000000 		.4byte	.LFE36-.LFB36
 3706 072d 01       		.uleb128 0x1
 3707 072e 9C       		.byte	0x9c
 3708 072f 41070000 		.4byte	0x741
 3709 0733 13       		.uleb128 0x13
 3710 0734 6900     		.ascii	"i\000"
 3711 0736 01       		.byte	0x1
 3712 0737 CE09     		.2byte	0x9ce
 3713 0739 83000000 		.4byte	0x83
 3714 073d 02       		.uleb128 0x2
 3715 073e 91       		.byte	0x91
 3716 073f 74       		.sleb128 -12
 3717 0740 00       		.byte	0
 3718 0741 12       		.uleb128 0x12
 3719 0742 AB040000 		.4byte	.LASF82
 3720 0746 01       		.byte	0x1
 3721 0747 EB09     		.2byte	0x9eb
 3722 0749 00000000 		.4byte	.LFB37
 3723 074d 1C000000 		.4byte	.LFE37-.LFB37
 3724 0751 01       		.uleb128 0x1
 3725 0752 9C       		.byte	0x9c
 3726 0753 0E       		.uleb128 0xe
 3727 0754 8F050000 		.4byte	.LASF83
 3728 0758 01       		.byte	0x1
 3729 0759 FC09     		.2byte	0x9fc
 3730 075b 00000000 		.4byte	.LFB38
 3731 075f 18000000 		.4byte	.LFE38-.LFB38
 3732 0763 01       		.uleb128 0x1
 3733 0764 9C       		.byte	0x9c
 3734 0765 0E       		.uleb128 0xe
 3735 0766 B6000000 		.4byte	.LASF84
 3736 076a 01       		.byte	0x1
 3737 076b 0C0A     		.2byte	0xa0c
 3738 076d 00000000 		.4byte	.LFB39
 3739 0771 18000000 		.4byte	.LFE39-.LFB39
 3740 0775 01       		.uleb128 0x1
 3741 0776 9C       		.byte	0x9c
 3742 0777 0E       		.uleb128 0xe
 3743 0778 14050000 		.4byte	.LASF85
 3744 077c 01       		.byte	0x1
 3745 077d 1C0A     		.2byte	0xa1c
 3746 077f 00000000 		.4byte	.LFB40
 3747 0783 18000000 		.4byte	.LFE40-.LFB40
 3748 0787 01       		.uleb128 0x1
 3749 0788 9C       		.byte	0x9c
 3750 0789 11       		.uleb128 0x11
 3751 078a A5060000 		.4byte	.LASF86
 3752 078e 01       		.byte	0x1
 3753 078f 2D0A     		.2byte	0xa2d
 3754 0791 00000000 		.4byte	.LFB41
 3755 0795 1C000000 		.4byte	.LFE41-.LFB41
 3756 0799 01       		.uleb128 0x1
 3757 079a 9C       		.byte	0x9c
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 117


 3758 079b AF070000 		.4byte	0x7af
 3759 079f 0B       		.uleb128 0xb
 3760 07a0 05020000 		.4byte	.LASF66
 3761 07a4 01       		.byte	0x1
 3762 07a5 2D0A     		.2byte	0xa2d
 3763 07a7 83000000 		.4byte	0x83
 3764 07ab 02       		.uleb128 0x2
 3765 07ac 91       		.byte	0x91
 3766 07ad 74       		.sleb128 -12
 3767 07ae 00       		.byte	0
 3768 07af 10       		.uleb128 0x10
 3769 07b0 17010000 		.4byte	.LASF88
 3770 07b4 01       		.byte	0x1
 3771 07b5 3D0A     		.2byte	0xa3d
 3772 07b7 83000000 		.4byte	0x83
 3773 07bb 00000000 		.4byte	.LFB42
 3774 07bf 18000000 		.4byte	.LFE42-.LFB42
 3775 07c3 01       		.uleb128 0x1
 3776 07c4 9C       		.byte	0x9c
 3777 07c5 10       		.uleb128 0x10
 3778 07c6 B7030000 		.4byte	.LASF89
 3779 07ca 01       		.byte	0x1
 3780 07cb 4D0A     		.2byte	0xa4d
 3781 07cd 83000000 		.4byte	0x83
 3782 07d1 00000000 		.4byte	.LFB43
 3783 07d5 18000000 		.4byte	.LFE43-.LFB43
 3784 07d9 01       		.uleb128 0x1
 3785 07da 9C       		.byte	0x9c
 3786 07db 11       		.uleb128 0x11
 3787 07dc CB020000 		.4byte	.LASF90
 3788 07e0 01       		.byte	0x1
 3789 07e1 6D0A     		.2byte	0xa6d
 3790 07e3 00000000 		.4byte	.LFB44
 3791 07e7 34000000 		.4byte	.LFE44-.LFB44
 3792 07eb 01       		.uleb128 0x1
 3793 07ec 9C       		.byte	0x9c
 3794 07ed 01080000 		.4byte	0x801
 3795 07f1 0B       		.uleb128 0xb
 3796 07f2 0B020000 		.4byte	.LASF91
 3797 07f6 01       		.byte	0x1
 3798 07f7 6D0A     		.2byte	0xa6d
 3799 07f9 83000000 		.4byte	0x83
 3800 07fd 02       		.uleb128 0x2
 3801 07fe 91       		.byte	0x91
 3802 07ff 74       		.sleb128 -12
 3803 0800 00       		.byte	0
 3804 0801 10       		.uleb128 0x10
 3805 0802 25020000 		.4byte	.LASF92
 3806 0806 01       		.byte	0x1
 3807 0807 8A0A     		.2byte	0xa8a
 3808 0809 83000000 		.4byte	0x83
 3809 080d 00000000 		.4byte	.LFB45
 3810 0811 18000000 		.4byte	.LFE45-.LFB45
 3811 0815 01       		.uleb128 0x1
 3812 0816 9C       		.byte	0x9c
 3813 0817 0E       		.uleb128 0xe
 3814 0818 48020000 		.4byte	.LASF93
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 118


 3815 081c 01       		.byte	0x1
 3816 081d 970A     		.2byte	0xa97
 3817 081f 00000000 		.4byte	.LFB46
 3818 0823 14000000 		.4byte	.LFE46-.LFB46
 3819 0827 01       		.uleb128 0x1
 3820 0828 9C       		.byte	0x9c
 3821 0829 0F       		.uleb128 0xf
 3822 082a 5A060000 		.4byte	.LASF94
 3823 082e 01       		.byte	0x1
 3824 082f BA0A     		.2byte	0xaba
 3825 0831 EC000000 		.4byte	0xec
 3826 0835 00000000 		.4byte	.LFB47
 3827 0839 2C000000 		.4byte	.LFE47-.LFB47
 3828 083d 01       		.uleb128 0x1
 3829 083e 9C       		.byte	0x9c
 3830 083f 71080000 		.4byte	0x871
 3831 0843 0B       		.uleb128 0xb
 3832 0844 B5010000 		.4byte	.LASF56
 3833 0848 01       		.byte	0x1
 3834 0849 BA0A     		.2byte	0xaba
 3835 084b 83000000 		.4byte	0x83
 3836 084f 02       		.uleb128 0x2
 3837 0850 91       		.byte	0x91
 3838 0851 6C       		.sleb128 -20
 3839 0852 0B       		.uleb128 0xb
 3840 0853 9D030000 		.4byte	.LASF95
 3841 0857 01       		.byte	0x1
 3842 0858 BA0A     		.2byte	0xaba
 3843 085a EC000000 		.4byte	0xec
 3844 085e 02       		.uleb128 0x2
 3845 085f 91       		.byte	0x91
 3846 0860 68       		.sleb128 -24
 3847 0861 0C       		.uleb128 0xc
 3848 0862 47000000 		.4byte	.LASF96
 3849 0866 01       		.byte	0x1
 3850 0867 BC0A     		.2byte	0xabc
 3851 0869 EC000000 		.4byte	0xec
 3852 086d 02       		.uleb128 0x2
 3853 086e 91       		.byte	0x91
 3854 086f 74       		.sleb128 -12
 3855 0870 00       		.byte	0
 3856 0871 0F       		.uleb128 0xf
 3857 0872 40010000 		.4byte	.LASF97
 3858 0876 01       		.byte	0x1
 3859 0877 D20A     		.2byte	0xad2
 3860 0879 EC000000 		.4byte	0xec
 3861 087d 00000000 		.4byte	.LFB48
 3862 0881 1C000000 		.4byte	.LFE48-.LFB48
 3863 0885 01       		.uleb128 0x1
 3864 0886 9C       		.byte	0x9c
 3865 0887 9B080000 		.4byte	0x89b
 3866 088b 0B       		.uleb128 0xb
 3867 088c B5010000 		.4byte	.LASF56
 3868 0890 01       		.byte	0x1
 3869 0891 D20A     		.2byte	0xad2
 3870 0893 83000000 		.4byte	0x83
 3871 0897 02       		.uleb128 0x2
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 119


 3872 0898 91       		.byte	0x91
 3873 0899 74       		.sleb128 -12
 3874 089a 00       		.byte	0
 3875 089b 14       		.uleb128 0x14
 3876 089c B8060000 		.4byte	.LASF110
 3877 08a0 01       		.byte	0x1
 3878 08a1 DF0A     		.2byte	0xadf
 3879 08a3 00000000 		.4byte	.LFB49
 3880 08a7 44000000 		.4byte	.LFE49-.LFB49
 3881 08ab 01       		.uleb128 0x1
 3882 08ac 9C       		.byte	0x9c
 3883 08ad BF080000 		.4byte	0x8bf
 3884 08b1 13       		.uleb128 0x13
 3885 08b2 6900     		.ascii	"i\000"
 3886 08b4 01       		.byte	0x1
 3887 08b5 E10A     		.2byte	0xae1
 3888 08b7 83000000 		.4byte	0x83
 3889 08bb 02       		.uleb128 0x2
 3890 08bc 91       		.byte	0x91
 3891 08bd 74       		.sleb128 -12
 3892 08be 00       		.byte	0
 3893 08bf 11       		.uleb128 0x11
 3894 08c0 17020000 		.4byte	.LASF98
 3895 08c4 01       		.byte	0x1
 3896 08c5 FF0A     		.2byte	0xaff
 3897 08c7 00000000 		.4byte	.LFB50
 3898 08cb C0000000 		.4byte	.LFE50-.LFB50
 3899 08cf 01       		.uleb128 0x1
 3900 08d0 9C       		.byte	0x9c
 3901 08d1 E5080000 		.4byte	0x8e5
 3902 08d5 0B       		.uleb128 0xb
 3903 08d6 03050000 		.4byte	.LASF99
 3904 08da 01       		.byte	0x1
 3905 08db FF0A     		.2byte	0xaff
 3906 08dd E5080000 		.4byte	0x8e5
 3907 08e1 02       		.uleb128 0x2
 3908 08e2 91       		.byte	0x91
 3909 08e3 74       		.sleb128 -12
 3910 08e4 00       		.byte	0
 3911 08e5 06       		.uleb128 0x6
 3912 08e6 04       		.byte	0x4
 3913 08e7 83000000 		.4byte	0x83
 3914 08eb 15       		.uleb128 0x15
 3915 08ec EC000000 		.4byte	0xec
 3916 08f0 FB080000 		.4byte	0x8fb
 3917 08f4 16       		.uleb128 0x16
 3918 08f5 E5000000 		.4byte	0xe5
 3919 08f9 04       		.byte	0x4
 3920 08fa 00       		.byte	0
 3921 08fb 17       		.uleb128 0x17
 3922 08fc E2040000 		.4byte	.LASF100
 3923 0900 01       		.byte	0x1
 3924 0901 22       		.byte	0x22
 3925 0902 EB080000 		.4byte	0x8eb
 3926 0906 05       		.uleb128 0x5
 3927 0907 03       		.byte	0x3
 3928 0908 00000000 		.4byte	CySysTickCallbacks
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 120


 3929 090c 18       		.uleb128 0x18
 3930 090d C9030000 		.4byte	.LASF101
 3931 0911 01       		.byte	0x1
 3932 0912 1B       		.byte	0x1b
 3933 0913 83000000 		.4byte	0x83
 3934 0917 05       		.uleb128 0x5
 3935 0918 03       		.byte	0x3
 3936 0919 00000000 		.4byte	cydelayFreqHz
 3937 091d 18       		.uleb128 0x18
 3938 091e 5B010000 		.4byte	.LASF102
 3939 0922 01       		.byte	0x1
 3940 0923 1C       		.byte	0x1c
 3941 0924 83000000 		.4byte	0x83
 3942 0928 05       		.uleb128 0x5
 3943 0929 03       		.byte	0x3
 3944 092a 00000000 		.4byte	cydelayFreqKhz
 3945 092e 18       		.uleb128 0x18
 3946 092f 3E050000 		.4byte	.LASF103
 3947 0933 01       		.byte	0x1
 3948 0934 1D       		.byte	0x1d
 3949 0935 6B000000 		.4byte	0x6b
 3950 0939 05       		.uleb128 0x5
 3951 093a 03       		.byte	0x3
 3952 093b 00000000 		.4byte	cydelayFreqMhz
 3953 093f 18       		.uleb128 0x18
 3954 0940 EA010000 		.4byte	.LASF104
 3955 0944 01       		.byte	0x1
 3956 0945 1E       		.byte	0x1e
 3957 0946 83000000 		.4byte	0x83
 3958 094a 05       		.uleb128 0x5
 3959 094b 03       		.byte	0x3
 3960 094c 00000000 		.4byte	cydelay32kMs
 3961 0950 18       		.uleb128 0x18
 3962 0951 88000000 		.4byte	.LASF105
 3963 0955 01       		.byte	0x1
 3964 0956 35       		.byte	0x35
 3965 0957 83000000 		.4byte	0x83
 3966 095b 05       		.uleb128 0x5
 3967 095c 03       		.byte	0x3
 3968 095d 00000000 		.4byte	CySysTickInitVar
 3969 0961 15       		.uleb128 0x15
 3970 0962 6B000000 		.4byte	0x6b
 3971 0966 71090000 		.4byte	0x971
 3972 096a 16       		.uleb128 0x16
 3973 096b E5000000 		.4byte	0xe5
 3974 096f 2D       		.byte	0x2d
 3975 0970 00       		.byte	0
 3976 0971 18       		.uleb128 0x18
 3977 0972 A6030000 		.4byte	.LASF106
 3978 0976 01       		.byte	0x1
 3979 0977 3A       		.byte	0x3a
 3980 0978 82090000 		.4byte	0x982
 3981 097c 05       		.uleb128 0x5
 3982 097d 03       		.byte	0x3
 3983 097e 00000000 		.4byte	cyImoFreqMhz2Reg
 3984 0982 19       		.uleb128 0x19
 3985 0983 61090000 		.4byte	0x961
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 121


 3986 0987 00       		.byte	0
 3987              		.section	.debug_abbrev,"",%progbits
 3988              	.Ldebug_abbrev0:
 3989 0000 01       		.uleb128 0x1
 3990 0001 11       		.uleb128 0x11
 3991 0002 01       		.byte	0x1
 3992 0003 25       		.uleb128 0x25
 3993 0004 0E       		.uleb128 0xe
 3994 0005 13       		.uleb128 0x13
 3995 0006 0B       		.uleb128 0xb
 3996 0007 03       		.uleb128 0x3
 3997 0008 0E       		.uleb128 0xe
 3998 0009 1B       		.uleb128 0x1b
 3999 000a 0E       		.uleb128 0xe
 4000 000b 55       		.uleb128 0x55
 4001 000c 17       		.uleb128 0x17
 4002 000d 11       		.uleb128 0x11
 4003 000e 01       		.uleb128 0x1
 4004 000f 10       		.uleb128 0x10
 4005 0010 17       		.uleb128 0x17
 4006 0011 00       		.byte	0
 4007 0012 00       		.byte	0
 4008 0013 02       		.uleb128 0x2
 4009 0014 24       		.uleb128 0x24
 4010 0015 00       		.byte	0
 4011 0016 0B       		.uleb128 0xb
 4012 0017 0B       		.uleb128 0xb
 4013 0018 3E       		.uleb128 0x3e
 4014 0019 0B       		.uleb128 0xb
 4015 001a 03       		.uleb128 0x3
 4016 001b 0E       		.uleb128 0xe
 4017 001c 00       		.byte	0
 4018 001d 00       		.byte	0
 4019 001e 03       		.uleb128 0x3
 4020 001f 24       		.uleb128 0x24
 4021 0020 00       		.byte	0
 4022 0021 0B       		.uleb128 0xb
 4023 0022 0B       		.uleb128 0xb
 4024 0023 3E       		.uleb128 0x3e
 4025 0024 0B       		.uleb128 0xb
 4026 0025 03       		.uleb128 0x3
 4027 0026 08       		.uleb128 0x8
 4028 0027 00       		.byte	0
 4029 0028 00       		.byte	0
 4030 0029 04       		.uleb128 0x4
 4031 002a 16       		.uleb128 0x16
 4032 002b 00       		.byte	0
 4033 002c 03       		.uleb128 0x3
 4034 002d 0E       		.uleb128 0xe
 4035 002e 3A       		.uleb128 0x3a
 4036 002f 0B       		.uleb128 0xb
 4037 0030 3B       		.uleb128 0x3b
 4038 0031 05       		.uleb128 0x5
 4039 0032 49       		.uleb128 0x49
 4040 0033 13       		.uleb128 0x13
 4041 0034 00       		.byte	0
 4042 0035 00       		.byte	0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 122


 4043 0036 05       		.uleb128 0x5
 4044 0037 35       		.uleb128 0x35
 4045 0038 00       		.byte	0
 4046 0039 49       		.uleb128 0x49
 4047 003a 13       		.uleb128 0x13
 4048 003b 00       		.byte	0
 4049 003c 00       		.byte	0
 4050 003d 06       		.uleb128 0x6
 4051 003e 0F       		.uleb128 0xf
 4052 003f 00       		.byte	0
 4053 0040 0B       		.uleb128 0xb
 4054 0041 0B       		.uleb128 0xb
 4055 0042 49       		.uleb128 0x49
 4056 0043 13       		.uleb128 0x13
 4057 0044 00       		.byte	0
 4058 0045 00       		.byte	0
 4059 0046 07       		.uleb128 0x7
 4060 0047 15       		.uleb128 0x15
 4061 0048 00       		.byte	0
 4062 0049 27       		.uleb128 0x27
 4063 004a 19       		.uleb128 0x19
 4064 004b 00       		.byte	0
 4065 004c 00       		.byte	0
 4066 004d 08       		.uleb128 0x8
 4067 004e 16       		.uleb128 0x16
 4068 004f 00       		.byte	0
 4069 0050 03       		.uleb128 0x3
 4070 0051 0E       		.uleb128 0xe
 4071 0052 3A       		.uleb128 0x3a
 4072 0053 0B       		.uleb128 0xb
 4073 0054 3B       		.uleb128 0x3b
 4074 0055 0B       		.uleb128 0xb
 4075 0056 49       		.uleb128 0x49
 4076 0057 13       		.uleb128 0x13
 4077 0058 00       		.byte	0
 4078 0059 00       		.byte	0
 4079 005a 09       		.uleb128 0x9
 4080 005b 2E       		.uleb128 0x2e
 4081 005c 00       		.byte	0
 4082 005d 3F       		.uleb128 0x3f
 4083 005e 19       		.uleb128 0x19
 4084 005f 03       		.uleb128 0x3
 4085 0060 0E       		.uleb128 0xe
 4086 0061 3A       		.uleb128 0x3a
 4087 0062 0B       		.uleb128 0xb
 4088 0063 3B       		.uleb128 0x3b
 4089 0064 0B       		.uleb128 0xb
 4090 0065 27       		.uleb128 0x27
 4091 0066 19       		.uleb128 0x19
 4092 0067 11       		.uleb128 0x11
 4093 0068 01       		.uleb128 0x1
 4094 0069 12       		.uleb128 0x12
 4095 006a 06       		.uleb128 0x6
 4096 006b 40       		.uleb128 0x40
 4097 006c 18       		.uleb128 0x18
 4098 006d 9742     		.uleb128 0x2117
 4099 006f 19       		.uleb128 0x19
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 123


 4100 0070 00       		.byte	0
 4101 0071 00       		.byte	0
 4102 0072 0A       		.uleb128 0xa
 4103 0073 2E       		.uleb128 0x2e
 4104 0074 01       		.byte	0x1
 4105 0075 3F       		.uleb128 0x3f
 4106 0076 19       		.uleb128 0x19
 4107 0077 03       		.uleb128 0x3
 4108 0078 0E       		.uleb128 0xe
 4109 0079 3A       		.uleb128 0x3a
 4110 007a 0B       		.uleb128 0xb
 4111 007b 3B       		.uleb128 0x3b
 4112 007c 05       		.uleb128 0x5
 4113 007d 27       		.uleb128 0x27
 4114 007e 19       		.uleb128 0x19
 4115 007f 11       		.uleb128 0x11
 4116 0080 01       		.uleb128 0x1
 4117 0081 12       		.uleb128 0x12
 4118 0082 06       		.uleb128 0x6
 4119 0083 40       		.uleb128 0x40
 4120 0084 18       		.uleb128 0x18
 4121 0085 9642     		.uleb128 0x2116
 4122 0087 19       		.uleb128 0x19
 4123 0088 01       		.uleb128 0x1
 4124 0089 13       		.uleb128 0x13
 4125 008a 00       		.byte	0
 4126 008b 00       		.byte	0
 4127 008c 0B       		.uleb128 0xb
 4128 008d 05       		.uleb128 0x5
 4129 008e 00       		.byte	0
 4130 008f 03       		.uleb128 0x3
 4131 0090 0E       		.uleb128 0xe
 4132 0091 3A       		.uleb128 0x3a
 4133 0092 0B       		.uleb128 0xb
 4134 0093 3B       		.uleb128 0x3b
 4135 0094 05       		.uleb128 0x5
 4136 0095 49       		.uleb128 0x49
 4137 0096 13       		.uleb128 0x13
 4138 0097 02       		.uleb128 0x2
 4139 0098 18       		.uleb128 0x18
 4140 0099 00       		.byte	0
 4141 009a 00       		.byte	0
 4142 009b 0C       		.uleb128 0xc
 4143 009c 34       		.uleb128 0x34
 4144 009d 00       		.byte	0
 4145 009e 03       		.uleb128 0x3
 4146 009f 0E       		.uleb128 0xe
 4147 00a0 3A       		.uleb128 0x3a
 4148 00a1 0B       		.uleb128 0xb
 4149 00a2 3B       		.uleb128 0x3b
 4150 00a3 05       		.uleb128 0x5
 4151 00a4 49       		.uleb128 0x49
 4152 00a5 13       		.uleb128 0x13
 4153 00a6 02       		.uleb128 0x2
 4154 00a7 18       		.uleb128 0x18
 4155 00a8 00       		.byte	0
 4156 00a9 00       		.byte	0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 124


 4157 00aa 0D       		.uleb128 0xd
 4158 00ab 2E       		.uleb128 0x2e
 4159 00ac 01       		.byte	0x1
 4160 00ad 3F       		.uleb128 0x3f
 4161 00ae 19       		.uleb128 0x19
 4162 00af 03       		.uleb128 0x3
 4163 00b0 0E       		.uleb128 0xe
 4164 00b1 3A       		.uleb128 0x3a
 4165 00b2 0B       		.uleb128 0xb
 4166 00b3 3B       		.uleb128 0x3b
 4167 00b4 05       		.uleb128 0x5
 4168 00b5 27       		.uleb128 0x27
 4169 00b6 19       		.uleb128 0x19
 4170 00b7 49       		.uleb128 0x49
 4171 00b8 13       		.uleb128 0x13
 4172 00b9 11       		.uleb128 0x11
 4173 00ba 01       		.uleb128 0x1
 4174 00bb 12       		.uleb128 0x12
 4175 00bc 06       		.uleb128 0x6
 4176 00bd 40       		.uleb128 0x40
 4177 00be 18       		.uleb128 0x18
 4178 00bf 9642     		.uleb128 0x2116
 4179 00c1 19       		.uleb128 0x19
 4180 00c2 01       		.uleb128 0x1
 4181 00c3 13       		.uleb128 0x13
 4182 00c4 00       		.byte	0
 4183 00c5 00       		.byte	0
 4184 00c6 0E       		.uleb128 0xe
 4185 00c7 2E       		.uleb128 0x2e
 4186 00c8 00       		.byte	0
 4187 00c9 3F       		.uleb128 0x3f
 4188 00ca 19       		.uleb128 0x19
 4189 00cb 03       		.uleb128 0x3
 4190 00cc 0E       		.uleb128 0xe
 4191 00cd 3A       		.uleb128 0x3a
 4192 00ce 0B       		.uleb128 0xb
 4193 00cf 3B       		.uleb128 0x3b
 4194 00d0 05       		.uleb128 0x5
 4195 00d1 27       		.uleb128 0x27
 4196 00d2 19       		.uleb128 0x19
 4197 00d3 11       		.uleb128 0x11
 4198 00d4 01       		.uleb128 0x1
 4199 00d5 12       		.uleb128 0x12
 4200 00d6 06       		.uleb128 0x6
 4201 00d7 40       		.uleb128 0x40
 4202 00d8 18       		.uleb128 0x18
 4203 00d9 9742     		.uleb128 0x2117
 4204 00db 19       		.uleb128 0x19
 4205 00dc 00       		.byte	0
 4206 00dd 00       		.byte	0
 4207 00de 0F       		.uleb128 0xf
 4208 00df 2E       		.uleb128 0x2e
 4209 00e0 01       		.byte	0x1
 4210 00e1 3F       		.uleb128 0x3f
 4211 00e2 19       		.uleb128 0x19
 4212 00e3 03       		.uleb128 0x3
 4213 00e4 0E       		.uleb128 0xe
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 125


 4214 00e5 3A       		.uleb128 0x3a
 4215 00e6 0B       		.uleb128 0xb
 4216 00e7 3B       		.uleb128 0x3b
 4217 00e8 05       		.uleb128 0x5
 4218 00e9 27       		.uleb128 0x27
 4219 00ea 19       		.uleb128 0x19
 4220 00eb 49       		.uleb128 0x49
 4221 00ec 13       		.uleb128 0x13
 4222 00ed 11       		.uleb128 0x11
 4223 00ee 01       		.uleb128 0x1
 4224 00ef 12       		.uleb128 0x12
 4225 00f0 06       		.uleb128 0x6
 4226 00f1 40       		.uleb128 0x40
 4227 00f2 18       		.uleb128 0x18
 4228 00f3 9742     		.uleb128 0x2117
 4229 00f5 19       		.uleb128 0x19
 4230 00f6 01       		.uleb128 0x1
 4231 00f7 13       		.uleb128 0x13
 4232 00f8 00       		.byte	0
 4233 00f9 00       		.byte	0
 4234 00fa 10       		.uleb128 0x10
 4235 00fb 2E       		.uleb128 0x2e
 4236 00fc 00       		.byte	0
 4237 00fd 3F       		.uleb128 0x3f
 4238 00fe 19       		.uleb128 0x19
 4239 00ff 03       		.uleb128 0x3
 4240 0100 0E       		.uleb128 0xe
 4241 0101 3A       		.uleb128 0x3a
 4242 0102 0B       		.uleb128 0xb
 4243 0103 3B       		.uleb128 0x3b
 4244 0104 05       		.uleb128 0x5
 4245 0105 27       		.uleb128 0x27
 4246 0106 19       		.uleb128 0x19
 4247 0107 49       		.uleb128 0x49
 4248 0108 13       		.uleb128 0x13
 4249 0109 11       		.uleb128 0x11
 4250 010a 01       		.uleb128 0x1
 4251 010b 12       		.uleb128 0x12
 4252 010c 06       		.uleb128 0x6
 4253 010d 40       		.uleb128 0x40
 4254 010e 18       		.uleb128 0x18
 4255 010f 9742     		.uleb128 0x2117
 4256 0111 19       		.uleb128 0x19
 4257 0112 00       		.byte	0
 4258 0113 00       		.byte	0
 4259 0114 11       		.uleb128 0x11
 4260 0115 2E       		.uleb128 0x2e
 4261 0116 01       		.byte	0x1
 4262 0117 3F       		.uleb128 0x3f
 4263 0118 19       		.uleb128 0x19
 4264 0119 03       		.uleb128 0x3
 4265 011a 0E       		.uleb128 0xe
 4266 011b 3A       		.uleb128 0x3a
 4267 011c 0B       		.uleb128 0xb
 4268 011d 3B       		.uleb128 0x3b
 4269 011e 05       		.uleb128 0x5
 4270 011f 27       		.uleb128 0x27
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 126


 4271 0120 19       		.uleb128 0x19
 4272 0121 11       		.uleb128 0x11
 4273 0122 01       		.uleb128 0x1
 4274 0123 12       		.uleb128 0x12
 4275 0124 06       		.uleb128 0x6
 4276 0125 40       		.uleb128 0x40
 4277 0126 18       		.uleb128 0x18
 4278 0127 9742     		.uleb128 0x2117
 4279 0129 19       		.uleb128 0x19
 4280 012a 01       		.uleb128 0x1
 4281 012b 13       		.uleb128 0x13
 4282 012c 00       		.byte	0
 4283 012d 00       		.byte	0
 4284 012e 12       		.uleb128 0x12
 4285 012f 2E       		.uleb128 0x2e
 4286 0130 00       		.byte	0
 4287 0131 3F       		.uleb128 0x3f
 4288 0132 19       		.uleb128 0x19
 4289 0133 03       		.uleb128 0x3
 4290 0134 0E       		.uleb128 0xe
 4291 0135 3A       		.uleb128 0x3a
 4292 0136 0B       		.uleb128 0xb
 4293 0137 3B       		.uleb128 0x3b
 4294 0138 05       		.uleb128 0x5
 4295 0139 27       		.uleb128 0x27
 4296 013a 19       		.uleb128 0x19
 4297 013b 11       		.uleb128 0x11
 4298 013c 01       		.uleb128 0x1
 4299 013d 12       		.uleb128 0x12
 4300 013e 06       		.uleb128 0x6
 4301 013f 40       		.uleb128 0x40
 4302 0140 18       		.uleb128 0x18
 4303 0141 9642     		.uleb128 0x2116
 4304 0143 19       		.uleb128 0x19
 4305 0144 00       		.byte	0
 4306 0145 00       		.byte	0
 4307 0146 13       		.uleb128 0x13
 4308 0147 34       		.uleb128 0x34
 4309 0148 00       		.byte	0
 4310 0149 03       		.uleb128 0x3
 4311 014a 08       		.uleb128 0x8
 4312 014b 3A       		.uleb128 0x3a
 4313 014c 0B       		.uleb128 0xb
 4314 014d 3B       		.uleb128 0x3b
 4315 014e 05       		.uleb128 0x5
 4316 014f 49       		.uleb128 0x49
 4317 0150 13       		.uleb128 0x13
 4318 0151 02       		.uleb128 0x2
 4319 0152 18       		.uleb128 0x18
 4320 0153 00       		.byte	0
 4321 0154 00       		.byte	0
 4322 0155 14       		.uleb128 0x14
 4323 0156 2E       		.uleb128 0x2e
 4324 0157 01       		.byte	0x1
 4325 0158 03       		.uleb128 0x3
 4326 0159 0E       		.uleb128 0xe
 4327 015a 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 127


 4328 015b 0B       		.uleb128 0xb
 4329 015c 3B       		.uleb128 0x3b
 4330 015d 05       		.uleb128 0x5
 4331 015e 27       		.uleb128 0x27
 4332 015f 19       		.uleb128 0x19
 4333 0160 11       		.uleb128 0x11
 4334 0161 01       		.uleb128 0x1
 4335 0162 12       		.uleb128 0x12
 4336 0163 06       		.uleb128 0x6
 4337 0164 40       		.uleb128 0x40
 4338 0165 18       		.uleb128 0x18
 4339 0166 9642     		.uleb128 0x2116
 4340 0168 19       		.uleb128 0x19
 4341 0169 01       		.uleb128 0x1
 4342 016a 13       		.uleb128 0x13
 4343 016b 00       		.byte	0
 4344 016c 00       		.byte	0
 4345 016d 15       		.uleb128 0x15
 4346 016e 01       		.uleb128 0x1
 4347 016f 01       		.byte	0x1
 4348 0170 49       		.uleb128 0x49
 4349 0171 13       		.uleb128 0x13
 4350 0172 01       		.uleb128 0x1
 4351 0173 13       		.uleb128 0x13
 4352 0174 00       		.byte	0
 4353 0175 00       		.byte	0
 4354 0176 16       		.uleb128 0x16
 4355 0177 21       		.uleb128 0x21
 4356 0178 00       		.byte	0
 4357 0179 49       		.uleb128 0x49
 4358 017a 13       		.uleb128 0x13
 4359 017b 2F       		.uleb128 0x2f
 4360 017c 0B       		.uleb128 0xb
 4361 017d 00       		.byte	0
 4362 017e 00       		.byte	0
 4363 017f 17       		.uleb128 0x17
 4364 0180 34       		.uleb128 0x34
 4365 0181 00       		.byte	0
 4366 0182 03       		.uleb128 0x3
 4367 0183 0E       		.uleb128 0xe
 4368 0184 3A       		.uleb128 0x3a
 4369 0185 0B       		.uleb128 0xb
 4370 0186 3B       		.uleb128 0x3b
 4371 0187 0B       		.uleb128 0xb
 4372 0188 49       		.uleb128 0x49
 4373 0189 13       		.uleb128 0x13
 4374 018a 02       		.uleb128 0x2
 4375 018b 18       		.uleb128 0x18
 4376 018c 00       		.byte	0
 4377 018d 00       		.byte	0
 4378 018e 18       		.uleb128 0x18
 4379 018f 34       		.uleb128 0x34
 4380 0190 00       		.byte	0
 4381 0191 03       		.uleb128 0x3
 4382 0192 0E       		.uleb128 0xe
 4383 0193 3A       		.uleb128 0x3a
 4384 0194 0B       		.uleb128 0xb
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 128


 4385 0195 3B       		.uleb128 0x3b
 4386 0196 0B       		.uleb128 0xb
 4387 0197 49       		.uleb128 0x49
 4388 0198 13       		.uleb128 0x13
 4389 0199 3F       		.uleb128 0x3f
 4390 019a 19       		.uleb128 0x19
 4391 019b 02       		.uleb128 0x2
 4392 019c 18       		.uleb128 0x18
 4393 019d 00       		.byte	0
 4394 019e 00       		.byte	0
 4395 019f 19       		.uleb128 0x19
 4396 01a0 26       		.uleb128 0x26
 4397 01a1 00       		.byte	0
 4398 01a2 49       		.uleb128 0x49
 4399 01a3 13       		.uleb128 0x13
 4400 01a4 00       		.byte	0
 4401 01a5 00       		.byte	0
 4402 01a6 00       		.byte	0
 4403              		.section	.debug_aranges,"",%progbits
 4404 0000 9C010000 		.4byte	0x19c
 4405 0004 0200     		.2byte	0x2
 4406 0006 00000000 		.4byte	.Ldebug_info0
 4407 000a 04       		.byte	0x4
 4408 000b 00       		.byte	0
 4409 000c 0000     		.2byte	0
 4410 000e 0000     		.2byte	0
 4411 0010 00000000 		.4byte	.LFB2
 4412 0014 1C000000 		.4byte	.LFE2-.LFB2
 4413 0018 00000000 		.4byte	.LFB3
 4414 001c 18000000 		.4byte	.LFE3-.LFB3
 4415 0020 00000000 		.4byte	.LFB4
 4416 0024 48000000 		.4byte	.LFE4-.LFB4
 4417 0028 00000000 		.4byte	.LFB5
 4418 002c 34000000 		.4byte	.LFE5-.LFB5
 4419 0030 00000000 		.4byte	.LFB6
 4420 0034 44000000 		.4byte	.LFE6-.LFB6
 4421 0038 00000000 		.4byte	.LFB7
 4422 003c EC010000 		.4byte	.LFE7-.LFB7
 4423 0040 00000000 		.4byte	.LFB8
 4424 0044 74000000 		.4byte	.LFE8-.LFB8
 4425 0048 00000000 		.4byte	.LFB9
 4426 004c 2C000000 		.4byte	.LFE9-.LFB9
 4427 0050 00000000 		.4byte	.LFB10
 4428 0054 20000000 		.4byte	.LFE10-.LFB10
 4429 0058 00000000 		.4byte	.LFB11
 4430 005c 58000000 		.4byte	.LFE11-.LFB11
 4431 0060 00000000 		.4byte	.LFB12
 4432 0064 60000000 		.4byte	.LFE12-.LFB12
 4433 0068 00000000 		.4byte	.LFB13
 4434 006c 28000000 		.4byte	.LFE13-.LFB13
 4435 0070 00000000 		.4byte	.LFB14
 4436 0074 18000000 		.4byte	.LFE14-.LFB14
 4437 0078 00000000 		.4byte	.LFB15
 4438 007c 14000000 		.4byte	.LFE15-.LFB15
 4439 0080 00000000 		.4byte	.LFB16
 4440 0084 30000000 		.4byte	.LFE16-.LFB16
 4441 0088 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 129


 4442 008c 24000000 		.4byte	.LFE17-.LFB17
 4443 0090 00000000 		.4byte	.LFB18
 4444 0094 18000000 		.4byte	.LFE18-.LFB18
 4445 0098 00000000 		.4byte	.LFB19
 4446 009c 48000000 		.4byte	.LFE19-.LFB19
 4447 00a0 00000000 		.4byte	.LFB20
 4448 00a4 34000000 		.4byte	.LFE20-.LFB20
 4449 00a8 00000000 		.4byte	.LFB21
 4450 00ac 4C000000 		.4byte	.LFE21-.LFB21
 4451 00b0 00000000 		.4byte	.LFB22
 4452 00b4 36000000 		.4byte	.LFE22-.LFB22
 4453 00b8 00000000 		.4byte	.LFB23
 4454 00bc A8000000 		.4byte	.LFE23-.LFB23
 4455 00c0 00000000 		.4byte	.LFB24
 4456 00c4 5C000000 		.4byte	.LFE24-.LFB24
 4457 00c8 00000000 		.4byte	.LFB25
 4458 00cc 28000000 		.4byte	.LFE25-.LFB25
 4459 00d0 00000000 		.4byte	.LFB26
 4460 00d4 30000000 		.4byte	.LFE26-.LFB26
 4461 00d8 00000000 		.4byte	.LFB27
 4462 00dc 28000000 		.4byte	.LFE27-.LFB27
 4463 00e0 00000000 		.4byte	.LFB28
 4464 00e4 28000000 		.4byte	.LFE28-.LFB28
 4465 00e8 00000000 		.4byte	.LFB29
 4466 00ec 28000000 		.4byte	.LFE29-.LFB29
 4467 00f0 00000000 		.4byte	.LFB30
 4468 00f4 14000000 		.4byte	.LFE30-.LFB30
 4469 00f8 00000000 		.4byte	.LFB31
 4470 00fc 20000000 		.4byte	.LFE31-.LFB31
 4471 0100 00000000 		.4byte	.LFB32
 4472 0104 48000000 		.4byte	.LFE32-.LFB32
 4473 0108 00000000 		.4byte	.LFB33
 4474 010c 28000000 		.4byte	.LFE33-.LFB33
 4475 0110 00000000 		.4byte	.LFB34
 4476 0114 84000000 		.4byte	.LFE34-.LFB34
 4477 0118 00000000 		.4byte	.LFB35
 4478 011c 24000000 		.4byte	.LFE35-.LFB35
 4479 0120 00000000 		.4byte	.LFB36
 4480 0124 64000000 		.4byte	.LFE36-.LFB36
 4481 0128 00000000 		.4byte	.LFB37
 4482 012c 1C000000 		.4byte	.LFE37-.LFB37
 4483 0130 00000000 		.4byte	.LFB38
 4484 0134 18000000 		.4byte	.LFE38-.LFB38
 4485 0138 00000000 		.4byte	.LFB39
 4486 013c 18000000 		.4byte	.LFE39-.LFB39
 4487 0140 00000000 		.4byte	.LFB40
 4488 0144 18000000 		.4byte	.LFE40-.LFB40
 4489 0148 00000000 		.4byte	.LFB41
 4490 014c 1C000000 		.4byte	.LFE41-.LFB41
 4491 0150 00000000 		.4byte	.LFB42
 4492 0154 18000000 		.4byte	.LFE42-.LFB42
 4493 0158 00000000 		.4byte	.LFB43
 4494 015c 18000000 		.4byte	.LFE43-.LFB43
 4495 0160 00000000 		.4byte	.LFB44
 4496 0164 34000000 		.4byte	.LFE44-.LFB44
 4497 0168 00000000 		.4byte	.LFB45
 4498 016c 18000000 		.4byte	.LFE45-.LFB45
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 130


 4499 0170 00000000 		.4byte	.LFB46
 4500 0174 14000000 		.4byte	.LFE46-.LFB46
 4501 0178 00000000 		.4byte	.LFB47
 4502 017c 2C000000 		.4byte	.LFE47-.LFB47
 4503 0180 00000000 		.4byte	.LFB48
 4504 0184 1C000000 		.4byte	.LFE48-.LFB48
 4505 0188 00000000 		.4byte	.LFB49
 4506 018c 44000000 		.4byte	.LFE49-.LFB49
 4507 0190 00000000 		.4byte	.LFB50
 4508 0194 C0000000 		.4byte	.LFE50-.LFB50
 4509 0198 00000000 		.4byte	0
 4510 019c 00000000 		.4byte	0
 4511              		.section	.debug_ranges,"",%progbits
 4512              	.Ldebug_ranges0:
 4513 0000 00000000 		.4byte	.LFB2
 4514 0004 1C000000 		.4byte	.LFE2
 4515 0008 00000000 		.4byte	.LFB3
 4516 000c 18000000 		.4byte	.LFE3
 4517 0010 00000000 		.4byte	.LFB4
 4518 0014 48000000 		.4byte	.LFE4
 4519 0018 00000000 		.4byte	.LFB5
 4520 001c 34000000 		.4byte	.LFE5
 4521 0020 00000000 		.4byte	.LFB6
 4522 0024 44000000 		.4byte	.LFE6
 4523 0028 00000000 		.4byte	.LFB7
 4524 002c EC010000 		.4byte	.LFE7
 4525 0030 00000000 		.4byte	.LFB8
 4526 0034 74000000 		.4byte	.LFE8
 4527 0038 00000000 		.4byte	.LFB9
 4528 003c 2C000000 		.4byte	.LFE9
 4529 0040 00000000 		.4byte	.LFB10
 4530 0044 20000000 		.4byte	.LFE10
 4531 0048 00000000 		.4byte	.LFB11
 4532 004c 58000000 		.4byte	.LFE11
 4533 0050 00000000 		.4byte	.LFB12
 4534 0054 60000000 		.4byte	.LFE12
 4535 0058 00000000 		.4byte	.LFB13
 4536 005c 28000000 		.4byte	.LFE13
 4537 0060 00000000 		.4byte	.LFB14
 4538 0064 18000000 		.4byte	.LFE14
 4539 0068 00000000 		.4byte	.LFB15
 4540 006c 14000000 		.4byte	.LFE15
 4541 0070 00000000 		.4byte	.LFB16
 4542 0074 30000000 		.4byte	.LFE16
 4543 0078 00000000 		.4byte	.LFB17
 4544 007c 24000000 		.4byte	.LFE17
 4545 0080 00000000 		.4byte	.LFB18
 4546 0084 18000000 		.4byte	.LFE18
 4547 0088 00000000 		.4byte	.LFB19
 4548 008c 48000000 		.4byte	.LFE19
 4549 0090 00000000 		.4byte	.LFB20
 4550 0094 34000000 		.4byte	.LFE20
 4551 0098 00000000 		.4byte	.LFB21
 4552 009c 4C000000 		.4byte	.LFE21
 4553 00a0 00000000 		.4byte	.LFB22
 4554 00a4 36000000 		.4byte	.LFE22
 4555 00a8 00000000 		.4byte	.LFB23
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 131


 4556 00ac A8000000 		.4byte	.LFE23
 4557 00b0 00000000 		.4byte	.LFB24
 4558 00b4 5C000000 		.4byte	.LFE24
 4559 00b8 00000000 		.4byte	.LFB25
 4560 00bc 28000000 		.4byte	.LFE25
 4561 00c0 00000000 		.4byte	.LFB26
 4562 00c4 30000000 		.4byte	.LFE26
 4563 00c8 00000000 		.4byte	.LFB27
 4564 00cc 28000000 		.4byte	.LFE27
 4565 00d0 00000000 		.4byte	.LFB28
 4566 00d4 28000000 		.4byte	.LFE28
 4567 00d8 00000000 		.4byte	.LFB29
 4568 00dc 28000000 		.4byte	.LFE29
 4569 00e0 00000000 		.4byte	.LFB30
 4570 00e4 14000000 		.4byte	.LFE30
 4571 00e8 00000000 		.4byte	.LFB31
 4572 00ec 20000000 		.4byte	.LFE31
 4573 00f0 00000000 		.4byte	.LFB32
 4574 00f4 48000000 		.4byte	.LFE32
 4575 00f8 00000000 		.4byte	.LFB33
 4576 00fc 28000000 		.4byte	.LFE33
 4577 0100 00000000 		.4byte	.LFB34
 4578 0104 84000000 		.4byte	.LFE34
 4579 0108 00000000 		.4byte	.LFB35
 4580 010c 24000000 		.4byte	.LFE35
 4581 0110 00000000 		.4byte	.LFB36
 4582 0114 64000000 		.4byte	.LFE36
 4583 0118 00000000 		.4byte	.LFB37
 4584 011c 1C000000 		.4byte	.LFE37
 4585 0120 00000000 		.4byte	.LFB38
 4586 0124 18000000 		.4byte	.LFE38
 4587 0128 00000000 		.4byte	.LFB39
 4588 012c 18000000 		.4byte	.LFE39
 4589 0130 00000000 		.4byte	.LFB40
 4590 0134 18000000 		.4byte	.LFE40
 4591 0138 00000000 		.4byte	.LFB41
 4592 013c 1C000000 		.4byte	.LFE41
 4593 0140 00000000 		.4byte	.LFB42
 4594 0144 18000000 		.4byte	.LFE42
 4595 0148 00000000 		.4byte	.LFB43
 4596 014c 18000000 		.4byte	.LFE43
 4597 0150 00000000 		.4byte	.LFB44
 4598 0154 34000000 		.4byte	.LFE44
 4599 0158 00000000 		.4byte	.LFB45
 4600 015c 18000000 		.4byte	.LFE45
 4601 0160 00000000 		.4byte	.LFB46
 4602 0164 14000000 		.4byte	.LFE46
 4603 0168 00000000 		.4byte	.LFB47
 4604 016c 2C000000 		.4byte	.LFE47
 4605 0170 00000000 		.4byte	.LFB48
 4606 0174 1C000000 		.4byte	.LFE48
 4607 0178 00000000 		.4byte	.LFB49
 4608 017c 44000000 		.4byte	.LFE49
 4609 0180 00000000 		.4byte	.LFB50
 4610 0184 C0000000 		.4byte	.LFE50
 4611 0188 00000000 		.4byte	0
 4612 018c 00000000 		.4byte	0
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 132


 4613              		.section	.debug_line,"",%progbits
 4614              	.Ldebug_line0:
 4615 0000 DD040000 		.section	.debug_str,"MS",%progbits,1
 4615      02004F00 
 4615      00000201 
 4615      FB0E0D00 
 4615      01010101 
 4616              	.LASF59:
 4617 0000 72616D56 		.ascii	"ramVectorTable\000"
 4617      6563746F 
 4617      72546162 
 4617      6C6500
 4618              	.LASF32:
 4619 000f 62675472 		.ascii	"bgTrim4\000"
 4619      696D3400 
 4620              	.LASF10:
 4621 0017 75696E74 		.ascii	"uint16\000"
 4621      313600
 4622              	.LASF52:
 4623 001e 696E7453 		.ascii	"intState\000"
 4623      74617465 
 4623      00
 4624              	.LASF26:
 4625 0027 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4625      73436C6B 
 4625      57726974 
 4625      65486663 
 4625      6C6B4469 
 4626              	.LASF58:
 4627 0040 6F6C6449 		.ascii	"oldIsr\000"
 4627      737200
 4628              	.LASF96:
 4629 0047 72657456 		.ascii	"retVal\000"
 4629      616C00
 4630              	.LASF51:
 4631 004e 43794469 		.ascii	"CyDisableInts\000"
 4631      7361626C 
 4631      65496E74 
 4631      7300
 4632              	.LASF35:
 4633 005c 63757272 		.ascii	"currentImoTrim2Value\000"
 4633      656E7449 
 4633      6D6F5472 
 4633      696D3256 
 4633      616C7565 
 4634              	.LASF7:
 4635 0071 6C6F6E67 		.ascii	"long long unsigned int\000"
 4635      206C6F6E 
 4635      6720756E 
 4635      7369676E 
 4635      65642069 
 4636              	.LASF105:
 4637 0088 43795379 		.ascii	"CySysTickInitVar\000"
 4637      73546963 
 4637      6B496E69 
 4637      74566172 
 4637      00
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 133


 4638              	.LASF53:
 4639 0099 4379456E 		.ascii	"CyEnableInts\000"
 4639      61626C65 
 4639      496E7473 
 4639      00
 4640              	.LASF74:
 4641 00a6 4379536F 		.ascii	"CySoftwareReset\000"
 4641      66747761 
 4641      72655265 
 4641      73657400 
 4642              	.LASF84:
 4643 00b6 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4643      73546963 
 4643      6B456E61 
 4643      626C6549 
 4643      6E746572 
 4644              	.LASF69:
 4645 00cf 4379496E 		.ascii	"CyIntGetState\000"
 4645      74476574 
 4645      53746174 
 4645      6500
 4646              	.LASF6:
 4647 00dd 6C6F6E67 		.ascii	"long long int\000"
 4647      206C6F6E 
 4647      6720696E 
 4647      7400
 4648              	.LASF0:
 4649 00eb 7369676E 		.ascii	"signed char\000"
 4649      65642063 
 4649      68617200 
 4650              	.LASF31:
 4651 00f7 66726571 		.ascii	"freq\000"
 4651      00
 4652              	.LASF79:
 4653 00fc 43794465 		.ascii	"CyDelayFreq\000"
 4653      6C617946 
 4653      72657100 
 4654              	.LASF23:
 4655 0108 696E7465 		.ascii	"interruptState\000"
 4655      72727570 
 4655      74537461 
 4655      746500
 4656              	.LASF88:
 4657 0117 43795379 		.ascii	"CySysTickGetReload\000"
 4657      73546963 
 4657      6B476574 
 4657      52656C6F 
 4657      616400
 4658              	.LASF4:
 4659 012a 6C6F6E67 		.ascii	"long int\000"
 4659      20696E74 
 4659      00
 4660              	.LASF70:
 4661 0133 4379496E 		.ascii	"CyIntDisable\000"
 4661      74446973 
 4661      61626C65 
 4661      00
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 134


 4662              	.LASF97:
 4663 0140 43795379 		.ascii	"CySysTickGetCallback\000"
 4663      73546963 
 4663      6B476574 
 4663      43616C6C 
 4663      6261636B 
 4664              	.LASF9:
 4665 0155 75696E74 		.ascii	"uint8\000"
 4665      3800
 4666              	.LASF102:
 4667 015b 63796465 		.ascii	"cydelayFreqKhz\000"
 4667      6C617946 
 4667      7265714B 
 4667      687A00
 4668              	.LASF77:
 4669 016a 43794465 		.ascii	"CyDelayUs\000"
 4669      6C617955 
 4669      7300
 4670              	.LASF13:
 4671 0174 646F7562 		.ascii	"double\000"
 4671      6C6500
 4672              	.LASF65:
 4673 017b 73686966 		.ascii	"shift\000"
 4673      7400
 4674              	.LASF48:
 4675 0181 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 4675      734C7664 
 4675      436C6561 
 4675      72496E74 
 4675      65727275 
 4676              	.LASF11:
 4677 0198 75696E74 		.ascii	"uint32\000"
 4677      333200
 4678              	.LASF42:
 4679 019f 43795379 		.ascii	"CySysClkEcoReadStatus\000"
 4679      73436C6B 
 4679      45636F52 
 4679      65616453 
 4679      74617475 
 4680              	.LASF56:
 4681 01b5 6E756D62 		.ascii	"number\000"
 4681      657200
 4682              	.LASF54:
 4683 01bc 6D61736B 		.ascii	"mask\000"
 4683      00
 4684              	.LASF37:
 4685 01c1 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4685      73436C6B 
 4685      47657453 
 4685      7973636C 
 4685      6B536F75 
 4686              	.LASF67:
 4687 01d9 4379496E 		.ascii	"CyIntGetPriority\000"
 4687      74476574 
 4687      5072696F 
 4687      72697479 
 4687      00
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 135


 4688              	.LASF104:
 4689 01ea 63796465 		.ascii	"cydelay32kMs\000"
 4689      6C617933 
 4689      326B4D73 
 4689      00
 4690              	.LASF81:
 4691 01f7 43795379 		.ascii	"CySysTickInit\000"
 4691      73546963 
 4691      6B496E69 
 4691      7400
 4692              	.LASF66:
 4693 0205 76616C75 		.ascii	"value\000"
 4693      6500
 4694              	.LASF91:
 4695 020b 636C6F63 		.ascii	"clockSource\000"
 4695      6B536F75 
 4695      72636500 
 4696              	.LASF98:
 4697 0217 43794765 		.ascii	"CyGetUniqueId\000"
 4697      74556E69 
 4697      71756549 
 4697      6400
 4698              	.LASF92:
 4699 0225 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4699      73546963 
 4699      6B476574 
 4699      436F756E 
 4699      74466C61 
 4700              	.LASF8:
 4701 023b 756E7369 		.ascii	"unsigned int\000"
 4701      676E6564 
 4701      20696E74 
 4701      00
 4702              	.LASF93:
 4703 0248 43795379 		.ascii	"CySysTickClear\000"
 4703      73546963 
 4703      6B436C65 
 4703      617200
 4704              	.LASF5:
 4705 0257 6C6F6E67 		.ascii	"long unsigned int\000"
 4705      20756E73 
 4705      69676E65 
 4705      6420696E 
 4705      7400
 4706              	.LASF87:
 4707 0269 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 4707      734C7664 
 4707      47657449 
 4707      6E746572 
 4707      72757074 
 4708              	.LASF22:
 4709 0284 43795379 		.ascii	"CySysClkImoStop\000"
 4709      73436C6B 
 4709      496D6F53 
 4709      746F7000 
 4710              	.LASF71:
 4711 0294 4379496E 		.ascii	"CyIntSetPending\000"
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 136


 4711      74536574 
 4711      50656E64 
 4711      696E6700 
 4712              	.LASF49:
 4713 02a4 43795379 		.ascii	"CySysGetResetReason\000"
 4713      73476574 
 4713      52657365 
 4713      74526561 
 4713      736F6E00 
 4714              	.LASF3:
 4715 02b8 73686F72 		.ascii	"short unsigned int\000"
 4715      7420756E 
 4715      7369676E 
 4715      65642069 
 4715      6E7400
 4716              	.LASF90:
 4717 02cb 43795379 		.ascii	"CySysTickSetClockSource\000"
 4717      73546963 
 4717      6B536574 
 4717      436C6F63 
 4717      6B536F75 
 4718              	.LASF61:
 4719 02e3 4379496E 		.ascii	"CyIntSetVector\000"
 4719      74536574 
 4719      56656374 
 4719      6F7200
 4720              	.LASF108:
 4721 02f2 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\CyLib.c\000"
 4721      6E657261 
 4721      7465645F 
 4721      536F7572 
 4721      63655C50 
 4722              	.LASF64:
 4723 0313 7072696F 		.ascii	"priority\000"
 4723      72697479 
 4723      00
 4724              	.LASF30:
 4725 031c 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4725      73436C6B 
 4725      57726974 
 4725      65496D6F 
 4725      46726571 
 4726              	.LASF55:
 4727 0331 4379496E 		.ascii	"CyIntSetSysVector\000"
 4727      74536574 
 4727      53797356 
 4727      6563746F 
 4727      7200
 4728              	.LASF17:
 4729 0343 72656733 		.ascii	"reg32\000"
 4729      3200
 4730              	.LASF80:
 4731 0349 43795379 		.ascii	"CySysTickStart\000"
 4731      73546963 
 4731      6B537461 
 4731      727400
 4732              	.LASF40:
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 137


 4733 0358 72657475 		.ascii	"returnStatus\000"
 4733      726E5374 
 4733      61747573 
 4733      00
 4734              	.LASF19:
 4735 0365 73697A65 		.ascii	"sizetype\000"
 4735      74797065 
 4735      00
 4736              	.LASF72:
 4737 036e 4379496E 		.ascii	"CyIntClearPending\000"
 4737      74436C65 
 4737      61725065 
 4737      6E64696E 
 4737      6700
 4738              	.LASF57:
 4739 0380 61646472 		.ascii	"address\000"
 4739      65737300 
 4740              	.LASF33:
 4741 0388 62675472 		.ascii	"bgTrim5\000"
 4741      696D3500 
 4742              	.LASF25:
 4743 0390 73797363 		.ascii	"sysclkSource\000"
 4743      6C6B536F 
 4743      75726365 
 4743      00
 4744              	.LASF95:
 4745 039d 66756E63 		.ascii	"function\000"
 4745      74696F6E 
 4745      00
 4746              	.LASF106:
 4747 03a6 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 4747      6F467265 
 4747      714D687A 
 4747      32526567 
 4747      00
 4748              	.LASF89:
 4749 03b7 43795379 		.ascii	"CySysTickGetValue\000"
 4749      73546963 
 4749      6B476574 
 4749      56616C75 
 4749      6500
 4750              	.LASF101:
 4751 03c9 63796465 		.ascii	"cydelayFreqHz\000"
 4751      6C617946 
 4751      72657148 
 4751      7A00
 4752              	.LASF63:
 4753 03d7 4379496E 		.ascii	"CyIntSetPriority\000"
 4753      74536574 
 4753      5072696F 
 4753      72697479 
 4753      00
 4754              	.LASF12:
 4755 03e8 666C6F61 		.ascii	"float\000"
 4755      7400
 4756              	.LASF45:
 4757 03ee 43795379 		.ascii	"CySysLvdEnable\000"
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 138


 4757      734C7664 
 4757      456E6162 
 4757      6C6500
 4758              	.LASF20:
 4759 03fd 63795379 		.ascii	"cySysTickCallback\000"
 4759      73546963 
 4759      6B43616C 
 4759      6C626163 
 4759      6B00
 4760              	.LASF62:
 4761 040f 4379496E 		.ascii	"CyIntGetVector\000"
 4761      74476574 
 4761      56656374 
 4761      6F7200
 4762              	.LASF76:
 4763 041e 6D696C6C 		.ascii	"milliseconds\000"
 4763      69736563 
 4763      6F6E6473 
 4763      00
 4764              	.LASF16:
 4765 042b 72656738 		.ascii	"reg8\000"
 4765      00
 4766              	.LASF46:
 4767 0430 74687265 		.ascii	"threshold\000"
 4767      73686F6C 
 4767      6400
 4768              	.LASF73:
 4769 043a 43794861 		.ascii	"CyHalt\000"
 4769      6C7400
 4770              	.LASF1:
 4771 0441 756E7369 		.ascii	"unsigned char\000"
 4771      676E6564 
 4771      20636861 
 4771      7200
 4772              	.LASF2:
 4773 044f 73686F72 		.ascii	"short int\000"
 4773      7420696E 
 4773      7400
 4774              	.LASF68:
 4775 0459 4379496E 		.ascii	"CyIntEnable\000"
 4775      74456E61 
 4775      626C6500 
 4776              	.LASF60:
 4777 0465 4379496E 		.ascii	"CyIntGetSysVector\000"
 4777      74476574 
 4777      53797356 
 4777      6563746F 
 4777      7200
 4778              	.LASF28:
 4779 0477 636C6B53 		.ascii	"clkSelect\000"
 4779      656C6563 
 4779      7400
 4780              	.LASF38:
 4781 0481 43795379 		.ascii	"CySysClkEcoStart\000"
 4781      73436C6B 
 4781      45636F53 
 4781      74617274 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 139


 4781      00
 4782              	.LASF50:
 4783 0492 72656173 		.ascii	"reason\000"
 4783      6F6E00
 4784              	.LASF14:
 4785 0499 63686172 		.ascii	"char\000"
 4785      00
 4786              	.LASF18:
 4787 049e 63796973 		.ascii	"cyisraddress\000"
 4787      72616464 
 4787      72657373 
 4787      00
 4788              	.LASF82:
 4789 04ab 43795379 		.ascii	"CySysTickEnable\000"
 4789      73546963 
 4789      6B456E61 
 4789      626C6500 
 4790              	.LASF27:
 4791 04bb 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 4791      73436C6B 
 4791      57726974 
 4791      65537973 
 4791      636C6B44 
 4792              	.LASF41:
 4793 04d2 43795379 		.ascii	"CySysClkEcoStop\000"
 4793      73436C6B 
 4793      45636F53 
 4793      746F7000 
 4794              	.LASF100:
 4795 04e2 43795379 		.ascii	"CySysTickCallbacks\000"
 4795      73546963 
 4795      6B43616C 
 4795      6C626163 
 4795      6B7300
 4796              	.LASF36:
 4797 04f5 696D6F54 		.ascii	"imoTrim1Value\000"
 4797      72696D31 
 4797      56616C75 
 4797      6500
 4798              	.LASF99:
 4799 0503 756E6971 		.ascii	"uniqueId\000"
 4799      75654964 
 4799      00
 4800              	.LASF75:
 4801 050c 43794465 		.ascii	"CyDelay\000"
 4801      6C617900 
 4802              	.LASF85:
 4803 0514 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 4803      73546963 
 4803      6B446973 
 4803      61626C65 
 4803      496E7465 
 4804              	.LASF47:
 4805 052e 43795379 		.ascii	"CySysLvdDisable\000"
 4805      734C7664 
 4805      44697361 
 4805      626C6500 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 140


 4806              	.LASF103:
 4807 053e 63796465 		.ascii	"cydelayFreqMhz\000"
 4807      6C617946 
 4807      7265714D 
 4807      687A00
 4808              	.LASF109:
 4809 054d 433A5C55 		.ascii	"C:\\Users\\Matthew\\Documents\\GitHub\\BioSnap\\pro"
 4809      73657273 
 4809      5C4D6174 
 4809      74686577 
 4809      5C446F63 
 4810 057a 635F7465 		.ascii	"c_test\\proc_v1.cydsn\000"
 4810      73745C70 
 4810      726F635F 
 4810      76312E63 
 4810      7964736E 
 4811              	.LASF83:
 4812 058f 43795379 		.ascii	"CySysTickStop\000"
 4812      73546963 
 4812      6B53746F 
 4812      7000
 4813              	.LASF39:
 4814 059d 74696D65 		.ascii	"timeoutUs\000"
 4814      6F757455 
 4814      7300
 4815              	.LASF29:
 4816 05a7 64697669 		.ascii	"divider\000"
 4816      64657200 
 4817              	.LASF44:
 4818 05af 43795379 		.ascii	"CySysClkWriteEcoDiv\000"
 4818      73436C6B 
 4818      57726974 
 4818      6545636F 
 4818      44697600 
 4819              	.LASF15:
 4820 05c3 63797374 		.ascii	"cystatus\000"
 4820      61747573 
 4820      00
 4821              	.LASF107:
 4822 05cc 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4822      4320342E 
 4822      392E3320 
 4822      32303135 
 4822      30333033 
 4823 05ff 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 4823      20726576 
 4823      6973696F 
 4823      6E203232 
 4823      31323230 
 4824 0632 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4824      66756E63 
 4824      74696F6E 
 4824      2D736563 
 4824      74696F6E 
 4825              	.LASF94:
 4826 065a 43795379 		.ascii	"CySysTickSetCallback\000"
 4826      73546963 
ARM GAS  C:\Users\Matthew\AppData\Local\Temp\ccRMqeZg.s 			page 141


 4826      6B536574 
 4826      43616C6C 
 4826      6261636B 
 4827              	.LASF21:
 4828 066f 43795379 		.ascii	"CySysClkImoStart\000"
 4828      73436C6B 
 4828      496D6F53 
 4828      74617274 
 4828      00
 4829              	.LASF34:
 4830 0680 6E657749 		.ascii	"newImoTrim2Value\000"
 4830      6D6F5472 
 4830      696D3256 
 4830      616C7565 
 4830      00
 4831              	.LASF78:
 4832 0691 6D696372 		.ascii	"microseconds\000"
 4832      6F736563 
 4832      6F6E6473 
 4832      00
 4833              	.LASF24:
 4834 069e 746D7052 		.ascii	"tmpReg\000"
 4834      656700
 4835              	.LASF86:
 4836 06a5 43795379 		.ascii	"CySysTickSetReload\000"
 4836      73546963 
 4836      6B536574 
 4836      52656C6F 
 4836      616400
 4837              	.LASF110:
 4838 06b8 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 4838      73546963 
 4838      6B536572 
 4838      76696365 
 4838      43616C6C 
 4839              	.LASF43:
 4840 06d2 72657475 		.ascii	"returnValue\000"
 4840      726E5661 
 4840      6C756500 
 4841              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
